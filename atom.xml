<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TJ VanToll]]></title>
  <link href="http://tjvantoll.com/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2012-08-13T22:27:08-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LESS 101 - The Basics of the CSS Preprocessor]]></title>
    <link href="http://tjvantoll.com/2012/08/10/less-101-the-basics-of-the-css-preprocessor/"/>
    <updated>2012-08-10T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/08/10/less-101-the-basics-of-the-css-preprocessor</id>
    <content type="html"><![CDATA[<p>I gave a &#8220;LESS 101&#8221; talk to my coworkers at Liquid Web today.  I thought I&#8217;d post the slides here in case anyone else might find them useful.  They are <a href="http://tjvantoll.com/speaking/slides/2012/LESS-101">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 Form Validation - Showing All Error Messages]]></title>
    <link href="http://tjvantoll.com/2012/08/05/html5-form-validation-showing-all-error-messages/"/>
    <updated>2012-08-05T16:21:00-04:00</updated>
    <id>http://tjvantoll.com/2012/08/05/html5-form-validation-showing-all-error-messages</id>
    <content type="html"><![CDATA[<p><a href="http://caniuse.com/#feat=form-validation">Browsers that support HTML5 form validation</a> have one thing in common; if a <code>&lt;form&gt;</code> is submitted and has errors on multiple fields, the browser will only display the first error to the user.</p>

<p>Turns out the spec leaves the specific means of handling multiple errors up to the browser itself:</p>

<blockquote><p>Report the problems with the constraints of at least one of the elements given in unhandled invalid controls to the user. User agents may focus one of those elements in the process, by running the focusing steps for that element, and may change the scrolling position of the document, or perform some other action that brings the element to the user&#8217;s attention.</p><p>User agents may report more than one constraint violation. User agents may coalesce related constraint violation reports if appropriate (e.g. if multiple radio buttons in a group are marked as required, only one error need be reported).</p><footer><strong>HTML5 Specification</strong> <cite><a href='http://www.whatwg.org/specs/web-apps/current-work/#the-constraint-validation-api'>www.whatwg.org/specs/web-apps/&hellip;</a></cite></footer></blockquote>


<p>The key part here being that user agents (i.e. browsers) <strong>MAY</strong> report more than one constraint violation (i.e. error).  Turns out they all decided not to.</p>

<!--more-->


<p>You can see this in your browser below (assuming it <a href="http://caniuse.com/#feat=form-validation">supports HTML5 form validation</a> and is not Safari, more on that later).  Both fields are <code>required</code>, but if you submit the form you will only see an error for the first field.</p>

<pre class="codepen" data-type="result" data-href="FBGvu" data-user="tjvantoll" data-host="http://codepen.io"><code></code></pre>


<script async src="http://codepen.io/assets/embed/ei.js"></script>


<p>Here&#8217;s what it looks like on supported browsers if you attempt to submit this empty <code>&lt;form&gt;</code>:</p>

<h5>Chrome 21</h5>

<p><img src="http://tjvantoll.com/images/posts/2012-08-05/Chrome.png" title="Chrome" alt="Chrome" /></p>

<h5>Firefox 14</h5>

<p><img src="http://tjvantoll.com/images/posts/2012-08-05/Firefox.png" title="Firefox" alt="Firefox" /></p>

<h5>Opera 12</h5>

<p><img src="http://tjvantoll.com/images/posts/2012-08-05/Opera.png" title="Opera" alt="Opera" /></p>

<p>As you can see, all three only give an error for the first field.  Firefox at least has the decency to put a red border around all fields with invalid data by default.</p>

<p>The one noticeable browser missing from the list above is Safari.  Even though Safari supports the constraint validation API, the validation itself is turned off.</p>

<h3>Usability</h3>

<p>From a usability perspective showing the users only the first error message is bad.  Imagine how frustrating it would be to continually correct errors just to be presented with the next error in the sequence.  If you&#8217;ve ran into a form such as this before you know what I&#8217;m talking about.</p>

<p>Luckily, browsers provide a <a href="http://www.whatwg.org/specs/web-apps/current-work/#the-constraint-validation-api">constraint validation API</a> that can be used to provide this functionality.</p>

<h3>Using the Validation API</h3>

<p>All dom nodes now possess a <a href="http://www.whatwg.org/specs/web-apps/current-work/#dom-cva-willvalidate_">willValidate</a> property that indicates whether the node is a candidate for form validation.</p>

<p>Nodes in which <code>willValidate</code> is <code>true</code> also have a <code>validity</code> property.  The <code>validity</code> property resolves to a <a href="https://developer.mozilla.org/en-US/docs/DOM/ValidityState">ValidityState object</a> which contains information about whether the field has validation errors, as well as the error message the browser will display to the user.  You can leverage this API to display all error messages whenever a <code>&lt;form&gt;</code> is submitted.</p>

<h3>The Code</h3>

<p>Here&#8217;s how I accomplished this with a jQuery dependent script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;errorMessages&quot;</span><span class="nt">&gt;&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>Name:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">required</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;comments&quot;</span><span class="nt">&gt;</span>Comments:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">&quot;comments&quot;</span> <span class="na">required</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>â€‹
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Keep track of whether there are any errors on the form for Safari.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">formHasErrors</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">showAllErrorMessages</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#errorMessages&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">formHasErrors</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Find everything within the form</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">willValidate</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">validity</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">node</span><span class="p">.</span><span class="nx">validity</span><span class="p">.</span><span class="nx">valid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">formHasErrors</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                <span class="c1">//Find the field&#39;s corresponding label</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;label[for=&#39;</span> <span class="o">+</span> <span class="nx">node</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//Opera incorrectly does not fill the validationMessage property.</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">validationMessage</span> <span class="o">||</span> <span class="s1">&#39;Invalid value.&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#errorMessages&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="nx">show</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&lt;span&gt;&#39;</span> <span class="o">+</span> <span class="nx">label</span><span class="p">.</span><span class="nx">html</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;&lt;/span&gt; &#39;</span> <span class="o">+</span> <span class="nx">message</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[type=submit]&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">showAllErrorMessages</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[type=text]&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keypress&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//keyCode 13 is Enter</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">showAllErrorMessages</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Handle for Safari not having HTML5 form validation active.</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">formHasErrors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span><span class="err">â€‹</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see the results in your browser below:</p>

<pre class="codepen" data-type="result" data-href="eLvlf" data-user="tjvantoll" data-host="http://codepen.io"><code></code></pre>


<p>Here&#8217;s how it looks in Chrome 21:</p>

<p><img src="http://tjvantoll.com/images/posts/2012-08-05/Chrome-full.png" title="Chrome" alt="Chrome" /></p>

<p>A couple things to note:</p>

<p>1) If a user attempts to submit a form and gets validation errors, a <code>submit</code> event is never fired for the <code>&lt;form&gt;</code>.  Therefore, instead of listening for <code>submit</code> on the <code>&lt;form&gt;</code>, I instead listen for a <code>click</code> on the <code>&lt;input type="submit"&gt;</code>.  Since the user is also able to submit the form pressing enter in text inputs, I attach a <code>keypress</code> listener to them to ensure the same logic runs.</p>

<p>2) In my example I start each error message with the contents of the field&#8217;s <code>&lt;label&gt;</code>.  This is because the messages for each field are often identical.  An alternative approach would be to use another constraint validation API method, <a href="http://www.whatwg.org/specs/web-apps/current-work/#dom-cva-setcustomvalidity">setCustomValidity</a> to set a completely custom message.</p>

<p>3) The <code>node.willValidate &amp;&amp; node.validity</code> check will be <code>false</code> in all browsers that do not support the constraint validation API.  Therefore this code will simply do nothing in browsers that do not support HTML5 form validation.</p>

<p>4) Opera incorrectly does not fill the <code>validationMessage</code> property.  Therefore the check <code>var message = node.validationMessage || 'Invalid value.'</code> is necessary so a message is displayed for Opera.</p>

<p>5) In order to make Safari display the error messages I manually keep track of whether there are any validation errors in the <code>&lt;form&gt;</code>.  If there are I prevent the <code>&lt;form&gt;</code> from submitting in a <code>submit</code> event.</p>

<p>6) I do nothing to style the individual fields based on whether they have valid data.  The HTML5 spec provides a number of CSS hooks to do this and I would recommend reading <a href="http://html5doctor.com/css3-pseudo-classes-and-html5-forms/">CSS Pseudo-Classes and HTML5 Forms</a> from <a href="http://html5doctor.com">html5 Doctor</a> if you&#8217;re interested in including such styling.</p>

<h3>That&#8217;s a Lot of Code to Do Something Simple</h3>

<p>Yep.  While browser support is getting to be quite good for HTML5 forms the implementations themselves are still a bit buggy.  Nevertheless, this approach will work for displaying all validation errors to the end user.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DOM Element References as Global Variables]]></title>
    <link href="http://tjvantoll.com/2012/07/19/dom-element-references-as-global-variables/"/>
    <updated>2012-07-19T22:33:00-04:00</updated>
    <id>http://tjvantoll.com/2012/07/19/dom-element-references-as-global-variables</id>
    <content type="html"><![CDATA[<p>Quiz: What is logged when the following markup is rendered?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;bar&quot;</span><span class="nt">&gt;</span>Button<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Syntax error obviously, right?  Wrong.  All major browser rendering engines will log a reference to the <code>&lt;button&gt;</code> node.  This includes Trident (IE), Gecko (Firefox), WebKit (Chrome, Safari, etc), and Presto (Opera).</p>

<h3>Wait.  What?</h3>

<p>Ah, I get it, there&#8217;s no doctype on that markup.  So this a quirks mode only thing then right?  Wrong.  <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=622491">As of Firefox 14</a> the latest version of all major browsers will produce the same result IN STANDARDS MODE.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;bar&quot;</span><span class="nt">&gt;</span>Button<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span> <span class="c1">//Reference to &lt;button&gt;, even in standards mode</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>So What&#8217;s Going On?</h3>

<p>Believe it or not this is actually correct behavior per the HTML specification.</p>

<blockquote><p>6.2.4 Named access on the Window object</p><p>The Window interface supports named properties. The supported property names at any moment consist of:</p><p>> the value of the name content attribute for all a, applet, area, embed, form, frame, frameset, iframe, img, and object elements in the active document that have a name content attribute, and<br/>> the value of the id content attribute of any HTML element in the active document with an id content attribute.</p><footer><strong>HTML Specification</strong> <cite><a href='http://www.whatwg.org/specs/web-apps/current-work/#named-access-on-the-window-object'>www.whatwg.org/specs/web-apps/&hellip;</a></cite></footer></blockquote>


<p>What this is saying is that the value of the <code>name</code> attribute of certain elements and the value of the <code>id</code> attribute of ALL elements are accessible via the <code>window</code> object in the browser.  So, if you have a node <code>&lt;button id="foo"&gt;&lt;/button&gt;</code>, then <code>window.foo</code> will be resolved to a reference to the <code>&lt;button&gt;</code>.  From this point forward I will refer to this behavior as named access.</p>

<h3>How is This Standard Behavior?</h3>

<p>This behavior is an old Internet Explorer <em>feature</em>.  I can only imagine that it was intended to be a convenience for web developers that got sick of typing <code>document.getElementById</code> over and over again.  (this is way before jQuery and other popular toolkits came to be).  Regardless of the reasoning, IE shipped with this functionality and a whole lot of people utilized it.</p>

<p>Other rendering engines were faced with the difficult decision of implementing non-standard behavior or remaining incompatible with a slew of websites written specifically for Internet Explorer.</p>

<p>Gecko implemented this functionality but originally turned it on only in quirks mode.  They recently took the extra step and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=622491">turned named access on in standards mode with Firefox 14</a>.</p>

<p>Webkit and Presto have had named access in standards mode for some time now.  <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=11960">Webkit recently considered relegating this behavior to quirks mode</a>, however, they decided on leaving it enabled in standards mode.  Apparently there is still just too much stuff out there relying on this behavior to remove it in standards mode.  Believe it or not Microsoft even <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=737760">shipped a marketing demo</a> that directly referenced named DOM elements, preventing it from functioning in Gecko.</p>

<p>One of the main aims of the HTML5 specification is to standardize browser behavior, however quirky it might be.  Therefore, this functionality made it into the specification.</p>

<h3>Why is This Behavior Bad?</h3>

<p>I&#8217;ve alluded to the fact that this behavior is bad, but I&#8217;ve haven&#8217;t gotten into details as to why.</p>

<h4>There is a high potential for bugs to be introduced into the system</h4>

<p>Let&#8217;s say you have some code that looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;choice&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">choice</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">//Lots more JavaScript</span>
</span><span class='line'>            <span class="nx">doSomethingVeryComplicated</span><span class="p">(</span><span class="nx">choice</span><span class="p">);</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since a global <code>choice</code> variable is being created, <code>window.choice</code> will resolve to the string <code>foo</code> and not a reference to the <code>&lt;input&gt;</code>.  This is because the <code>&lt;input&gt;</code> reference is being <a href="http://en.wikipedia.org/wiki/Variable_shadowing">shadowed</a> by the variable declaration.  This works the same way as a variable with the same name being declared in a nested function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//Logs 3 instead of 2 because the value defined in the outer</span>
</span><span class='line'>        <span class="c1">//function is shadowed by the x defined in the inner function.</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">y</span><span class="p">();</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is all well and good.  However, let&#8217;s say that during a refactor of this code the <code>var choice = 'foo';</code> line is accidentally removed.  Under normal circumstances this would cause a syntax error because <code>window.choice</code> would now be undefined.  However, because there is a DOM node with an <code>id</code> of <code>choice</code>, that reference will now refer to the DOM node instead.  This can easily lead to unexpected behavior.</p>

<p>The flip side of this situation is also true.  If you have an element <code>&lt;div id="bar"&gt;&lt;/div&gt;</code> and use <code>window.bar</code> to refer to it, that code will break if you create JavaScript variable using <code>var</code> in the same scope (i.e. <code>var bar = 2;</code>).</p>

<h4>Mistyping</h4>

<p>Say you mistype the name of your variable and happen to type a named DOM element.  SURPRISE!</p>

<h4>Non-trivial cost for the browser to implement</h4>

<p>In order for these named elements to be available, the browser has to create a list of all named elements and maintain it as the page changes.  I can&#8217;t offer any specific metrics as to how much time and memory this takes, but there is a cost, especially on pages with a large number of named elements.</p>

<h4>Named elements will be shadowed by properties natively defined on <code>window</code>.</h4>

<p>If you <em>were</em> to go the route of using named access you&#8217;d have to be careful to avoid using named elements with values that are predefined on the <code>window</code> already.</p>

<p>For example you cannot refer to a <code>&lt;input id="location"&gt;</code> by <code>window.location</code> because that <a href="https://developer.mozilla.org/en/DOM/window.location">already resolves to an object</a> with information about the URL of the current document.</p>

<p>There are a number of other property names on the <code>window</code> object that you could easily see being used to name a DOM element - <code>event</code>, <code>history</code>, <code>name</code>, <code>self</code>, <code>status</code>, and <code>toolbar</code> to name a few.</p>

<h4>Browsers have inconsistent implementations.</h4>

<p>Even though this is behavior is now standardized, there are still browser quirks in the way named access is implemented.</p>

<h5>IE and Form Elements</h5>

<p>IE will (incorrectly) make the <code>name</code> attribute of form elements available on the <code>window</code> object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;form&gt;</span>
</span><span class='line'>            <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;foo&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>            <span class="c1">//Logs a reference to the &lt;input&gt; in IE.</span>
</span><span class='line'>            <span class="c1">//Syntax error in all other rendering engines.</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Name Attribute on Anchor Tags</h5>

<p>Per the spec, <code>&lt;a&gt;</code> tags should be accessible on the <code>window</code> object via the value of their <code>name</code> attribute.  However, this only works in IE and Opera.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">name=</span><span class="s">&quot;foo&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>            <span class="c1">//Logs a reference to the &lt;a&gt; in IE and Opera.</span>
</span><span class='line'>            <span class="c1">//Syntax error in Gecko and WebKit.</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Multiple Named Attributes with the Same Value</h5>

<p>Per this portion of the spec:</p>

<blockquote><p>&#8230;if elements has only one element, return that element and abort these steps.</p><p>Otherwise return an HTMLCollection rooted at the Document node, whose filter matches only named elements with the name name.</p><footer><strong>HTML Specification</strong> <cite><a href='http://dev.w3.org/html5/spec/single-page.html#dom-window-nameditem'>dev.w3.org/html5/spec/&hellip;</a></cite></footer></blockquote>


<p>What this is staying is that when there are multiple named properties with the same name, the browser should return an array when that property is referenced (instead of a reference to a specific DOM node).  As an example given this markup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;one&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;one&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">one</span><span class="p">);</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8230;an array with references to the two <code>&lt;input&gt;</code> nodes should be logged per the spec.  And it will be in all browsers except Firefox.  Firefox 14 will simply log the first element.</p>

<p>Having two elements with the same <code>id</code> is invalid HTML, but the browser will still render it just fine.  Even with the best of intentions these sorts of things do happen, especially in larger, dynamic applications.</p>

<h3>More?</h3>

<p>These are simply the bugs that I&#8217;ve ran into, I&#8217;m sure there are more.  If you know of any let me know in the comments and I can update this list.</p>

<h3>But won&#8217;t strict mode prevent this?</h3>

<p><a href="https://developer.mozilla.org/en/JavaScript/Strict_mode">ECMAScript 5 strict mode</a> prevents you assigning values to variables before they are declared.  Therefore this&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<p>will execute just fine whereas this&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8230;will produce a syntax error that <code>foo</code> is not defined.  This is great, but it will not stop you from accessing named properties on the <code>window</code> object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;foo&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will log a reference to the <code>&lt;div&gt;</code> in standards mode in the latest version of all modern browsers.  Strict mode will only prevent you from assigning values to variables that have yet to be declared.  If you&#8217;re simply using a variable then strict mode doesn&#8217;t protect you.  Therefore, you&#8217;re not prevented from accessing name properties on the global <code>window</code> object.</p>

<h3>What to do instead</h3>

<p>Use <code>document.getElementById</code> to retrieve references to DOM nodes via their <code>id</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;foo&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get a reference to a DOM node via its <code>name</code> attribute you can use <code>document.querySelectorAll</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">name=</span><span class="s">&quot;bar&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;[name=bar]&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>document.querySelectorAll</code> is not safe to use in IE &lt;= 8, so if you need to support older IE look into using a toolkit such as <a href="http://jquery.com">jQuery</a> to select the DOM nodes that you need.</p>

<h3>Conclusion</h3>

<p>All major browsers now make named properties available on the global <code>window</code> object in standards mode.  It&#8217;s important to know that browsers do this because you&#8217;ll likely run into this at some point.  However, never purposely utilize this functionality.  If you see others use it tell them to stop, ridicule them, do whatever it takes.  Help <a href="http://movethewebforward.org/">move the web forward</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Native HTML5 Number Picker and jQuery UI's Spinner - Which to Use?]]></title>
    <link href="http://tjvantoll.com/2012/07/15/native-html5-number-picker-vs-jquery-uis-spinner-which-to-use/"/>
    <updated>2012-07-15T21:07:00-04:00</updated>
    <id>http://tjvantoll.com/2012/07/15/native-html5-number-picker-vs-jquery-uis-spinner-which-to-use</id>
    <content type="html"><![CDATA[<p><a href="http://www.w3.org/TR/html5/number-state.html#number-state">HTML5&#8217;s native number picker</a> (<code>&lt;input[type=number]</code>) and jQuery UI 1.9&#8217;s spinner can both be used to create inputs for numeric data.  So which makes sense for your application?  Let&#8217;s start with a brief explanation of each.</p>

<h3><code>input[type=number]</code></h3>

<p>HTML5 adds several new valid <code>type</code> attributes for <code>&lt;input&gt;</code> elements.  One of them, <code>number</code>, can be used to create a number picker.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;number&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will present the user with a number picker in supported browsers, which, as of this writing includes Chrome, Safari, Opera, iOS, Opera Mobile, and Android 4.0+ (<a href="http://caniuse.com/#feat=input-number">full support list</a>).  Here&#8217;s what the user will see in supported browsers:</p>

<!--more-->


<h5>Chrome 20:</h5>

<p><img src="http://tjvantoll.com/images/posts/2012-07-15/Chrome.png" title="Chrome" alt="Chrome" /></p>

<h5>Safari 5.1.7:</h5>

<p><img src="http://tjvantoll.com/images/posts/2012-07-15/Safari.png" title="Safari" alt="Safari" /></p>

<h5>Opera 12.00:</h5>

<p><img src="http://tjvantoll.com/images/posts/2012-07-15/Opera.png" title="Opera" alt="Opera" /></p>

<h5>Opera Mobile 12:</h5>

<p><img alt="Opera Mobile" title="Opera Mobile" src="http://tjvantoll.com/images/posts/2012-07-15/Opera_Mobile.png" style="height: 250px;" /></p>

<h5>iOS 5:</h5>

<p><img alt="iOS" title="iOS" src="http://tjvantoll.com/images/posts/2012-07-15/iOS.png" style="height: 200px;" /></p>

<h5>Android 4.1 (Jelly Bean):</h5>

<p><img alt="Android" title="Android" src="http://tjvantoll.com/images/posts/2012-07-15/Android.png" style="height: 200px;" /></p>

<p>As you can see one of the nicest effects of using <code>[type=number]</code> is that mobile users will automatically be presented with a number pad to aid with entry of numeric data.  Unsupported browsers will simply treat the <code>input[type=number]</code> as a normal text input.  Firefox has <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=344616">recently added a UI-less version</a> of <code>input[type=number]</code> to their nightly builds so hopefully a fully enabled version will be coming soon.</p>

<p>You can see what your browser does below:</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/XMEEz/1/embedded/result,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h4>Additional Functionality</h4>

<p>The native number picker supports <code>min</code>, <code>max</code>, and <code>step</code> attributes to allow you to pick the minimum value of the <code>&lt;input&gt;</code>, the maximum value of the <code>&lt;input&gt;</code>, and the amount the value should be incremented / decremented when the user spins through values (the <code>step</code> attribute defaults to <code>1</code> if not specified).</p>

<p>For example, on the <code>&lt;input&gt;</code> below the browser will enforce that the minimum value will be <code>2</code>, the maximum value will be <code>20</code>, and the user will step at increments of <code>2</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;number&quot;</span> <span class="na">min=</span><span class="s">&quot;2&quot;</span> <span class="na">max=</span><span class="s">&quot;20&quot;</span> <span class="na">step=</span><span class="s">&quot;2&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see how this behaves in your browser below:</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/YmQFS/embedded/result,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Just as a word of warning, Android 4.1 and iOS 5 do not support the <code>min</code>, <code>max</code>, or <code>step</code> attributes.</p>

<h4>Methods</h4>

<p>In addition to the new attributes, supporting browsers also provide 3  JavaScript methods specifically for <code>input[type=number]</code>.</p>

<ul>
<li><code>stepUp(n)</code> - Increment the <code>value</code> of the <code>&lt;input&gt;</code> by <code>n</code>.</li>
<li><code>stepDown(n)</code> - Decrement the <code>value</code> of the <code>&lt;input&gt;</code> by <code>n</code>.</li>
<li><code>valueAsNumber</code> - Retrieve the <code>value</code> of the <code>input</code> as a JavaScript <code>number</code> variable (by default retrieving the <code>value</code> of an <code>&lt;input&gt;</code> returns a <code>string</code>).</li>
</ul>


<h3>jQuery UI Spinner</h3>

<p>jQuery UI&#8217;s <code>spinner</code> is a new plugin due for jQuery UI&#8217;s 1.9 release (currently in beta).  The plugin by default looks and behaves much like the native number picker.</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/scXYB/1/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>It also supports setting minimum, maximum, and step values through options rather than attributes.</p>

<figure class='code'><figcaption><span>jQuery UI Spinner</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;spinner&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#spinner&#39;</span><span class="p">).</span><span class="nx">spinner</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">min</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">max</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">step</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example:</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/N7UXT/2/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3>Above and Beyond</h3>

<p>What really sets jQuery UI&#8217;s <code>spinner</code> apart from the native picker is that it is extensible, customizable, and it brings a number of extra features.  Here are some of the additional things that you can do.</p>

<h4>Paging</h4>

<p><code>spinner</code> takes a <code>page</code> option that allows you to define how much the <code>spinner</code> should step when the page down / page up keys are pressed.  The example below shows a <code>spinner</code> with a <code>step</code> value of <code>1</code> and a <code>page</code> value of <code>10</code>.</p>

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/tj_vantoll/EvTeQ/1/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h4>Mousewheel</h4>

<p>If you want mousewheel support for a <code>spinner</code> all you need to do is include <a href="https://github.com/brandonaaron/jquery-mousewheel">Brandon Aaron&#8217;s mousewheel plugin</a> and you get it automatically!  Try it out on any of the <code>spinner</code> demos on this page.</p>

<h4>Currency</h4>

<p>Ever need to accept currency at certain defined increments?  This example shows a <code>spinner</code> that spins through currency values at $25 increments, all with the same clean API.</p>

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/tj_vantoll/2wEe6/3/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>The formatting is localized through <a href="https://github.com/jquery/globalize/">Globalize.js</a>, therefore, if you want to handle different currencies all you need to do is pass in the appropriate <code>culture</code> and include the necessary JavaScript dependencies.  Here&#8217;s an example of an input that takes Euros.</p>

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/tj_vantoll/ppH7g/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h4>Time</h4>

<p>If you need to accept time data <code>spinner</code> can be used for that as well.</p>

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/tj_vantoll/2wEe6/5/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>The <code>page</code> option discussed earlier is used nicely here to make the up / down keys control the minutes and the page up / page down keys to controls hours.  Try it out on the example above.</p>

<h3>24 Hour Times</h3>

<p>Since the <code>spinner</code> uses Globalize.js, you&#8217;re free to use a time system different than the United States&#8217; nonsensical one.</p>

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/tj_vantoll/Kenve/2/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3>Time Picker vs. <code>&lt;input type="time"&gt;</code></h3>

<p>HTML5 also provides a native time picker (<code>input[type=time]</code>), but, it has <a href="http://caniuse.com/#feat=input-datetime">nearly no support</a>, does not yet provide localized formatting, and does not provide the stepping/paging functionality that <code>spinner</code> has baked in.  In the future it might provide a viable native solution, but for now it&#8217;s best to stay away.</p>

<h4>Extensible and Customizable</h4>

<p>Because <code>spinner</code> is built on top of <a href="http://ajpiano.com/widgetfactory">jQuery UI&#8217;s widget factory</a>, it is easily extensible.  For example, let&#8217;s say you need to build an input that accepts a year in which the modern summer olympics were held.  You could do that with the following:</p>

<figure class='code'><figcaption><span>Extending spinner</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">input</span> <span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">widget</span><span class="p">(</span> <span class="s2">&quot;tj.olympicspicker&quot;</span><span class="p">,</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">spinner</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">min</span><span class="o">:</span> <span class="mi">1896</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">max</span><span class="o">:</span> <span class="mi">2012</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">step</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">olympicspicker</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/tj_vantoll/EsTYd/1/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Now all your olympics pickers in your code base can share the same code!</p>

<h3><code>&lt;input type="number"&gt;</code> vs. <code>spinner</code></h3>

<p>Although jQuery UI&#8217;s <code>spinner</code> is more advanced and customizable, for most simple applications the native number picker will work just fine.  If you simply need a field that accepts numeric data there&#8217;s no need to bring in <code>spinner</code> as a dependency.  However, if you do need the ability to fine tune the behavior and look of the picker, or if you need consistent UI across all browsers, jQuery UI&#8217;s <code>spinner</code> provides an excellent API to do so.</p>

<p>To summarize the reasons to use the native picker are:</p>

<ul>
<li>Easy to implement, simply give an <code>&lt;input&gt;</code> a <code>type</code> attribute of <code>number</code>.</li>
<li>There are no dependencies, the number picker is native to the browser.</li>
<li>Mobile browsers that support the native picker will optimize the touch keyboard for number input.</li>
</ul>


<p>And the reasons to use jQuery UI&#8217;s <code>spinner</code> are:</p>

<ul>
<li>Browser support - The <code>spinner</code> will work all the way back to IE6.</li>
<li>Extremely customizable and extensible.</li>
<li>Customizable handling of the page up and page down keys.</li>
<li>Easily integrated mousewheel support.</li>
<li>Built in custom types such as currency and time.</li>
<li>Built in i18n support.</li>
</ul>


<h3>Using jQuery UI&#8217;s Spinner to Polyfill <code>input[type=number]</code></h3>

<p>Another option is to use the native HTML number picker when it&#8217;s available, and fallback to jQuery UI&#8217;s <code>spinner</code> when it&#8217;s not.</p>

<figure class='code'><figcaption><span>Using jQuery UI to Polyfill input[type=number]</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">input</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;number&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;text&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[type=number]&#39;</span><span class="p">).</span><span class="nx">spinner</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code to detect <code>input[type=number]</code> support was taken from <a href="https://github.com/jonstipe/number-polyfill">another number picker polyfill by jonstipe</a>.  It creates an <code>&lt;input&gt;</code>, changes its <code>type</code> to <code>number</code>, and sees if that change actually took effect to determine whether the browser supports the type.  You could also use the <code>Modernizr.inputtypes.number</code> check from <a href="http://modernizr.com">Modernizr</a> to achieve the same thing.</p>

<p>The <code>spinner</code> plugin is smart enough to look for the <code>step</code>, <code>min</code>, and <code>max</code> attributes on the <code>&lt;input&gt;</code> so you don&#8217;t have to pass those in explictly (<a href="https://twitter.com/bassistance/status/225532234017406977">thanks @bassistance</a>).</p>

<p>The benefit of this technique is that you get the benefits of the native picker when it&#8217;s available, and you can count on having a number picker in all browsers.  As a further optimization you could even use a conditional script loader such as <a href="yepnopejs.com">yepnope.js</a> to bring in jQuery UI&#8217;s required JavaScript and CSS only when you need it.</p>

<h3>Using Spinner and Getting a Number Keyboard on Mobile</h3>

<p>If you want to use a <code>spinner</code> everywhere AND get a number keyboard on mobile things get a little trickier.  Mobile browsers look for an <code>&lt;input&gt;</code> to have <code>type=number</code> to provide the number keyboard.  So you think this would be as simple as creating a <code>spinner</code> on a <code>&lt;input[type=number]&gt;</code> node.  However, that produces the following on supporting desktop browsers.</p>

<h5>Chrome 20:</h5>

<p><img src="http://tjvantoll.com/images/posts/2012-07-15/Chrome-Dual.png" title="Chrome" alt="Chrome" /></p>

<h5>Safari 5.1.7:</h5>

<p><img src="http://tjvantoll.com/images/posts/2012-07-15/Safari-Dual.png" title="Safari" alt="Safari" /></p>

<h5>Opera 12.00:</h5>

<p><img src="http://tjvantoll.com/images/posts/2012-07-15/Opera-Dual.png" title="Opera" alt="Opera" /></p>

<p>Obviously the double arrow UI is less than ideal.  So to work around this you simply need to hide or destroy one of the sets or controls&#8230; right?</p>

<p>Well it turns out hiding the native arrow controls is difficult because Chrome places the control on the inside of the <code>&lt;input&gt;</code> and Safari and Opera place it on the outside.  Therefore, if you try to adjust the <code>margin</code> of the <code>&lt;input&gt;</code> so jQuery UI&#8217;s controls overlap the native ones it won&#8217;t work in a cross browser friendly way.</p>

<p>Therefore the best approach I&#8217;ve came up with is to hide the <code>spinner</code>&#8217;s arrow controls when the browser creates its own.</p>

<figure class='code'><figcaption><span>Number keyboard for a spinner</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[type=number]&#39;</span><span class="p">).</span><span class="nx">spinner</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">Modernizr</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.ui-spinner-button&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.ui-spinner-input&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;marginRight&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this does is detect whether the browser supports the <code>step</code> attribute, if it does it removes jQuery UI&#8217;s controls.  What does the <code>step</code> attribute have to do with the arrow controls?  Nothing, except that it just <em>happens</em> that the browsers that support the <code>step</code> attribute also create a native control to do the stepping.  Is this going to change in the future?  Quite possibly.</p>

<p>So obviously this is not ideal, and probably shouldn&#8217;t be used in production code, but it works at the moment.  Have a better approach for tackling this problem?  Let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Default Browser Handling of the CSS text-transform Property]]></title>
    <link href="http://tjvantoll.com/2012/07/10/default-browser-handling-of-the-css-text-transform-property/"/>
    <updated>2012-07-10T21:05:00-04:00</updated>
    <id>http://tjvantoll.com/2012/07/10/default-browser-handling-of-the-css-text-transform-property</id>
    <content type="html"><![CDATA[<p>The <code>text-transform</code> CSS property is most frequently used to uppercase and lowercase text.  According to the <a href="http://www.w3.org/TR/CSS21/text.html#caps-prop">CSS 2.1 specification</a> it is also an inherited property, meaning, when no value is specified on a given element, it should inherit its parent&#8217;s <code>text-transform</code> value.</p>

<p>If no parents have a <code>text-transform</code> property defined, the element will take on the default value of <code>none</code>.</p>

<p>Where it gets interesting is that all browsers define default <code>text-transform</code> properties for certain form elements.  What does this mean?  <!--more-->Let&#8217;s say you have the following markup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;style&gt;</span>
</span><span class='line'>    <span class="nt">div</span> <span class="p">{</span> <span class="k">text-transform</span><span class="o">:</span> <span class="k">uppercase</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;foo&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;bar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both <code>foo</code> and <code>bar</code> will appear lowercased in all major browsers.  You can see this for yourself below:</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/DxANv/1/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This happens because all browser vendors include <code>text-transform: none</code> in their user agent stylesheet for those elements.  Therefore the <code>text-transform: uppercase</code> rule declared on the parent node is not inherited.</p>

<p>Unfortunately, but not surprisingly, browsers are not consistent about their default values for all elements.</p>

<h3>What the Browsers Do</h3>

<p>The following chart shows popular browser rendering engines and whether their user agent stylesheet includes <code>text-transform: none</code> for the listed elements.</p>

<table>
    <thead>
        <tr>
            <th>Rendering Engine</th>
            <th>input[type=submit]</th>
            <th>input[type=text]</th>
            <th>select</th>
            <th>textarea</th>
            <th>button</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Trident (Internet Explorer)</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td><strong>No</strong></td>
        </tr>
        <tr>
            <td>Gecko (Firefox)</td>
            <td>Yes</td>
            <td>Yes</td>
            <td><strong>No</strong></td>
            <td>Yes</td>
            <td><strong>No</strong></td>
        </tr>
        <tr>
            <td>WebKit (Chrome, Safari, etc&#8230;)</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
        </tr>
        <tr>
            <td>Presto (Opera)</td>
            <td>Yes</td>
            <td>Yes</td>
            <td><strong>No</strong></td>
            <td>Yes</td>
            <td><strong>No</strong></td>
        </tr>
    </tbody>
</table>


<p>The rendering engines that have a <strong>No</strong> for a given element declare no default for <code>text-transform</code>.  Therefore, those elements will inherit the value from their parent.</p>

<h3>What Does This Mean?</h3>

<p>The browser differences occur on the <code>button</code> and <code>select</code> elements.  Therefore, if you apply a <code>text-transform</code> value to a node, AND that node has children <code>button</code> / <code>select</code> nodes, AND you do not apply a <code>text-transform</code> value to the <code>button</code> or <code>select</code> nodes themselves&#8230; you&#8217;ll get different behavior in different browsers.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;style&gt;</span>
</span><span class='line'>            <span class="nt">form</span> <span class="p">{</span> <span class="k">text-transform</span><span class="o">:</span> <span class="k">uppercase</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;form&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- &quot;foo&quot; will be uppercase in IE, Firefox, and Opera --&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- &quot;foo&quot; will be lowercase in WebKit based browsers --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;button&gt;</span>foo<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c">&lt;!-- &quot;bar&quot; will be uppercase in Firefox and Opera --&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- &quot;bar&quot; will be lowercase in IE and WebKit based browsers --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;select&gt;</span>
</span><span class='line'>                <span class="nt">&lt;option&gt;</span>bar<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/select&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Consistency</h3>

<p>You could make arguments as to whether the user agent stylesheets <em>should</em> be defaulting the <code>text-transform</code> of various form elements to <code>none</code>, but to most people all that matters is that the behavior is consistent.  It&#8217;s easy enough to override the defaults if you don&#8217;t like them.</p>

<p>Therefore to get consistent behavior you would <em>think</em> you would need to set the default value of <code>button</code> and <code>select</code> elements to either <code>none</code> or <code>inherit</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* Option 1 - Don&#39;t inherit values in all browsers */</span>
</span><span class='line'><span class="nt">button</span><span class="o">,</span> <span class="nt">select</span> <span class="p">{</span> <span class="k">text-transform</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* Option 2 - Inherit values in all browsers */</span>
</span><span class='line'><span class="nt">button</span><span class="o">,</span> <span class="nt">select</span> <span class="p">{</span> <span class="k">text-transform</span><span class="o">:</span> <span class="k">inherit</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But unfortunately for whatever reason Option 2 doesn&#8217;t work on the <code>&lt;select&gt;</code> in IE &lt;= 7, Safari, and most interestingly, doesn&#8217;t take effect in Chrome until you click on <code>&lt;select&gt;</code>.  You can verify this behavior for yourself below:</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/dUjXB/10/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Fortunately Option 1 does indeed produce the same behavior in IE6+, Firefox, Chrome, Safari, and Opera.  Therefore to normalize <code>text-transform</code> you need to include the following in your stylesheet.</p>

<figure class='code'><figcaption><span>Cross Browser text-transform Goodness</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">button</span><span class="o">,</span> <span class="nt">select</span> <span class="p">{</span> <span class="k">text-transform</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ideal LESS Workflow with git]]></title>
    <link href="http://tjvantoll.com/2012/07/07/the-ideal-less-workflow-with-git/"/>
    <updated>2012-07-07T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/07/07/the-ideal-less-workflow-with-git</id>
    <content type="html"><![CDATA[<p>LESS is a CSS pre-processor written in JavaScript.  Unlike its main competitor SASS, it has the ability to run both on the client side via a simple <code>&lt;script&gt;</code> tag, as well as server-side in Node.js.  The fact that LESS files can be processed client side is advantageous for a number of reasons:</p>

<h4><strong>There are no dependencies.</strong></h4>

<p>To develop LESS files all you need is your browser.  SASS requires Ruby to be running on your system to generate the CSS files.</p>

<p>While some would argue that this isn&#8217;t a big deal (Ruby is pre-installed on OS X for example), it can potentially put off beginners or those not familiar with the command line.  A lot of people that write CSS wear a designer hat more than a developer hat.  Even if <em>you</em> know what you&#8217;re doing, if you&#8217;re on a team with less technical people oftentimes the simplest approach will make everyone happy.</p>

<h4><strong>You can auto-reload changes to less files without reloading the browser and without external dependencies.</strong></h4>

<p>With LESS you can easily watch for changes by appending <code>#!watch</code> to the URL or by running <code>less.watch()</code> from the console.  There&#8217;s no additional setup and no need to reload your browser, changes take effect automatically.</p>

<p>If you want files to be regenerated using SASS you must tell SASS which files to watch via the command line or use an app that does that for you.  If you want CSS changes to happen without reloading your browser you need to enlist the help of an app / extension such as <a href="http://livereload.com">LiveReload</a>.  While this works fine this is yet another dependency.</p>

<!--more-->


<h3>Production</h3>

<p>While the ease of use during development is great, you don&#8217;t want visitors to your site to incur the cost of processing the LESS files client side in a production setting.  The easy way to accomplish this is to manually run <code>lessc</code> from the command line to convert all LESS files into CSS files, and then updating all of your .less paths in <code>&lt;link&gt;</code> tags to use .css paths.</p>

<p>This works, but the lazy programmer in you will be looking to automate this after doing this more than once.  If you&#8217;re using Git for source control one way you can accomplish this is by running a commit hook to do the generation.</p>

<h3>Git Commit Hooks</h3>

<p><a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">Git commit hooks</a> allow you to run scripts whenever a commit occurs.  A <code>pre-commit</code> hook allows you to run a script that can also optionally prevent the commit from occurring.  The <code>pre-commit</code> hook works well for generating CSS files from LESS files for a few reasons.</p>

<ul>
<li>Once the script is in place you no longer have to manually generate CSS files, it&#8217;ll simply be done automatically when you commit changes to source control.</li>
<li>The script can be setup so that if <code>lessc</code> fails the commit will be rejected.  Therefore, LESS files with invalid syntax will be kept out of source control.</li>
</ul>


<p>To create a Git commit hook navigate into the <code>.git/hooks</code> directory of your repository.  This folder has a number of sample hooks that you can potentially use with a <code>.sample</code> suffix.  To create a <code>pre-commit</code> script that Git will run simply create an un-prefixed copy of <code>pre-commit.sample</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /MyProject/.git/hooks
</span><span class='line'>cp pre-commit.sample pre-commit
</span></code></pre></td></tr></table></div></figure>


<p>Once a <code>pre-commit</code> file exists in <code>.git/hooks</code>, Git will run it before every commit.</p>

<h3>The Script</h3>

<p>There are many ways to implement a script that generates CSS files from LESS files.  This is the <code>pre-commit</code> script that I use.</p>

<figure class='code'><figcaption><span>The script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Pre-commit hook to generate .css files from .less files using lessc.</span>
</span><span class='line'><span class="c"># Script assumes .less files are in a directory named &quot;less&quot; and will</span>
</span><span class='line'><span class="c"># put the generated files in a sibling &quot;css&quot; directory.  The generated</span>
</span><span class='line'><span class="c"># CSS will also be compressed as part of lessc.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># When .less files are deleted the script will delete the corresponding</span>
</span><span class='line'><span class="c"># .css files if they exist.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Example</span>
</span><span class='line'><span class="c"># -------</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Before:       After:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># foo/          foo/</span>
</span><span class='line'><span class="c">#   less/         css/</span>
</span><span class='line'><span class="c">#     a.less        a.css</span>
</span><span class='line'><span class="c"># bar/            less/</span>
</span><span class='line'><span class="c">#   less/           a.less</span>
</span><span class='line'><span class="c">#     b.less    bar/   </span>
</span><span class='line'><span class="c">#                 css/</span>
</span><span class='line'><span class="c">#                   b.css</span>
</span><span class='line'><span class="c">#                 less</span>
</span><span class='line'><span class="c">#                   b.less</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Loop over all files included in the commit.</span>
</span><span class='line'><span class="k">for </span>file in <span class="k">$(</span> <span class="nb">exec </span>git diff-index --cached --name-only HEAD <span class="k">)</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="c"># We only want to take action unless the file is a LESS file.</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[[</span> <span class="nv">$file</span> <span class="o">==</span> *<span class="s2">&quot;.less&quot;</span>* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'>
</span><span class='line'><span class="k">    </span><span class="nv">lessFile</span><span class="o">=</span><span class="nv">$file</span>
</span><span class='line'>
</span><span class='line'><span class="c">#   Find where the corresponding CSS file should be located</span>
</span><span class='line'><span class="c">#   in the file system, in this case a sibling CSS directory.</span>
</span><span class='line'>    <span class="nv">cssFile</span><span class="o">=</span><span class="s2">&quot;${lessFile/less\//css/}&quot;</span>
</span><span class='line'>    <span class="nv">cssFile</span><span class="o">=</span><span class="s2">&quot;${cssFile/.less/.css}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#   Determine the status of the file in the commit.</span>
</span><span class='line'><span class="c">#   M = Modified, A = Added, D = deleted, R = renamed,</span>
</span><span class='line'><span class="c">#   C = copied, U = Updated but unmerged</span>
</span><span class='line'>    <span class="nv">status</span><span class="o">=</span><span class="k">$(</span> <span class="nb">exec </span>git status --porcelain <span class="nv">$lessFile</span> <span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#   If the file was deleted as part of the commit, delete the</span>
</span><span class='line'><span class="c">#   corresponding CSS file.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$status</span> <span class="o">==</span> D* <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      if</span> <span class="o">[</span> -e <span class="s2">&quot;$cssFile&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;Removing $cssFile&quot;</span>
</span><span class='line'>        git rm <span class="nv">$cssFile</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">    else</span>
</span><span class='line'><span class="c">#     Otherwise we must generate the CSS file. First create a</span>
</span><span class='line'><span class="c">#     CSS folder to place the file in.  The -p option for mdkir</span>
</span><span class='line'><span class="c">#     tells it to create parent folders if necessary.</span>
</span><span class='line'>      <span class="nv">baseDirectory</span><span class="o">=</span><span class="k">${</span><span class="nv">lessFile</span><span class="p">/less\/*/</span><span class="k">}</span>
</span><span class='line'>      mkdir -p <span class="k">${</span><span class="nv">baseDirectory</span><span class="k">}</span>css
</span><span class='line'>
</span><span class='line'><span class="c">#     Log to the console that the CSS is being generated so the person</span>
</span><span class='line'><span class="c">#     running the commit is aware.</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;Generating $cssFile from $lessFile&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#     Run lessc to do the actual generation.  If lessc fails exit</span>
</span><span class='line'><span class="c">#     with a code of 1 so that the commit is rejected.  The -x option </span>
</span><span class='line'><span class="c">#     tells lessc to generate compressed CSS for production usage.</span>
</span><span class='line'>      <span class="k">if</span> ! lessc -x <span class="nv">$lessFile</span> <span class="nv">$cssFile</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">exit </span>1
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">#     Add the CSS file to the commit.</span>
</span><span class='line'>      git add <span class="nv">$cssFile</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">  fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could greatly simplify this script to simply run <code>lessc</code> on all .less files on every commit.  I go file by file because the script has to be run on a large code base where generating hundreds to thousands of CSS files on every commit isn&#8217;t practical.  This script is also setup to create sibling <code>css</code> and <code>less</code> directories.  You could easily modify this to simply put the files in the same directory; I like them to be logically separated.</p>

<h3>Automating <code>&lt;link&gt;</code> File Paths</h3>

<p>As I said, the script I use assumes that there are sibling <code>css</code> and <code>less</code> directories.  To give a concrete example of this say I have the following file system structure.</p>

<pre><code>/MyProject
    /css
        * Generated files *
    index.html
    /js
        less.js
    /less
        a.less
        b.less
</code></pre>

<p>To include these files I use the following locally:</p>

<figure class='code'><figcaption><span>Local Includes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- index.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet/less&quot;</span> <span class="na">href=</span><span class="s">&quot;less/a.less&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet/less&quot;</span> <span class="na">href=</span><span class="s">&quot;less/b.less&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/less.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the following in production:</p>

<figure class='code'><figcaption><span>Production Includes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- index.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/a.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/b.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The best way to handle both development and production with minimal maintenance is to use some sort of server-side check so that you don&#8217;t have to change your HTML whenever you release to production.  Here&#8217;s an example of a PHP script that does this by detecting whether the host contains <code>localhost</code>.</p>

<figure class='code'><figcaption><span>Making both imports work</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- index.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="cp">&lt;? if (strpos($_SERVER[&#39;HTTP_HOST&#39;], &#39;localhost&#39;)) { ?&gt;</span>
</span><span class='line'>            <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet/less&quot;</span> <span class="na">href=</span><span class="s">&quot;/less/a.less&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet/less&quot;</span> <span class="na">href=</span><span class="s">&quot;/less/b.less&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/less.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="err">&lt;</span> } else { ?&gt;
</span><span class='line'>            <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/a.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/b.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="cp">&lt;? } ?&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>Using LESS client side is awfully convenient, but it shouldn&#8217;t be done in a production setting.  If you use LESS a lot then this is something you&#8217;ll want to automate in your workflow.  In my opinion using a git <code>pre-commit</code> hook is a clean way to accomplish this.  Feel free to use my script or alter it to your liking.  If you have any other ways you automate your LESS workflow I&#8217;d love to hear about it.  Let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Native HTML 5 Datepicker with a Fallback to jQuery UI]]></title>
    <link href="http://tjvantoll.com/2012/06/30/creating-a-native-html5-datepicker-with-a-fallback-to-jquery-ui/"/>
    <updated>2012-06-30T17:06:00-04:00</updated>
    <id>http://tjvantoll.com/2012/06/30/creating-a-native-html5-datepicker-with-a-fallback-to-jquery-ui</id>
    <content type="html"><![CDATA[<p>The recently released Chrome 20 features support for native datepickers on <code>&lt;input&gt;</code> nodes with a <code>[type=date]</code> attribute.  The list of browsers that support native datepickers now includes Chrome, Opera 11+, Opera Mobile, and iOS 5+ (see <a href="http://caniuse.com/#feat=input-datetime">caniuse.com</a>).  Therefore, now is a great time to start using them in your web applications.</p>

<!--more-->


<h3>Using</h3>

<p>Using the native datepickers is easy, just change the <code>type</code> attribute of your date inputs from <code>text</code> to <code>date</code>.</p>

<figure class='code'><figcaption><span>Converting to a native HTML5 datepicker</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- Before --&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- After --&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;date&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is what the user will see in supported browsers:</p>

<h4>Chrome 20</h4>

<p><img src="http://tjvantoll.com/images/posts/2012-06-30/Chrome.png" title="Chrome 20" alt="Chrome 20" /></p>

<h4>Opera 12</h4>

<p><img src="http://tjvantoll.com/images/posts/2012-06-30/Opera.png" title="Opera 12" alt="Opera 12" /></p>

<h4>Opera Mobile</h4>

<p><img src="http://tjvantoll.com/images/posts/2012-06-30/Opera%20Mobile.png" title="Opera Mobile" alt="Opera Mobile" /></p>

<h4>iOS 5</h4>

<p><img src="http://tjvantoll.com/images/posts/2012-06-30/iOS5.png" title="iOS 5" alt="iOS 5" /></p>

<h3>Advantages</h3>

<p>Why would use the native solution?</p>

<p>First and foremost there are no dependencies.  There is no need to bring in a library or toolkit, it&#8217;s all native.  Therefore, you save some bytes by not having to ship the JavaScript / CSS to make the datepicker work.</p>

<p>Furthermore you can be guaranteed that it will work perfectly on all devices that support the native datepicker.  It&#8217;s not dependent on JavaScript so it&#8217;ll even work for users that have JavaScript disabled.</p>

<p>Another key advantage is that devices can give alternative means of input for date controls.  For example note the native date control in iOS 5:</p>

<p><img src="http://tjvantoll.com/images/posts/2012-06-30/iOS5.png" title="iOS 5" alt="iOS 5" /></p>

<p>It will be a lot easier for the user to input a date with those controls, plus you can be guaranteed that you&#8217;ll receive input in the correct format.</p>

<h3>Disadvantages</h3>

<p>The main disadvantage of using a native datepicker is that you have a lot less control.  There are no hooks to control the look of the date picker; you get what the browser wants to give you.  You also have a lot less control over the behavior.  Here&#8217;s a small sampling of things that jQuery UI&#8217;s datepicker can do that you cannot do with the native control.</p>

<ul>
<li>Only allow selection on certain days of the week.</li>
<li>Control the formatting of the headers in the control (Monday vs Mon vs M).</li>
<li>View multiple months at the same time.</li>
</ul>


<p>If any of this functionality is important to your application you&#8217;ll probably want to stick with the jQuery UI solution.</p>

<h3>Best of Both Worlds</h3>

<p><a href="http://modernizr.com">Modernizr</a> gives you the ability to detect whether the browser supports native datepickers.  The following shows how you can use the native datepicker when available, and fallback to jQuery UI&#8217;s datepicker in unsupported browsers.</p>

<figure class='code'><figcaption><span>Detect native support for datepickers and fallback to jQuery UI</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">Moderniz</span><span class="p">.</span><span class="nx">inputtypes</span><span class="p">.</span><span class="nx">date</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[type=date]&#39;</span><span class="p">).</span><span class="nx">datepicker</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see how your browser handles this situation here:</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/p58bt/2/embedded/result,html,js/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3>Conclusion</h3>

<p>With Chrome adding support for native datepickers a large chunk web users now have the ability to use native pickers.  Therefore, now is a great time to consider using them in your applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detecting Print Requests with JavaScript]]></title>
    <link href="http://tjvantoll.com/2012/06/15/detecting-print-requests-with-javascript/"/>
    <updated>2012-06-15T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/06/15/detecting-print-requests-with-javascript</id>
    <content type="html"><![CDATA[<p>CSS has a well supported mechanism for applying changes only when the user is printing a document, <a href="http://coding.smashingmagazine.com/2011/11/24/how-to-set-up-a-print-style-sheet/">print stylesheets</a>.  They allow you to alter the presentation of a web page for the printer by applying rules that will only be interpreted for printing.  This is great for common tasks like hiding non-essential content, using more print friendly typography, and adjusting the layout to better suit the size and shape of paper.</p>

<p>Print stylesheets are great for making presentational changes for printing, but sometimes you need the full power of JavaScript.  And in order to do respond to print requests in JavaScript you need the browser to notify you that a print request occurred.</p>

<!--more-->


<h3>onbeforeprint and onafterprint</h3>

<p>IE5+ fires <code>onbeforeprint</code> and <code>onafterprint</code> events before and after the user requests the page to be printed.</p>

<figure class='code'><figcaption><span>onbeforeprint and onaferprint</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">onbeforeprint</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;This will be called before the user prints.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">onafterprint</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;This will be called after the user prints&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>These events are not part of any specification but they are very convenient.  Because of this <a href="https://developer.mozilla.org/en/DOM/window.onbeforeprint#Browser_compatibility">Firefox added support for both events in version 6</a>.  However, WebKit and Opera do not support the events.  Therefore, for cross browser compatibility these events aren&#8217;t going to cut it.</p>

<h3>WebKit&#8217;s Solution</h3>

<p>WebKit has a bug (#<a href="https://bugs.webkit.org/show_bug.cgi?id=19937">19937</a>) out there to implement these events, but progress has stopped because the implementation of another API made this functionality possible already - <code>window.matchMedia</code>.</p>

<h3>window.matchMedia</h3>

<p>The <code>window.matchMedia</code> <a href="https://developer.mozilla.org/en/DOM/window.matchMedia">API</a> provides a means of determining whether the current <code>document</code> matches a given <a href="https://developer.mozilla.org/En/CSS/Media_queries">media query</a>.  For example:</p>

<figure class='code'><figcaption><span>window.matchMedia</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span><span class="s1">&#39; (min-width: 600px) &#39;</span><span class="p">).</span><span class="nx">matches</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The viewport is at least 600 pixels wide&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The viewport is less than 600 pixels wide&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use this API to add listeners that will be fired whenever the result of the media query changes.  In the above example the <code>matches</code> criteria will be met whenever the viewport is at least 600px wide.  If you wanted to receive notifications whenever the viewport crossed the 600px threshold you could use the following.</p>

<figure class='code'><figcaption><span>window.matchMedia with notifications</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mediaQueryList</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span><span class="s1">&#39; (min-width: 600px) &#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">mediaQueryList</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mql</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">mql</span><span class="p">.</span><span class="nx">matches</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The viewport is at least 600 pixels wide&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;The viewport is less than 600 pixels wide&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://caniuse.com/#feat=matchmedia">If your browser supports window.matchMedia</a> you can see this behavior live below by resizing your browser window under 600px and checking your browser&#8217;s JavaScript console.</p>

<iframe style="width: 100%; height: 200px;" src="http://jsfiddle.net/tj_vantoll/uYJxy/2/embedded/result,js,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Interestingly, it turns out you can also use this same technique to listen for the <code>print</code> media being applied when the user requests the document to be printed (<a href="http://code.google.com/p/chromium/issues/detail?id=105743">hat tip to Ben Wells</a>):</p>

<figure class='code'><figcaption><span>Using window.matchMedia to detecting print requests</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mediaQueryList</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span><span class="s1">&#39;print&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">mediaQueryList</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mql</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">mql</span><span class="p">.</span><span class="nx">matches</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;onbeforeprint equivalent&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;onafterprint equivalent&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works great in Chrome 9+ and Safari 5.1 (with the exception of the fact that the <a href="http://code.google.com/p/chromium/issues/detail?id=105743">listeners fire twice in Chrome</a>).  However, it doesn&#8217;t work in Firefox or IE10, even though they both support <code>window.matchMedia</code>.</p>

<h4>Update (July 16th, 2012)</h4>

<p>I created a bug on Firefox&#8217;s issue tracker for this defect - <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=774398">https://bugzilla.mozilla.org/show_bug.cgi?id=774398</a>.  I&#8217;ll update this post when I hear back.</p>

<h3>Combining the Approaches</h3>

<p>If you combine the two approaches you can detect print requests in IE 5+, Firefox 6+, Chrome 9+, and Safari 5.1+ (unfortunately Opera doesn&#8217;t support either approach).</p>

<figure class='code'><figcaption><span>Cross browser print request detection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">beforePrint</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Functionality to run before printing.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">afterPrint</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Functionality to run after printing&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">mediaQueryList</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span><span class="s1">&#39;print&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">mediaQueryList</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mql</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">mql</span><span class="p">.</span><span class="nx">matches</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">beforePrint</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">afterPrint</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">onbeforeprint</span> <span class="o">=</span> <span class="nx">beforePrint</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">onafterprint</span> <span class="o">=</span> <span class="nx">afterPrint</span><span class="p">;</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that your event handlers might potentially have to deal with the fact that they&#8217;re going to be called twice per print request in Chrome.</p>

<h3>Why Would I Use This?</h3>

<p>For most situations print stylesheets are all you need to prepare the document for printing.  But I can think of a couple practical uses of the JavaScript event.</p>

<h3>Responsive Print Images</h3>

<p>One use is substituting a higher quality image for the purposes of printing.  Traditionally <a href="http://www.cssnewbie.com/print-friendly-images/">web browsers have displayed images at 72dpi and most printers can handle 300dpi+</a>.  While some newer devices are able to display images at much higher resolutions, most users are still using a screen that will show web images at much lower resolutions than their printer can handle.</p>

<p>Therefore an image that might look just fine on the user&#8217;s screen might look fuzzy and grainy when printed out.  For most images this is acceptable, but it might be an issue for prominent images on regularly printed documents, like a company logo.  You probably want that to look crisp when printed out.</p>

<p>The <a href="http://www.alistapart.com/articles/hiresprinting">technique to work around this</a> involves loading both images, showing only the lower quality one by default, then hiding the low quality image and showing the high quality one in the print stylesheet.  The main downfall of this approach is that the end user has to download both images regardless of whether they&#8217;re going to print the page.  Users on 3G devices that have no intention or capability of printing the document will still have to download your high resolution logo.</p>

<p>With the ability to detect print requests in JavaScript you can substitute the higher quality image on the fly when the user requests the page to be printed.</p>

<figure class='code'><figcaption><span>Substituting higher quality images when printing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;low-quality.jpg&quot;</span> <span class="na">id=</span><span class="s">&quot;company_logo&quot;</span> <span class="na">alt=</span><span class="s">&quot;My Company&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">upgradeImage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;company_logo&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="s1">&#39;high-quality.png&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">mediaQueryList</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span><span class="s1">&#39;print&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">mediaQueryList</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">upgradeImage</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">window</span><span class="p">.</span><span class="nx">onbeforeprint</span> <span class="o">=</span> <span class="nx">upgradeImage</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The nice thing about this approach is that users that never print will not have to download the high quality image.  This technique also degrades nicely; users with browsers that don&#8217;t support the print events will simply print the lower quality image.</p>

<h3>Tracking Print Requests</h3>

<p>Print events can also be used to track the number of times users print pages within a site or application.  Because of the lack of total browser support you wouldn&#8217;t capture every print request, but this would be sufficient for getting a rough idea of how often people are printing.</p>

<figure class='code'><figcaption><span>Tracking Print Requests</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">afterPrint</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Here you would send an AJAX request to the server to track that a page</span>
</span><span class='line'>        <span class="c1">// has been printed.  You could additionally pass the URL if you wanted to</span>
</span><span class='line'>        <span class="c1">// track printing across an entire site or application.</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">mediaQueryList</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span><span class="s1">&#39;print&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">mediaQueryList</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mql</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">mql</span><span class="p">.</span><span class="nx">matches</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">afterPrint</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">onafterprint</span> <span class="o">=</span> <span class="nx">afterPrint</span><span class="p">;</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<h3>So can I use this in a &#8220;real&#8221; application?</h3>

<p>Sure, just make sure what you&#8217;re doing degrades nicely for users using a browser in which the event will not be fired.</p>

<p>Can you think of any other practical uses of detecting print requests in JavaScript?  If so let me know in the comments.</p>

<h4>Update (July 16th, 2012)</h4>

<p>Per the comments I&#8217;ve found that in addition to all the bugs mentioned above, certain browsers trigger the after print event early (with either <code>onafterprint</code> or the <code>window.matchMedia</code> handler implementation).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">beforePrint</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;printImage&#39;</span><span class="p">).</span><span class="nx">src</span> <span class="o">=</span>
</span><span class='line'>                    <span class="s1">&#39;http://stackoverflow.com/favicon.ico&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">afterPrint</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;printImage&#39;</span><span class="p">).</span><span class="nx">src</span> <span class="o">=</span>
</span><span class='line'>                    <span class="s1">&#39;http://google.com/favicon.ico&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">mediaQueryList</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span><span class="s1">&#39;print&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">mediaQueryList</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">mql</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">mql</span><span class="p">.</span><span class="nx">matches</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">beforePrint</span><span class="p">();</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">afterPrint</span><span class="p">();</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">window</span><span class="p">.</span><span class="nx">onbeforeprint</span> <span class="o">=</span> <span class="nx">beforePrint</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">window</span><span class="p">.</span><span class="nx">onafterprint</span> <span class="o">=</span> <span class="nx">afterPrint</span><span class="p">;</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;img</span> <span class="na">id=</span><span class="s">&quot;printImage&quot;</span> <span class="na">src=</span><span class="s">&quot;http://google.com/favicon.ico&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When printing the above document you would expect Stack Overflow&#8217;s favicon to print, when in actuality Google&#8217;s favicon prints.  Both events fire, but the after print event fires before the printing actually occurs, which in this case reverts the changes made in the before print event.</p>

<p>I was able to recreate this problem in Chrome and Firefox.</p>

<p>Therefore do not do anything that relies on the after print event to fix what the before print event did.  For responsive print images this shouldn&#8217;t be an issue because there should be no harm leaving the higher quality image in place; the user has already downloaded it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browser CSS Parsing Discrepancies]]></title>
    <link href="http://tjvantoll.com/2012/06/10/browser-css-parsing-discrepancies/"/>
    <updated>2012-06-10T22:24:00-04:00</updated>
    <id>http://tjvantoll.com/2012/06/10/browser-css-parsing-discrepancies</id>
    <content type="html"><![CDATA[<p>Possibly the most frustrating thing that can happen during web development is when things look or behave differently in different browsers for no apparent reason.</p>

<p>One of the major features of HTML5 is a <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html">parsing algorithm</a> that specifies not only how to handle well formed markup, but also what to do with invalid HTML.</p>

<p>The <a href="http://www.w3.org/TR/CSS2/syndata.html#parsing-errors">CSS specification</a> actually does the same.  In fact, it goes into explicit detail for how to handle a wide variety of nonsense syntax that it might encounter.  For example&#8230;</p>

<!--more-->


<p><strong>Declarations with unkown properties should be ignored.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">h1</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="n">foo</span><span class="o">:</span> <span class="n">bar</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* foo is an unkown property so the browser should interpret this as... */</span>
</span><span class='line'><span class="nt">h1</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Illegal values should be ignored.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">h1</span> <span class="p">{</span> <span class="k">float</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* foo is an invalid value for the float property and should be ignored */</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are just a sampling of what is specified.  The above rules are well documented and consistenly followed by all browsers.  Unfortunately that is not the case as we get into more complicated scenarios.</p>

<h3>Malformed Strings in CSS</h3>

<p>Take a guess, what <em>should</em> happen with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-number=</span><span class="s">&quot;one&quot;</span><span class="nt">&gt;</span>one<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-number=</span><span class="s">&quot;two&quot;</span><span class="nt">&gt;</span>two<span class="nt">&lt;/div&gt;</span>â€‹
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;style&gt;</span>
</span><span class='line'>  <span class="nt">div</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="nb">black</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="c">/*Notice the missing double quote after the URL.*/</span>
</span><span class='line'>  <span class="o">[</span><span class="nt">data-number</span><span class="o">=</span><span class="s1">&#39;one&#39;</span><span class="o">]</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="sx">url(&quot;some-url)</span><span class="p">;</span> <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="nt">data-number</span><span class="o">=</span><span class="s1">&#39;two&#39;</span><span class="o">]</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="nt">div</span> <span class="p">{</span> <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span> <span class="p">}</span><span class="err">â€‹</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The relevant portion of the specification states that&#8230;</p>

<blockquote><p>User agents must close strings upon reaching the end of a line (i.e., before an unescaped line feed, carriage return or form feed character), but then drop the construct (declaration or rule) in which the string was found.</p><footer><strong>CSS Specification</strong> <cite><a href='http://www.w3.org/TR/CSS2/syndata.html#parsing-errors'>www.w3.org/TR/CSS2/&hellip;</a></cite></footer></blockquote>


<p>Let&#8217;s take this one rule at a time.</p>

<pre><code>background: url("some-url);
</code></pre>

<p>Per the spec you would expect the <code>background</code> to be ignored because of the malformed string, and it is in all browsers I tested.</p>

<pre><code>color: red;
</code></pre>

<p>This is kind of in a gray area.  The spec says that the <em>construct in which the unclosed string was found</em> should be dropped, which makes it seem like this rule shouldn&#8217;t be interpreted.   But what about subsequent rules that were encountered before a new line?  It seems like the browser could be smart enough to apply this rule.</p>

<pre><code>color: blue;
</code></pre>

<p>Per the spec you would expect this to be interpreted since a new line character occurred between the unclosed quote and this rule.</p>

<pre><code>border: 2px solid black;
</code></pre>

<p>Along the same lines you would also expect a border to be around both divs since by then normal parsing of the stylesheet should resume.</p>

<p>Here&#8217;s what a sampling of browsers actually do.</p>

<table>
    <thead>
        <tr>
            <th>Browser</th>
            <th>Div one color</th>
            <th>Div two color</th>
            <th>Border around the divs</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Chrome 19</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr>
        <tr>
            <td>Safari 5.1.7</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr>        
        <tr>
            <td>Firefox 12</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>        
        <tr>
            <td>Opera 11.62</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Opera Mobile</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr> 
        <tr>
            <td>iOS 5</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr> 
        <tr>
            <td>Android 2+</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr> 
        <tr>
            <td>Internet Explorer 7</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Internet Explorer 8</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Internet Explorer 9</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Internet Explorer 10</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>        
    </tbody>
</table>


<p>You can see what your browser does here.</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/PHKLz/3/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3>Results</h3>

<p>WebKit based browsers are evaluating all rules after a semicolon is encountered and all other browsers stop in their tracks and don&#8217;t evaluate any other rules.  The same results occur with some other common fat finger situations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* Notice the mix of single and double quote in the url property value. */</span>
</span><span class='line'><span class="o">[</span><span class="nt">data-number</span><span class="o">=</span><span class="s1">&#39;one&#39;</span><span class="o">]</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="sx">url(&quot;some_url&#39;)</span><span class="p">;</span> <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span><span class="nt">data-number</span><span class="o">=</span><span class="s1">&#39;two&#39;</span><span class="o">]</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="c">/* In WebKit browsers the color: blue; will be evaluated, in others it will not be. */</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* Same thing if there&#39;s an malfored selector (notice the missing single quote in the selector. */</span>
</span><span class='line'><span class="o">[</span><span class="nt">data-number</span><span class="o">=</span><span class="nt">one</span><span class="s1">&#39;] { color: red; }</span>
</span><span class='line'><span class="s1">[data-number=&#39;</span><span class="nt">two</span><span class="err">&#39;</span><span class="o">]</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="c">/* Again in Webkit color: blue; will be evaluated, in others it will not be. */</span>
</span></code></pre></td></tr></table></div></figure>


<h3>What Could Possibly Go Wrong?</h3>

<p>Frankly, since this is an error situtation I don&#8217;t think many developers would care what the browser does with this.  If the rules aren&#8217;t evaluated it becomes pretty clear there&#8217;s an issue and it becomes pretty easy to find and clean up the issue.  What is important to developers is that the results are consistent.  The danger here is if you make a quick fix to a CSS file, fat finger some quotes, and only test in WebKit, you could catastrophically break your styling in non-WebKit browsers.</p>

<h3>Avoiding Issues</h3>

<p>The obvious way to avoid running into issues is to test your code in all browsers.  However, with the number of browsers and devices there are to test on that&#8217;s not always feasible, especially for trivial changes.</p>

<p>Modern editors with syntax highlighting can help you find malformed strings by creating an obvious syntax highlighting problem.  If yours doesn&#8217;t you might want to consider switching to one that does.</p>

<p>Furthermore, tools like <a href="http://csslint.net/">CSS Lint</a> can help detect issues <a href="https://github.com/stubbornella/csslint/wiki/IDE-integration">via your editor / IDE</a> or at build time by <a href="https://github.com/stubbornella/csslint/wiki/Command-line-interface">incorporating them into a Node.js or Ant build process</a>.</p>

<h3>Conclusion</h3>

<p>While the CSS specification tries to standarize what to do with invalid CSS browsers still handle some situations differently.  Make sure your editor or build process can help detect silly typos, and attempt to test your code in a variety of browsers, even for trivial changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[window.showModalDialog: What It is and Why You Should Never Use It]]></title>
    <link href="http://tjvantoll.com/2012/05/02/showmodaldialog-what-it-is-and-why-you-should-never-use-it/"/>
    <updated>2012-05-02T22:37:00-04:00</updated>
    <id>http://tjvantoll.com/2012/05/02/showmodaldialog-what-it-is-and-why-you-should-never-use-it</id>
    <content type="html"><![CDATA[<p>Ah, 1997.  The first browser war was in full force, and Microsoft was busy adding proprietary new features to compete with Netscape Navigator.  One of those features was introducing a common OS UI element into the browser - modal dialogs.  Internet Explorer 4 launched with a <code>showModalDialog</code> method on the global <code>window</code> object.  When called it displays a dialog that the user has to deal with before interacting with the rest of the page.</p>

<p>Fast forward a few years and Internet Explorer had won the war, 95+ percent of us were using IE6.  Consequently a whole lot of web applications were designed around many of the proprietary features that IE had added.  Interestingly several of these have recently been added to the HTML5 specification including <a href="http://www.w3.org/TR/html5/embedded-content-0.html#dom-innerhtml">innerHTML</a>, <a href="http://html5.org/specs/dom-parsing.html#insertadjacenthtml%28%29">insertAdjacentHTML</a>, <a href="http://html5.org/specs/dom-parsing.html#outerhtml">outerHTML</a>, andâ€¦ <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dialogs-implemented-using-separate-documents">window.showModalDialog</a>.</p>

<p>So now that <code>window.showModalDialog</code> has been standardized should you be using it?</p>

<p><strong>No.</strong></p>

<p>In general the idea of putting a native dialog implementation into the browser was a really good idea, but  <code>window.showModalDialog</code> was a bad implementation that is riddled with issues and poor browser support.<!--more--></p>

<h3>Modal Dialogs</h3>

<p>So why did Microsoft add modal dialogs to begin with?  They&#8217;re actually a heavily used UI element in most all computer interfaces.  Try to shut off your phone, tablet, laptop, etc.. and you&#8217;re almost certainly going to be presented with a modal dialog asking you to confirm your decision before being allowed to shut it down.  What makes it modal is the fact that you are forced to make a selection before you do anything else.</p>

<p>It&#8217;s oftentimes convenient from a usability stand point to get some form of feedback from a user before allowing them to continue.  <code>showModalDialog</code> was simply Microsoft&#8217;s attempt to bring this UI element to the web.</p>

<h3>Implementation</h3>

<p>To use the <code>showModalDialog</code> method you simply call it with a URL.</p>

<figure class='code'><figcaption><span>window.showModalDialog Basic Usage</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">showModalDialog</span><span class="p">(</span><span class="s1">&#39;http://google.com&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will open up a modal dialog with Google loaded in it.  In and of itself this isn&#8217;t all that useful.  Usually if you&#8217;re showing a modal dialog you want to get some information back from it.  This is where the window.returnValue comes into play.</p>

<h4>window.returnValue</h4>

<figure class='code'><figcaption><span>window.returnValue Example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- page.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">showModalDialog</span><span class="p">(</span><span class="s1">&#39;modal.html&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">//&#39;foo&#39;</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- modal.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">returnValue</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example when page.html is loaded it will immediately open up a modal dialog with modal.html loaded in it.  It will then block until the modal dialog returns control.  The JavaScript interpreter will literally pause execution as if you had a breakpoint set at that line of code and wait for the result of the modal dialog.</p>

<p>When modal.html loads it will assign a value of &#8216;foo&#8217; to <code>window.returnValue</code> and close itself via <code>window.close()</code>.  The opening window (page.html) will get control back, resume execution, and log the return value of &#8216;foo&#8217;.</p>

<h4>window.dialogArguments</h4>

<p>If you want to pass information to the modal dialog you can do so via the second parameter of <code>window.showModalDialog</code>.  Those values will be available in the modal dialog&#8217;s <code>window.dialogArguments</code> property.</p>

<figure class='code'><figcaption><span>window.returnValue Example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- page.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">showModalDialog</span><span class="p">(</span><span class="s1">&#39;modal.html&#39;</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- modal.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">dialogArguments</span><span class="p">);</span> <span class="c1">//&#39;foo&#39;</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Further Options</h4>

<p>A third parameter to <code>window.showModalDialog</code> is available to customize the look and behavior of the modal dialog.  The <a href="https://developer.mozilla.org/en/DOM/window.showModalDialog">MDN article on showModalDialog</a> has these well documented.</p>

<h3>Modal Dialog == A Brand New Window</h3>

<p>Note that in all these examples modal.html is a full HTML document, not a snippet that is injected in.  This is a characterizing feature of <code>window.showModalDialog</code>.  It&#8217;s really just two completely separate windows communicating with each other.  The fact that you have two separate windows and DOMs means you don&#8217;t have to worry about JS &amp; DOM conflicts, which is appealing if you have a lot of bad JavaScript with a cluttered global scope.  But mostly this just adds unnecessary complexity, complicates the browser implementation, and contributes to a number of bugs (see below).</p>

<blockquote><p>&#8220;You should only use one browser window ever, as a Web app author.&#8221;</p><footer><strong>Ian Hickson (HTML 5 spec maintainer)</strong> <cite><a href='http://www.mail-archive.com/public-webapi@w3.org/msg03345.html'>www.mail-archive.com/&hellip;</a></cite></footer></blockquote>


<h3>Browser Support</h3>

<p>IE obviously supports this function and has since IE4, but what about the other browsers?  Firefox added support in version 3 and Safari added support in 5.1.  Opera doesn&#8217;t support it at all.</p>

<p>Chrome has supported it since an early version but has some serious bugs with its implementation.  Most importantly the window Chrome displays isn&#8217;t modal (see <a href="http://code.google.com/p/chromium/issues/detail?id=16045">Chromium bug #16045</a>), meaning, the user is able to interact with the original window before dealing with the modal dialog, which kind of defeats the whole purpose.  Another big one is that <code>window.returnValue</code> will be lost if any sort of redirect or form submission is done in the modal dialog (see <a href="http://code.google.com/p/chromium/issues/detail?id=42939">Chromium bug #42939</a>).</p>

<p>Despite these issues Chrome did do one thing right.  While it&#8217;s important that modal dialogs prevent the user from interacting with the originating window, there&#8217;s no reason the user shouldn&#8217;t be allowed to interact with other tabs or native browser controls (back/forward, favorites, address bar, etc). Chrome is the only browser that allows this - IE, Firefox, and Safari do not.  This is actually a big annoyance to the end user.  IE, Firefox, and Safari don&#8217;t even allow you to minimize or close the browser until you&#8217;ve dealt with the modal dialog.</p>

<h3>More Issues</h3>

<h4>Modal Dialog == Popup</h4>

<p>The biggest issue with modal dialogs is that Firefox, Chrome, and Safari all treat them as popups by default and block them.  A user has to explicitly allow the popup in order to see your modal dialog.  In my experience users usually get frustrated and leave at that point.</p>

<h4>Debugging</h4>

<p>The debugging experience for <code>window.showModalDialog</code> is horrible.  IE as recent as version 9 won&#8217;t let you open their dev tools up in the modal dialogâ€¦ at all.  Firefox, Chrome, and Safari will let you open FireBug / Web Inspector, but good luck debugging any script that happens when the dialog is opened.  You&#8217;re basically forced to alert like it&#8217;s 1999 to determine what&#8217;s going on.  Also just a word of warning, IE <strong>LOVES</strong> to cache modal dialogs.</p>

<h4>Mobile</h4>

<p>Currently no major mobile browsers support <code>window.showModalDialog</code>, so if you&#8217;re looking for any sort of tablet / mobile support you need to stay away.</p>

<h3>Why was this added to HTML5?</h3>

<p>So why have other browsers added support for this method and why was it added to the HTML5 spec?  It&#8217;s mostly because in the IE6 days 1.2 bajillion applications were written to be extremely dependent on <code>window.showModalDialog</code>.  I can say that I personally work at an enterprise that has its fair share of those applications, and you can see many comments demanding enterprise application support on the various Chrome bugs (see <a href="http://code.google.com/p/chromium/issues/detail?id=4202">#4202</a>, <a href="http://code.google.com/p/chromium/issues/detail?id=16045">#16045</a>, &amp; <a href="http://code.google.com/p/chromium/issues/detail?id=42939">#42939</a>).</p>

<p>Refactoring these applications is no small task, and browsers that want to win market share are catering to them to gain support.</p>

<blockquote><p>&#8220;At this point, browsers have to support it, there&#8217;s too much content out there that uses it.&#8221;</p><footer><strong>Ian Hickson</strong> <cite><a href='http://www.mail-archive.com/public-webapi@w3.org/msg03363.html'>www.mail-archive.com/&hellip;</a></cite></footer></blockquote>


<h3>Better Alternatives</h3>

<p>Given all the issues outlined above, it is not a good idea to use <code>window.showModalDialog</code> in new development (or any development for that matter).  So what should you use?  There&#8217;s no shortage of choices, basically all JavaScript frameworks provide an alternative (see <a href="http://livedocs.dojotoolkit.org/dijit/Dialog">Dojo</a>, <a href="http://mootools.net/forge/p/ascribe_dialog">MooTools</a>, &amp; <a href="http://yuilibrary.com/yui/docs/overlay/">YUI</a>).</p>

<p>Personally I would highly recommend <a href="http://jqueryui.com/demos/dialog/">jQuery UI&#8217;s dialog</a>.  It has a clean API, is highly customizable, extendable, and is themeable through <a href="http://jqueryui.com/themeroller/">jQuery UI&#8217;s theme roller</a>.</p>

<h3>Moving Forward</h3>

<p>When asked &#8220;Whatâ€™s your fave feature that didnâ€™t get into HTML 5 that youâ€™d put into HTML 6?&#8221;, Ian Hickson stated in a 2009 interview that:</p>

<blockquote><p>In-window modal dialogs or dialog boxâ€”the kind of prompt you get when the computer asks you a question and wonâ€™t let you do anything else until you answer the question. For instance, the window that comes up when you say &#8220;Save Asâ€¦&#8221; is usually a modal dialog.</p><p>Right now people fake it with divs and complicated styles and script. It would be neat to just be able to say &#8220;make this section a modal dialog&#8221;. Like showModalDialog(), but within the page instead of opening a new window with a new page.</p><p>Iâ€™d add it to HTML 5, but there are so many new features already that we need to wait for the browsers to catch up.</p><footer><strong>Ian Hickson</strong> <cite><a href='http://www.webstandards.org/2009/05/13/interview-with-ian-hickson-editor-of-the-html-5-specification/'>www.webstandards.org/2009/05/13/&hellip;</a></cite></footer></blockquote>


<p>Good news, <a href="http://dev.w3.org/html5/spec/commands.html#the-dialog-element">the dialog element</a> has recently been added to the HTML spec.  It includes a <code>showModal</code> method as well as a <code>returnValue</code> property that mimics <code>window.returnValue</code>.  The bad news?  It will be a long time before this element is usable  in all browsers.  The good news?  This would be a relatively easy element to <a href="http://remysharp.com/2010/10/08/what-is-a-polyfill/">polyfill</a>, so once some implementations make their way into browsers, developers could make a functional version for older browsers with the same API.</p>

<h3>Conclusion</h3>

<p><code>window.showModalDialog</code> is an old API that has been retroactively standardized; but that doesn&#8217;t mean you should actually be using it.  If you&#8217;re still maintaining code using this try to get off of it as soon as possible.  That being said the idea of having native dialog capabilities built into the browser wasn&#8217;t a bad idea.  Hope may be on the way with the dialog element that was recently added to the HTML5 spec.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript for the Java Developer]]></title>
    <link href="http://tjvantoll.com/2012/03/21/javascript-for-the-java-developer/"/>
    <updated>2012-03-21T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/03/21/javascript-for-the-java-developer</id>
    <content type="html"><![CDATA[<p>I gave a &#8220;JavaScript for the Java Developer&#8221; talk to the <a href="http://groups.google.com/group/greaterlansingjug?pli=1">Greater Lansing Java Users Group</a> on March 20th, 2012.  For those that missed the talk the slides are <a href="http://tjvantoll.com/speaking/slides/2012/JavaScript-for-the-Java-Developer/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Styling Disabled Form Fields]]></title>
    <link href="http://tjvantoll.com/2012/03/17/Styling-Disabled-Form-Fields/"/>
    <updated>2012-03-17T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/03/17/Styling-Disabled-Form-Fields</id>
    <content type="html"><![CDATA[<p>Form fields can be disabled by simply adding the <code>disabled</code> attribute.</p>

<figure class='code'><figcaption><span>Simple Disabled Fields</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">disabled</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;textarea</span> <span class="na">disabled</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'><span class="nt">&lt;select</span> <span class="na">disabled</span><span class="nt">&gt;&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Disabled fields cannot be interacted with by the user; the browser will not allow the field to receive focus or be tabbed to.  For an intuitive UI it&#8217;s important that disabled fields are clearly evident to the user.  Users are easily confused and frustrated when attempting to interact with fields that they are not able to.</p>

<p>To apply custom styling to disabled fields you can add CSS rules that target <code>input:disabled</code>, <code>select:disabled</code>, &amp; <code>textarea:disabled</code>. (Note: IE doesn&#8217;t support the <a href="https://developer.mozilla.org/En/CSS/%3Adisabled">disabled pseduo class</a> until IE9, so you&#8217;ll need to use <code>input[disabled]</code>, <code>select[disabled]</code>, &amp; <code>textarea[disabled]</code> <a href="https://developer.mozilla.org/en/CSS/Attribute_selectors">attribute selectors</a> if IE &lt; 9 support is important for you.  It&#8217;ll work just the same.)</p>

<p>While you <i>can</i> provide custom disabled field styling, it&#8217;s not generally a good idea.  All browsers come with default styling for these fields that attempt to mesh with native UI elements in the OS.  Also, users have a certain expectation for what disabled fields look like in their preferred web browser and it&#8217;s best not to mess with that.</p>

<p>Unfortunately some browser&#8217;s default styling is less than ideal.  <!--more-->To best show this I&#8217;ve created a <a href="http://jsfiddle.net/ygwnh/12/">test case</a> with the most common form elements and recorded a rendering of the test case in a large number of browser / OS combinations.  Since some of the styles are more evident when a the element is selected and/or has a value, I included both a grouping with no <code>selected</code> or <code>value</code> attributes, and another with those set.</p>

<h3>Markup</h3>

<p>Here&#8217;s the markup I used for the test cases, some very basic form fields with the <code>disabled</code> attribute.</p>

<h4>No Value / Selected Attributes</h4>

<figure class='code'><figcaption><span>Markup Used to Generate the Examples </span><a href='http://jsfiddle.net/ygwnh/12/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Enabled<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Disabled<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">disabled</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">disabled</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;radio&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;radio&quot;</span> <span class="na">disabled</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;select&gt;&lt;/select&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;select</span> <span class="na">disabled</span><span class="nt">&gt;&lt;/select&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;textarea&gt;&lt;/textarea&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;textarea</span> <span class="na">disabled</span><span class="nt">&gt;&lt;/textarea&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>With Value / Selected Attributes</h4>

<figure class='code'><figcaption><span>Markup Used to Generate the Examples </span><a href='http://jsfiddle.net/ygwnh/12/'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Enabled w/Value<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>Disabled w/Value<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;Value&quot;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">disabled</span> <span class="na">value=</span><span class="s">&quot;Value&quot;</span><span class="nt">&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">checked</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">disabled</span> <span class="na">checked</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;radio&quot;</span> <span class="na">checked</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;radio&quot;</span> <span class="na">disabled</span> <span class="na">checked</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;select&gt;&lt;option</span> <span class="na">selected</span><span class="nt">&gt;</span>Value<span class="nt">&lt;/option&gt;&lt;/select&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;select</span> <span class="na">disabled</span><span class="nt">&gt;&lt;option</span> <span class="na">selected</span><span class="nt">&gt;</span>Value<span class="nt">&lt;/option&gt;&lt;/select&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;textarea&gt;</span>Value<span class="nt">&lt;/textarea&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;&lt;textarea</span> <span class="na">disabled</span><span class="nt">&gt;</span>Value<span class="nt">&lt;/textarea&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Results</h3>

<p>You can view <a href="http://tjvantoll.com/images/posts/2012-03-17/All.html">all the results on one page</a> or see individual ones listed below.</p>

<h4>Windows</h4>

<ul>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/IE6.png" title="IE6">IE6</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/IE7.png" title="IE7">IE7</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/IE8.png" title="IE8">IE8</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/IE9.png" title="IE9">IE9</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/IE10.png" title="IE10">IE10</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/Windows-Chrome-17.png" title="Windows - Chrome 17">Chrome 17</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/Windows-Safari-5.1.png" title="Windows - Safari 5.1">Safari 5.1</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/Windows-Firefox-10.png" title="Windows - Firefox 10">Firefox 10</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/Windows-Opera-11.61.png" title="Windows - Opera 11.61">Opera 11.61</a></li>
</ul>


<h4>OS X</h4>

<ul>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/OSX-Chrome-17.png" title="OSX - Chrome 17">Chrome 17</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/OSX-Safari-5.1.png" title="OSX - Safari 5.1">Safari 5.1</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/OSX-Firefox-11.png" title="OSX - Firefox 11">Firefox 11</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/OSX-Opera-11.61.png" title="OSX - Opera 11.61">Opera 11.61</a></li>
</ul>


<h4>Mobile</h4>

<ul>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/iOS-5.png" title="iOS 5">iOS 5</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/Android-2.3.png" title="Android 2.3">Android 2.3</a></li>
<li><a href="http://tjvantoll.com/images/posts/2012-03-17/Opera-Mobile.png" title="Opera Mobile">Opera Mobile</a></li>
</ul>


<h3>Findings</h3>

<p>In general browsers add some combination of <code>opacity</code>, a grayish <code>background-color</code>, and a grayish <code>color</code> to the element to create the disabled effect.  For the most part browsers do a pretty good job making it evident that the fields are disabled.</p>

<p>There are exceptions though.  One glaring issue is the display of disabled text inputs and textareas in IE &lt; 10; when no text is present it&#8217;s impossible to tell whether the field is disabled.  In Windows, all non-IE browsers simply apply a <code>background-color</code> of <code>#EBEBE4</code> to all disabled elements.  Unfortunately, IE &lt; 10 doesn&#8217;t do much of anything to designate text inputs and textareas as disabled other than change the color of the text, which, doesn&#8217;t work out all that well when there&#8217;s no text present.</p>

<h3>Normalizing IE</h3>

<p>To normalize the display of disabled fields in IE we need to be able to target IE &lt;= 9 with CSS.  Why?  We don&#8217;t want to override the default styling whenever possible.  As mentioned earlier browsers apply different styling to attempt to match native UI elements.  If you blindly apply a background-color to all disabled elements, you&#8217;ll do so in Windows, OS X, Linux, iOS, Android, etcâ€¦ as well as any future devices where it might look horrible, or worse, confuse the user.</p>

<p>So back to selecting IE &lt;= 9.  In my opinion the most elegant way to do this is use <a href="http://msdn.microsoft.com/en-us/library/ms537512.aspx">IE&#8217;s conditional comments</a> to apply classes to the HTML node.  This approach was <a href="http://paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/">first proposed by Paul Irish in 2008</a> and is used in the <a href="http://html5boilerplate.com/">HTML5 boilerplate</a>.  There are many variations but in this case we only need to worry about IE &lt;= 9.</p>

<figure class='code'><figcaption><span>Applying a Class to IE <= 9</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if lte IE 9 ]&gt; &lt;html class=&quot;lte9&quot;&gt; &lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if (gt IE 9)|!(IE)]&gt;&lt;!--&gt;</span> <span class="nt">&lt;html</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!--&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can apply the <code>background-color</code> as such:</p>

<figure class='code'><figcaption><span>Normalizing the Disabled Field Display for Windows</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.lte9</span> <span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span><span class="o">][</span><span class="nt">disabled</span><span class="o">],</span> <span class="nc">.lte9</span> <span class="nt">textarea</span><span class="o">[</span><span class="nt">disabled</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="m">#EBEBE4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively you could use IE&#8217;s conditional comments to apply these rules directly:</p>

<figure class='code'><figcaption><span>Using IE&#8217;s Conditional Comments</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if lte IE 9 ]&gt;</span>
</span><span class='line'><span class="c">  &lt;style&gt;</span>
</span><span class='line'><span class="c">      input[type=&#39;text&#39;][disabled], textarea[disabled] {</span>
</span><span class='line'><span class="c">          background-color: #EBEBE4;</span>
</span><span class='line'><span class="c">      }</span>
</span><span class='line'><span class="c">  &lt;/style&gt;</span>
</span><span class='line'><span class="c">&lt;!--&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Either of these approaches will normalize the display of disabled text inputs and textareas on Windows.</p>

<p><img src="http://tjvantoll.com/images/posts/2012-03-17/IE-Before-and-After.png" alt="IE Before and After" /> <!-- http://jsfiddle.net/vCdcr/show/ --></p>

<h3>Normalizing IE6</h3>

<p>The above solution will not affect the display of these elements in IE6 because it does not support CSS attribute selectors.  Therefore, if you&#8217;re still supporting IE6 and the display of disabled fields is important to your UI you&#8217;ll need some other sort of hook on the node.  For example a class will work:</p>

<figure class='code'><figcaption><span>IE6 Disabled Field Markup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if IE 6 ]&gt; &lt;html class=&quot;ie6&quot;&gt; &lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if (gt IE 6)|!(IE)]&gt;&lt;!--&gt;</span> <span class="nt">&lt;html</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!--&lt;![endif]--&gt;</span>
</span><span class='line'>
</span><span class='line'>/* â€¦ */
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">disabled</span> <span class="na">class=</span><span class="s">&quot;disabled&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;textarea</span> <span class="na">disabled</span> <span class="na">class=</span><span class="s">&quot;disabled&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can apply the following CSS:</p>

<figure class='code'><figcaption><span>IE6 Disabled Field Styling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.ie6</span> <span class="nt">input</span><span class="nc">.disabled</span><span class="o">,</span> <span class="nc">.ie6</span> <span class="nt">textarea</span><span class="nc">.disabled</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="m">#EBEBE4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Other Issues</h3>

<p>A number of browsers including all OS X browsers except Opera, Android, and iOS do a poor job making textareas appear disabled, in some cases even when text is present.  If your UI contains disabled textareas it&#8217;s probably worth adding a little bit of opacity to compensate for browsers that don&#8217;t make it very apparent that you cannot interact with them.</p>

<figure class='code'><figcaption><span>Normalizing Textarea Disabling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">textarea</span><span class="nd">:disabled</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">opacity</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The effect is subtle but can make a big difference in helping the user to recognize that the field is disabled, especially if multiple textareas are near each other.  Here&#8217;s an example from Chrome 17 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2012-03-17/OSX-Before-and-After.png" alt="OSX Before and After" /> <!-- http://jsfiddle.net/JpNav/1/show/ --></p>

<h3>Summary</h3>

<p>Browsers have default styling for disabled fields that is usually pretty good at visually indicating that the field cannot be interacted with.  In situations where the browser default isn&#8217;t ideal, custom styling can be applied.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IE7 Attribute Selector Bugs]]></title>
    <link href="http://tjvantoll.com/2012/03/08/IE7-Attribute-Selector-Bugs/"/>
    <updated>2012-03-08T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2012/03/08/IE7-Attribute-Selector-Bugs</id>
    <content type="html"><![CDATA[<p>The CSS attribute selector allows you to select HTML elements based on their attributes.  For example, take the following markup:</p>

<figure class='code'><figcaption><span>Simple List</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">id=</span><span class="s">&quot;item1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>  <span class="c">&lt;!-- #1 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">id=</span><span class="s">&quot;item2&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>  <span class="c">&lt;!-- #2 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;/li&gt;</span>             <span class="c">&lt;!-- #3 --&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>In a compliant browser, here are some selectors you can use to target these list items.</p>

<figure class='code'><figcaption><span>Selectors to Target the List</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">li</span>             <span class="c">/* Selects #1, #2, #3 */</span>
</span><span class='line'><span class="nt">li</span><span class="o">[</span><span class="nt">id</span><span class="o">]</span>         <span class="c">/* Selects #1, #2 */</span>
</span><span class='line'><span class="nt">li</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="nt">item1</span><span class="o">]</span>   <span class="c">/* Selects #1 */</span>
</span><span class='line'><span class="nt">li</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;item1&#39;</span><span class="o">]</span> <span class="c">/* Selects #1, single quotes are valid */</span>
</span><span class='line'><span class="nt">li</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s2">&quot;item2&quot;</span><span class="o">]</span> <span class="c">/* Selects #1, double quotes are valid too */</span>
</span><span class='line'><span class="nt">li</span><span class="o">[</span><span class="nt">id</span><span class="o">^=</span><span class="nt">item</span><span class="o">]</span>   <span class="c">/* Selects #1, #2, ^ = starts with */</span>
</span><span class='line'><span class="nt">li</span><span class="o">[</span><span class="nt">id</span><span class="err">$</span><span class="o">=</span><span class="nt">1</span><span class="o">]</span>      <span class="c">/* Selects #1, $ = ends with */</span>
</span><span class='line'><span class="nt">li</span><span class="o">[</span><span class="nt">id</span><span class="o">*=</span><span class="nt">item</span><span class="o">]</span>   <span class="c">/* Selects #1, #2, * = contains */</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Enter IE7</h3>

<p>This is all well and good in most all modern browsers.  Unfortunately IE7 is buggy when handling this selector.  For those of use that are still unlucky enough to be supporting it, I thought it would be nice to have some of these documented.</p>

<h3>DOM Attributes == HTML Attributes?</h3>

<p>Some DOM attributes have different names than the HTML attributes to avoid conflicts with JavaScript reserved words.  Specifically in this case, DOM nodes have <code>htmlFor</code> and <code>className</code> attributes to avoid JavaScript reserved words <code>for</code> and <code>class</code>.</p>

<figure class='code'><figcaption><span>htmlFor and className</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">&quot;foo&quot;</span> <span class="na">for=</span><span class="s">&quot;name&quot;</span> <span class="na">id=</span><span class="s">&quot;nameLabel&quot;</span><span class="nt">&gt;</span>Name:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">id=</span><span class="s">&quot;name&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;nameLabel&#39;</span><span class="p">).</span><span class="k">for</span><span class="p">;</span> <span class="c1">//undefined</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;nameLabel&#39;</span><span class="p">).</span><span class="nx">htmlFor</span> <span class="c1">//&#39;name&#39;</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;nameLabel&#39;</span><span class="p">).</span><span class="kr">class</span> <span class="c1">//undefined</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;nameLabel&#39;</span><span class="p">).</span><span class="nx">className</span> <span class="c1">//&#39;foo&#39;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In IE8+ (and everywhere else for that matter) the following attribute selector will select the label:</p>

<figure class='code'><figcaption><span>Standard Attribute Selector</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">label</span><span class="o">[</span><span class="nt">for</span><span class="o">=</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In IE7 this won&#8217;t work.  You&#8217;ll need to use the incorrect <code>htmlFor</code> attribute:</p>

<figure class='code'><figcaption><span>IE7 for Attribute Selector</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">label</span><span class="o">[</span><span class="nt">htmlFor</span><span class="o">=</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So if you&#8217;re still supporting IE7 you&#8217;ll almost certainly want to include them together:</p>

<figure class='code'><figcaption><span>Combined Selector</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">label</span><span class="o">[</span><span class="nt">for</span><span class="o">=</span><span class="s1">&#39;name&#39;</span><span class="o">],</span> <span class="nt">label</span><span class="o">[</span><span class="nt">htmlFor</span><span class="o">=</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Along the same lines, IE7 will incorrectly select attributes based on the className attribute:</p>

<figure class='code'><figcaption><span>IE7 class Attribute Selector</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">label</span><span class="o">[</span><span class="nt">className</span><span class="o">=</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fortunately IE7 also supports selecting using <code>class</code>.</p>

<figure class='code'><figcaption><span>class Attribute Selector</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">label</span><span class="o">[</span><span class="nt">class</span><span class="o">=</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>IE8 fixed both of these bugs and selecting for the attributes <code>htmlFor</code> and <code>className</code> no longer work.</p>

<h3>Empty Attributes</h3>

<p>It&#8217;s impossible to target empty attributes via CSS in IE7.  As an example, let&#8217;s say you apply a <a href="http://html5doctor.com/html5-custom-data-attributes/">custom HTML5 data attribute</a> to nodes at random throughout the DOM.  Let&#8217;s say you want to select only the ones that have an empty value, for example the h3 below:</p>

<figure class='code'><figcaption><span>Headings to Select</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1</span> <span class="na">data-state=</span><span class="s">&quot;foo&quot;</span><span class="nt">&gt;</span>Top Heading<span class="nt">&lt;h1&gt;</span>
</span><span class='line'><span class="nt">&lt;h2</span> <span class="na">data-state=</span><span class="s">&quot;bar&quot;</span><span class="nt">&gt;</span>Sub Heading<span class="nt">&lt;h2&gt;</span>
</span><span class='line'><span class="nt">&lt;h3</span> <span class="na">data-state=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Another Heading<span class="nt">&lt;h3&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You would write this selector and call it a day:</p>

<figure class='code'><figcaption><span>Empty Attribute Selector</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">[</span><span class="nt">data-state</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Except it won&#8217;t work in IE7.  There is simply no way to target empty attributes via CSS in IE7.  So how can you replicate this functionality?  For better or worse JavaScript is the only client side option to handle this.</p>

<p><a href="http://caniuse.com/queryselector">querySelectorAll</a> isn&#8217;t supported until IE8, so you need a selector engine to target these nodes.  Here&#8217;s how you can do it in jQuery:</p>

<figure class='code'><figcaption><span>Selecting Nodes with Empty Attribute - jQuery</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;[data-state=&quot;&quot;]&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re using <a href="http://dojotoolkit.org">Dojo</a> yet another step is necessary.  For whatever reason runningâ€¦</p>

<figure class='code'><figcaption><span>JavaScript Selecting Nodes with Empty Attribute - Dojo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">dojo</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s1">&#39;[data-state=&quot;&quot;]&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>â€¦returns not only the nodes with empty attributes, but also all the nodes that don&#8217;t have the attribute declared at all!  Furthermore, <code>dojo.query('[data-state]')</code> incorrectly doesn&#8217;t return nodes that have the attribute with an empty value.  So you need the following approach to select the nodes in IE7.</p>

<figure class='code'><figcaption><span>Functioning IE7 Approach</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">dojo</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">dojo</span><span class="p">.</span><span class="nx">hasAttr</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="s1">&#39;data-state&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="nx">dojo</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="s1">&#39;data-state&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Safe to finally apply your styling here.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that when using any of the JavaScript based solutions it&#8217;s recommended to leave the CSS in place.  Yes this is dual maintenance, but it avoids a potential <a href="http://en.wikipedia.org/wiki/FOUC">FOUC</a>.  Fortunately ALL of this nonsense is fixed in IE8.</p>

<h3>Descendant Selector Typos</h3>

<p>Let&#8217;s say you have the following markup.</p>

<figure class='code'><figcaption><span>Sample HTML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">data-state=</span><span class="s">&#39;active&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>Some text<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>â€¦and you want to apply some styling to the paragraph, maybe something like this:</p>

<figure class='code'><figcaption><span>Descendant Selector</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">div</span><span class="o">[</span><span class="nt">data-state</span><span class="o">=</span><span class="s1">&#39;active&#39;</span><span class="o">]</span><span class="nt">p</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how there&#8217;s no space between the &#8220;]&#8221; and the &#8220;p&#8221;, that&#8217;s a syntax error, right?  Correctâ€¦ except in IE7!  IE7 will incorrectly parse this as if a space were there and change the color of the paragraph to red.</p>

<p>This was also fixed in IE8.</p>

<h3>Summary</h3>

<p>We&#8217;re actually really fortunate that the attribute selector is supported in IE7.  It&#8217;s a very useful tool to have available and it can help solve a lot of real world issues.  And if you&#8217;ve dropped IE6 support they&#8217;re finally safe to use.</p>

<p>While support is buggy, the attribute selector does work for the vast majority of use cases.  However, knowing to look out for these bugs can save hours of frustration.  Yet another reason for IE7 to fall off the face of the Earth.  Happy hacking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a 3D Picture Cube with CSS3]]></title>
    <link href="http://tjvantoll.com/2012/02/27/Making-a-3D-Picture-Cube-with-CSS3/"/>
    <updated>2012-02-27T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2012/02/27/Making-a-3D-Picture-Cube-with-CSS3</id>
    <content type="html"><![CDATA[<div class="warning">
    Your browser doesn&#8217;t support CSS 3D transformations, therefore some of these demos might not work as intended.  Please try viewing this page in the latest version of Firefox, Safari, or an iOS device.
</div>


<p>Let&#8217;s face it, the mere concept of doing something in 3D in the browser is pretty awesome.  For those of us that remember the good old days of font tags and spacer gifsâ€¦ well, let&#8217;s just say we&#8217;ve come a long way.</p>

<p>CSS3 3D transforms were recently added in Firefox 10 and <a href="http://blogs.msdn.com/b/ie/archive/2011/09/13/ie10pp3.aspx">IE10&#8217;s 3rd platform preview</a>.  They&#8217;ve been in Safari since v4, in iOS since v3.2, and they&#8217;re also supported in Android&#8217;s recent Ice Cream Sandwich release.  So a decent chunk of web users now have the capability to run 3D transitions (at the time of this writing <a href="http://caniuse.com/#feat=transforms3d">caniuse.com</a> has it at ~32%).</p>

<p>So I decided I wanted to start messing around with this.</p>

<!--more-->


<p><link href="http://tjvantoll.com/stylesheets/posts/2012-02-27.css" rel="stylesheet" />
Note: Google Chrome supports 3D transforms, but <a href="https://github.com/Modernizr/Modernizr/issues/240">Modernizr will report a false positive</a> if <a href="http://blog.chromium.org/2011/03/gpu-acceleration-old-drivers.html">Chrome has disabled GPU acceleration</a>.  So if you&#8217;re using Chrome you may or may not see a warning at the top of the screen saying that the demos won&#8217;t work (since I use Modernizr to detect whether to display that warning).  I&#8217;ve also found that if Chrome does disable hardware acceleration, some of the demos in this post are a bit choppy, and occasionally don&#8217;t work.  That&#8217;s one of the downsides with working something so new, all the kinks haven&#8217;t been worked out quite yet.</p>

<h3>Getting Started</h3>

<p>There are a few resources that I would recommend for getting started.</p>

<ul>
<li><a href="http://24ways.org/2010/intro-to-css-3d-transforms">An Introduction to CSS 3D Transforms</a> by David DeSandro.  This is an excellent starting point to learn the syntax and to see some <a href="http://desandro.github.com/3dtransforms/examples/card-02-slide-flip.html">pretty</a> <a href="http://desandro.github.com/3dtransforms/examples/cube-02-show-sides.html">sweet</a> <a href="http://desandro.github.com/3dtransforms/examples/carousel-02-dynamic.html">demos</a>.</li>
<li><a href="http://www.paulrhayes.com/2010-09/3d-css-cube-ii-touch-gestures-click-and-drag/">CSS 3D cube with touch gestures, click and drag</a> by Paul Hayes.  Another excellent <a href="http://www.paulrhayes.com/experiments/cube-3d/touch.html">demo</a> of a 3D cube that supports the keyboard, touch gestures, and dragging.</li>
<li><a href="https://developer.mozilla.org/En/CSS/Using_CSS_transforms">Mozilla Developer Network&#8217;s entry on CSS Transforms</a></li>
</ul>


<p>I decided that I wanted a way to show off pictures in the footer of this blog using 3D transforms.  The effect I decided on was having a cube with an image on all 6 sides that I could rotate through a JavaScript API.  More importantly, I wanted the solution to be something that other people could use and extend.</p>

<h3>Markup</h3>

<p>The markup I ended up using was very similar to the cube in <a href="http://desandro.github.com/3dtransforms/examples/cube-02-show-sides.html">David DeSandro&#8217;s cube demo</a>.</p>

<figure class='code'><figcaption><span>Basic Markup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;PictureCube-container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;cube show-front&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;figure</span> <span class="na">class=</span><span class="s">&quot;front&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;1.jpg&quot;</span> <span class="nt">/&gt;&lt;/figure&gt;</span>
</span><span class='line'>      <span class="nt">&lt;figure</span> <span class="na">class=</span><span class="s">&quot;back&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;2.jpg&quot;</span> <span class="nt">/&gt;&lt;/figure&gt;</span>
</span><span class='line'>      <span class="nt">&lt;figure</span> <span class="na">class=</span><span class="s">&quot;right&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;3.jpg&quot;</span> <span class="nt">/&gt;&lt;/figure&gt;</span>
</span><span class='line'>      <span class="nt">&lt;figure</span> <span class="na">class=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;4.jpg&quot;</span> <span class="nt">/&gt;&lt;/figure&gt;</span>
</span><span class='line'>      <span class="nt">&lt;figure</span> <span class="na">class=</span><span class="s">&quot;top&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;5.jpg&quot;</span> <span class="nt">/&gt;&lt;/figure&gt;</span>
</span><span class='line'>      <span class="nt">&lt;figure</span> <span class="na">class=</span><span class="s">&quot;bottom&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;6.jpg&quot;</span> <span class="nt">/&gt;&lt;/figure&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Styling</h3>

<p>I&#8217;m not going to go into the full details of how the styling to create the cubes works, those are best covered by the articles I linked to earlier, but I did want to give a high level overview of what&#8217;s going on.  Here&#8217;s a simplified version of the styles applied to each of the sides of the cube.</p>

<figure class='code'><figcaption><span>Basic Styling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* Vendor prefixes removed for readability */</span>
</span><span class='line'><span class="nc">.cube</span> <span class="nc">.front</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* No X/Y rotation needed since the front is */</span>
</span><span class='line'>  <span class="c">/* already facing forward. */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.cube</span> <span class="nc">.back</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotateX</span><span class="p">(</span> <span class="m">-180</span><span class="n">deg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.cube</span> <span class="nc">.right</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotateY</span><span class="p">(</span> <span class="m">90</span><span class="n">deg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.cube</span> <span class="nc">.left</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotateY</span><span class="p">(</span> <span class="m">-90</span><span class="n">deg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.cube</span> <span class="nc">.top</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotateX</span><span class="p">(</span> <span class="m">90</span><span class="n">deg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.cube</span> <span class="nc">.bottom</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotateX</span><span class="p">(</span> <span class="m">-90</span><span class="n">deg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The front side doesn&#8217;t need to be rotated since it&#8217;s already facing the screen front and center, but all the other sides need to be rotated on either the X or Y axis to create the cube.  For example, the back side is rotated on the X axis -180 degrees so that it faces directly away from the screen.</p>

<p>Since this is hard to visualize in your head, here&#8217;s an example of a box rotating from 0deg to -180deg on the X axis in slow motion.</p>

<div class="demo-container">
    <img id="demo-cube-1" class="demo-cube" src="http://tjvantoll.com/images/kids/2.jpg" />
</div>


<p>And here&#8217;s one going from 0deg to 90deg on the Y axis.</p>

<div class="demo-container">
    <img id="demo-cube-2" class="demo-cube" src="http://tjvantoll.com/images/kids/1.jpg" />
</div>


<p>Although I won&#8217;t get into how the Z axis is used here, it&#8217;s perhaps the hardest to visualize so I thought I&#8217;d include an example of it as well.  In 3D world it&#8217;s the axis that&#8217;s going straight between you and your monitor.   Here&#8217;s an image going from -50px to 50px on the Z axis.</p>

<div class="demo-container">
    <img id="demo-cube-3" class="demo-cube" src="http://tjvantoll.com/images/izzie/6.jpg" />
</div>


<h3>Rotating the Cube</h3>

<p>So the 6 sides themselves have now have been rotated to form the cube.  In order to show various sides of the cube to the user, the cube itself needs to be rotated to move the appropriate side to the front.  This will be done by applying classes to the cube, one for each side.</p>

<figure class='code'><figcaption><span>Basic Classes for Rotation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* Vendor prefixes removed for readability */</span>
</span><span class='line'><span class="nc">.cube.show-front</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* No X/Y translation is necessary */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.cube.show-back</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotateX</span><span class="p">(</span> <span class="m">-180</span><span class="n">deg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.cube.show-right</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotateY</span><span class="p">(</span> <span class="m">-90</span><span class="n">deg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.cube.show-left</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotateY</span><span class="p">(</span> <span class="m">90</span><span class="n">deg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.cube.show-top</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotateX</span><span class="p">(</span> <span class="m">-90</span><span class="n">deg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.cube.show-bottom</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">rotateX</span><span class="p">(</span> <span class="m">90</span><span class="n">deg</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Designing an API</h3>

<p>Now we have a cube but nothing to use to interact with it.  At the very least we need something to toggle the classes shown above to make the cube rotate.  Time to start designing a JavaScript API for the cube.</p>

<p>I started with a constructor function that takes the necessary information, a DOM node and an array of the URLs for the images to use on the cube.</p>

<figure class='code'><figcaption><span>PictureCube Constructor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @param node {DOMNode|string} The node to turn into the cube </span>
</span><span class='line'><span class="cm"> *             or the id attribute of the node</span>
</span><span class='line'><span class="cm"> * @param images {Array} An Array of 6 Strings containing the URLs </span>
</span><span class='line'><span class="cm"> *               of the images to place in the cube</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">PictureCube</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">node</span><span class="p">,</span> <span class="nx">images</span> <span class="p">)</span> <span class="p">{</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>For convenience&#8217;s sake I allow the user to pass in either a String id attribute of a DOM node or the node itself.  A quick conversion internally will make it so I only have to deal with the node.</p>

<figure class='code'><figcaption><span>Getting the Node</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">typeof</span> <span class="nx">node</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span> <span class="o">?</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="o">:</span> <span class="nx">node</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next you need to be able to do things with the cube.  The things I wanted to do were the ability to go to a particular side, cycle through the sides at some interval, and the ability to clear that interval.</p>

<figure class='code'><figcaption><span>Methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @param slide {number} The number of the side to change the </span>
</span><span class='line'><span class="cm"> *              cube to.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">PictureCube</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kr">goto</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">side</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @param interval {number} The number of milliseconds between each </span>
</span><span class='line'><span class="cm"> *                 image transition</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">PictureCube</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">cycle</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">interval</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">PictureCube</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clearCycle</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So to create the cube you call the constructor with the node you want the cube to be in and the images you want to be on the various sides of the cube.</p>

<figure class='code'><figcaption><span>Instantiating a Cube</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myCube</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PictureCube</span><span class="p">(</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;cube-container&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;1.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;2.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;3.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;4.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;5.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;6.jpg&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can simply call the methods provided.</p>

<figure class='code'><figcaption><span>Calling the Available Methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myCube</span><span class="p">.</span><span class="kr">goto</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nx">myCube</span><span class="p">.</span><span class="nx">cycle</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span><span class='line'><span class="nx">myCube</span><span class="p">.</span><span class="nx">clearCycle</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>What&#8217;s with the prototype?</h3>

<p>The methods are added to the function&#8217;s prototype so PictureCube can be extended.  As an example here&#8217;s an AwesomeCube extension that inherits functionality from PictureCube, and adds on an additional awesome method.</p>

<figure class='code'><figcaption><span>Extending PictureCube</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">AwesomeCube</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">images</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">PictureCube</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="p">[</span><span class="nx">node</span><span class="p">,</span> <span class="nx">images</span><span class="p">]);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">AwesomeCube</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PictureCube</span><span class="p">();</span>
</span><span class='line'><span class="nx">AwesomeCube</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">awesome</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//this.cube, this.images, this.goto, this.cycle</span>
</span><span class='line'>    <span class="c1">//and this.clearCycle are available to the new</span>
</span><span class='line'>    <span class="c1">//function.</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Line 1 defines AwesomeCube&#8217;s constructor function with the same parameters as PictureCube.  It then invokes PictureCube&#8217;s constructor using <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply">function.apply</a>.  The apply function is defined in <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function#Methods">Function.prototype</a>, and essentially allows you to control what the value of <code>this</code> will be in the function being invoked.  This technique is actually <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply#Using_apply_to_chain_constructors">a common way of implementing Java-like super calls to chain constructors</a>.</p>

<p>If this syntax seems clunky to you, or you prefer a more classical inheritance model, there are plenty of &#8220;class&#8221; JS libraries available in various libraries, see <a href="http://www.sitepen.com/blog/2010/07/01/creating-and-enhancing-dojo-classes/">Dojo&#8217;s</a> and <a href="http://mootools.net/docs/core/Class/Class">MooTools&#8217;</a> for examples.  In this case straight up JavaScript works just fine and I didn&#8217;t want to add a dependency on a JS toolkit.</p>

<h3>Why isn&#8217;t this a jQuery plugin?</h3>

<p>jQuery is great for normalizing browser differences so you don&#8217;t need to worry about them.  But in this case, the list of browsers that support CSS3 3D transformations have sufficient standards support that I had no need for jQuery.  Therefore, writing this as a jQuery plugin would add an unnecessary dependency on jQuery.</p>

<p>Plus, jQuery plugins require some extra boilerplate to maintain state, which is necessary in this case.  <a href="http://blog.nemikor.com/2010/05/15/building-stateful-jquery-plugins/">Using jQuery UI&#8217;s widget factory</a> would work great, and might be something I consider if this implementation becomes more complex in the future.  But for now didn&#8217;t want to add dependencies.</p>

<h3>Limitations</h3>

<p>The current biggest limitation of the PictureCube implementation is that it has a hardcoded 100px height and 100px width.  Eventually I plan on moving these declarations from CSS to JS so that it can be adjusted on the fly.</p>

<h3>Putting it all Together</h3>

<p>PictureCube.js is available to be forked or used on Github - <a href="https://github.com/tjvantoll/PictureCube">https://github.com/tjvantoll/PictureCube</a>.  I&#8217;m planning on adding the ability to alter the height and width of the cube in a future update.  Please give it a shot and let me know what you think.</p>

<p>Here&#8217;s a final cube for you to play with.  Happy hacking.</p>

<script>
    $.domReady(function(){
        window.playgroundCube = new PictureCube('playground-cube', [
            '/images/izzie/1.jpg',
            '/images/izzie/2.jpg',
            '/images/izzie/3.jpg',
            '/images/izzie/4.jpg',
            '/images/izzie/5.jpg',
            '/images/izzie/6.jpg'                                                                                   
        ]);
    });
</script>


<div id="playground">
    <div id="playground-cube"></div>
    
    <div class="form-row">
        <label for="goto">Go To:</label>
        <input type="text" size="2" maxlength="1" id="goto" />(1 - 6)
        <button onclick="playgroundCube.goto(parseInt(document.getElementById('goto').value, 10));">Go</button>
    </div>
    
    <div class="form-row">
        <label for="cycle">Cycle:</label>
        <input type="text" size="5" maxlength="5" id="cycle">(milliseconds)
        <button onclick="playgroundCube.cycle(parseInt(document.getElementById('cycle').value, 10));">Start Cycle</button>
        <button onclick="playgroundCube.clearCycle();">Stop Cycle</button>  
    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3 Color Animations]]></title>
    <link href="http://tjvantoll.com/2012/02/20/CSS3-Color-Animations/"/>
    <updated>2012-02-20T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2012/02/20/CSS3-Color-Animations</id>
    <content type="html"><![CDATA[<p>CSS3 animations allow you to alter the values of CSS properties over time.  They&#8217;re now supported in Firefox 5+, Chrome, Safari 4+, iOS, Android 4+, and the upcoming IE10, therefore, using them in real production websites is possible.  One of the cool things you can do with them is change the color of an element using exclusively CSS.  Previously a technique like this was only possible using <a href="https://developer.mozilla.org/en/window.setInterval">JavaScript&#8217;s setInterval function</a> to gradually change the appropriate property of the element. See <a href="http://jqueryui.com/demos/animate/">jQuery UI&#8217;s animate demos</a> for a good example.</p>

<!--more-->


<h3>Getting Started</h3>

<p>Let&#8217;s start with a basic example (note - Whether or not you see the animation depends on whether your browser supports CSS3 animations.  You can check at <a href="http://caniuse.com/css-animation">caniuse.com</a>.</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/RfYMA/1/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3>Syntax</h3>

<p>Let&#8217;s break this down one section at a time.</p>

<figure class='code'><figcaption><span>Animation CSS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">color</span><span class="err">_</span><span class="n">change</span> <span class="m">1s</span> <span class="n">infinite</span> <span class="n">alternate</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">color</span><span class="err">_</span><span class="n">change</span> <span class="m">1s</span> <span class="n">infinite</span> <span class="n">alternate</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">color</span><span class="err">_</span><span class="n">change</span> <span class="m">1s</span> <span class="n">infinite</span> <span class="n">alternate</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="err">o</span><span class="o">-</span><span class="n">animation</span><span class="o">:</span> <span class="n">color</span><span class="err">_</span><span class="n">change</span> <span class="m">1s</span> <span class="n">infinite</span> <span class="n">alternate</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">:</span> <span class="n">color</span><span class="err">_</span><span class="n">change</span> <span class="m">1s</span> <span class="n">infinite</span> <span class="n">alternate</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>animation</code> property is how you define a <a href="https://developer.mozilla.org/en/CSS/CSS_animations">CSS3 animation</a>.  The <a href="https://developer.mozilla.org/en-US/">MDN</a> (Mozilla Developer Network) docs have extensive documentation on all the various sub properties available to configure the animation <a href="https://developer.mozilla.org/en/CSS/CSS_animations#Configuring_the_animation">here</a>.  In this example I&#8217;m settingâ€¦</p>

<ul>
<li><code><a href="https://developer.mozilla.org/en/CSS/animation-name">animation name</a></code>: <code>color_change</code> - This refers to a named @keyframes rule, which we&#8217;ll get into in a minute.</li>
<li><code><a href="https://developer.mozilla.org/en/CSS/animation-duration">animation_duration</a></code>: <code>1s</code> - The animation should last 1 second.</li>
<li><code><a href="https://developer.mozilla.org/en/CSS/animation-iteration-count">animation_iteration_count</a></code>: <code>infinite</code> - The animation will cycle forever.</li>
<li><code><a href="https://developer.mozilla.org/en/CSS/animation-direction">animation_direction</a></code>: <code>alternate</code> - This will tell the animation to alternate, from start to end, then end to start, then start to end, and so on.  In this example it keeps the box from being jerky by quickly switching from red to blue.</li>
</ul>


<p>For readability you can also list the properties out individually.</p>

<figure class='code'><figcaption><span>Animation broken out</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* Note: Prefixes omitted, see below */</span>
</span><span class='line'><span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">name</span><span class="o">:</span> <span class="n">color</span><span class="err">_</span><span class="n">change</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">duration</span><span class="o">:</span> <span class="m">1s</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">iteration</span><span class="o">-</span><span class="n">count</span><span class="o">:</span> <span class="n">infinite</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="k">direction</span><span class="o">:</span> <span class="n">alternate</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Prefixes</h3>

<p>The vendor prefixes are necessary because CSS3 animations are still considered an experimental feature (the <a href="http://www.w3.org/TR/css3-animations/">spec</a> is still in working draft status.  However, the syntax is consistent across modern browsers, so you only have to copy and paste the code to add all the necessary prefixes.  Always include the un-prefixed property last to make your code future friendly to browsers that add un-prefixed support.  For an up to date list of what browsers support CSS3 animations and which prefixes to use check out the <a href="http://caniuse.com/css-animation">CSS animation page at caniuse.com</a>.</p>

<p>If you get sick of typing out all the vendor prefixes you&#8217;re not alone.  <a href="http://leaverou.github.com/prefixfree/">-prefix-free</a> is a tool by <a href="http://lea.verou.me/">Lea Verou</a> that lets you write your CSS unprefixed.  A JavaScript file detects whether a browser prefix is necessary, which one to use, and applies it automatically.</p>

<p>Another option is <a href="http://prefixr.com/">Prefixr</a> by Jeffrey Way of <a href="http://net.tutsplus.com/">nettuts</a>.  It lets you copy and paste your code in, run it, and have the appropriate prefixes added automatically.</p>

<p>Browser prefixes have been been a hot topic lately after it was announced that IE, Firefox, and Opera are <a href="http://lists.w3.org/Archives/Public/www-style/2012Feb/0313.html">considering adopting support for -webkit prefixes</a>.  If you&#8217;re curious a <a href="http://remysharp.com/2012/02/09/vendor-prefixes-about-to-go-south/">number</a> <a href="http://christianheilmann.com/2012/02/09/now-vendor-prefixes-have-become-a-problem-want-to-help-fix-it/">of</a> <a href="http://www.brucelawson.co.uk/2012/on-the-vendor-prefixes-problem/">others</a> have <a href="http://infrequently.org/2012/02/misdirection/">written</a> about this.</p>

<h3>Keyframes</h3>

<figure class='code'><figcaption><span>Keyframe Declarations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@-webkit-keyframes</span> <span class="nt">color_change</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">from</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="nt">to</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@-moz-keyframes</span> <span class="nt">color_change</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">from</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="nt">to</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@-ms-keyframes</span> <span class="nt">color_change</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">from</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="nt">to</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@-o-keyframes</span> <span class="nt">color_change</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">from</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="nt">to</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">color_change</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">from</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="nt">to</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://developer.mozilla.org/en/CSS/@keyframes">Keyframes</a> are a way of specifying a set of properties and their values at different states of an animation.  <code>@keyframes color_change</code> gives the @keyframes a name of <code>color_change</code>.  This provides the connection used on the animation property above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">from</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">to</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This animation only has 2 steps, a start and an end.  Since such animations are quite common, the <a href="http://www.w3.org/TR/css3-animations/#keyframes-">spec</a> provides the keywords <code>from</code> and <code>to</code> for defining the state of properties at the beginning and end of the animation.  This could also have been written using percentages for the steps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">0</span><span class="o">%</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the animation has more than 2 steps, they can be listed using multiple steps as such.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">0</span><span class="o">%</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">25</span><span class="o">%</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">50</span><span class="o">%</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">75</span><span class="o">%</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">black</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">100</span><span class="o">%</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Real World Example</h3>

<p>Since the first demo was rather contrived, I thought I&#8217;d provide an example of how you could use this technique in the real world.  On buttons, a common UI pattern is to provide the user with visual feedback that they&#8217;re on the button by applying a subtle color change.  This is usually done by applying a different <code>background-color</code> on the hover pseudoclass of the button as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">button</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">pink</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">button</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">hotpink</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To improve upon this, we can add a CSS 3 color animation to gradually make the color transition.  The following example shows each side by side:</p>

<iframe style="width: 100%; height: 250px" src="http://jsfiddle.net/PTfZD/3/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3>Falling Back Gracefully</h3>

<p>Since CSS3 animations are only present in modern browsers, there&#8217;s a good chance a number of your users won&#8217;t have them available.  Luckily, CSS3 animations fallback gracefully to browsers that don&#8217;t support them.  If the browser doesn&#8217;t know how to handle a CSS animation, it just ignores the CSS rules.  Therefore, make sure not to use CSS animations to perform functionality that is vital to your site or application, it should simply enhance the user experience.</p>

<p>In the button example above if the browser can&#8217;t perform the animation, the animated button will simply fallback on the hover button&#8217;s behavior.</p>

<figure class='code'><figcaption><span>Color Animation with Fallback</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">button</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">pink</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">button</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* IE &lt;= 6 get no hover effect */</span>
</span><span class='line'>  <span class="c">/* All browsers IE 7+ know how to handle this */</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">hotpink</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c">/* Browsers that support CSS animations get the animation, */</span>
</span><span class='line'>  <span class="c">/* those that don&#39;t ignore this and move on. */</span>
</span><span class='line'>  <span class="c">/* Note: I&#39;ve omitted the vendor prefixes for simplicity. */</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">:</span> <span class="n">color</span><span class="err">_</span><span class="n">change</span> <span class="m">1s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Detect Support and Polyfill</h3>

<p>If you have a CSS color animation that you absolutely must have work on all browsers back to IE6, you can do so by detecting support via <a href="http://modernizr.com">Modernizr</a>, and falling back to <a href="http://jqueryui.com/demos/animate/">jQuery UI&#8217;s animation</a>.</p>

<figure class='code'><figcaption><span>Fallback Behavior with jQuery UI</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">Modernizr</span><span class="p">.</span><span class="nx">cssanimation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mouseover&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//jQuery UI doesn&#39;t support the hotpink keyword :(</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#FF69B4&#39;</span> <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mouseout&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">stop</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;backgroundColor&#39;</span><span class="p">,</span> <span class="s1">&#39;pink&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Live example (this should work across all browsers):</p>

<iframe style="width: 100%; height: 160px" src="http://jsfiddle.net/tj_vantoll/2Yrpe/3/embedded/result,js,css,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If the jQuery UI approach already works cross browser why would you bother doing this with CSS?</p>

<ul>
<li>Certain desktop and mobile browsers can use hardware acceleration with CSS3 animations.  This usually results in the animation rendering smoother.</li>
<li>Users with JavaScript disabled will still see the animation.</li>
<li>If you&#8217;re only using jQuery &amp; jQuery UI for this animation you can save yourself two HTTP requests by using <a href="http://www.modernizr.com/docs/#load">Modernizr&#8217;s load function</a>.  This will first test whether the browser supports CSS animations, if it does nothing needs to be done, if it doesn&#8217;t all scripts listed in the <code>nope</code> parameter will be loaded.</li>
</ul>


<figure class='code'><figcaption><span>Conditionally Loading jQuery UI</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Modernizr</span><span class="p">.</span><span class="nx">load</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">test</span><span class="o">:</span> <span class="nx">Modernizr</span><span class="p">.</span><span class="nx">cssanimation</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">nope</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jquery.js&#39;</span><span class="p">,</span> <span class="s1">&#39;jquery-ui&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Summary</h3>

<p>CSS 3 color animations can be used in modern browsers today.  For most use cases no animations in unsupported browsers isn&#8217;t a problem, and, if it is, <a href="http://jqueryui.com">jQuery UI</a> can be used to polyfill the functionality.</p>
]]></content>
  </entry>
  
</feed>
