<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2012-10-26T20:48:26-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding Pointers to jQuery UI Tooltips]]></title>
    <link href="http://tjvantoll.com/2012/10/24/adding-pointers-to-jquery-ui-tooltips/"/>
    <updated>2012-10-24T20:58:00-04:00</updated>
    <id>http://tjvantoll.com/2012/10/24/adding-pointers-to-jquery-ui-tooltips</id>
    <content type="html"><![CDATA[<p>The recent <a href="http://jqueryui.com/changelog/1.9.0/">jQuery UI 1.9 release</a> included a new <a href="http://jqueryui.com/tooltip/">tooltip plugin</a> that can be used to create tooltips much like the native tooltips the browser provides.  The difference is that jQuery UI's version are completely customizable.  As such I thought I'd show a quick example of how you can create a pointer from the tooltip to its associated field:</p>

<!--more-->




<iframe style="width: 100%; height: 350px;" src="http://jsfiddle.net/tj_vantoll/kyBwU/embedded/result,js,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>So how is this done?</p>

<ul>
<li>The <a href="http://api.jqueryui.com/tooltip/#option-position">position</a> option is used to place the tooltip appropriately around the textbox.  Importantly the <code>collision</code> property is set to <code>none</code>, since, if the tooltip were to be repositioned the arrow would be placed incorrectly.</li>
<li>The pointers themselves are created using using the <code>::after</code> and <code>::before</code> pseudo-elements.  For some more information on the technique and to see some other variations there's an excellent tutorial <a href="http://nicolasgallagher.com/pure-css-speech-bubbles/">here</a>.</li>
<li>Since the <code>::after</code> and <code>::before</code> pseudo-elements are used to create the pointers, IE &lt;= 8 users will not see them.  However, they'll simply see the default pointerless tooltip, no harm done.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Attribute Selector with Numeric Values]]></title>
    <link href="http://tjvantoll.com/2012/09/19/using-the-attribute-selector-with-numeric-values/"/>
    <updated>2012-09-19T20:42:00-04:00</updated>
    <id>http://tjvantoll.com/2012/09/19/using-the-attribute-selector-with-numeric-values</id>
    <content type="html"><![CDATA[<p>What color will the number 3 be in the example below?</p>

<p>``` html</p>





<table>
    <tr>
        <td colspan="2">1</td>
    </tr>
    <td>
        <td>2</td>
        <td>3</td>
    </tr>
</table>


<p>```</p>

<p>Turns out it will be red because the <code>td[colspan=2]</code> selector does not match it.  Why?</p>

<!--more-->


<h3>Attribute Selector</h3>

<p>Per the <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">CSS 3 specification</a> values used in attribute selectors must be either identifiers or strings.</p>

<p>String values are those enclosed by single or double quotes (e.g. the <code>2</code> in the selector <code>value="2"</code>).  If a value is not a string the browser attempts to resolve it as an identifier, which the spec defines as such:</p>

<p><blockquote><p>"In CSS, identifiers (including element names, classes, and IDs in selectors) can contain only the characters [a-zA-Z0-9] and ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_); they cannot start with a digit, two hyphens, or a hyphen followed by a digit."</p><footer><strong>CSS 2.1 Specification</strong> <cite><a href='http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier'>www.w3.org/TR/CSS2/&hellip;</a></cite></footer></blockquote></p>

<p>So why doesn't <code>colspan=2</code> work above?  The key part from the spec is that "<em>identifiers ... cannot start with a digit</em>".  Therefore, since <code>2</code> is not a string and does not qualify as an identifier, the browser ignores it.  This behavior is implemented consistently in all browsers.</p>

<p>The fix?  Simply wrap the value in quotes; both <code>td[colspan='2']</code> and <code>td[colspan="2"]</code> will match the cell in the example above.</p>

<h3>Numeric Attributes</h3>

<p>Attributes that generally only have numeric values include <code>colspan</code>, <code>rowspan</code>, <code>cellpadding</code>, <code>cellspacing</code>, <code>min</code>, <code>max</code>, and <code>step</code>.  When using any of these attributes in an attribute selector ensure that you wrap the value in quotes.</p>

<h3>JavaScript</h3>

<p>Most selector engines such as jQuery's sizzle will make the selector work regardless of whether the quotes are present.  <code>$('td[colspan=2]')</code> will return the cell in question in the example above.</p>

<p>However, if you are using native JavaScript though you will not be so lucky; <code>document.querySelectorAll('td[colspan=2]')</code> actually throws an error.</p>

<h3>Conclusion</h3>

<p>Attributes with numeric values need to have quotes around them when using them in CSS or JavaScript.  When in doubt use quotes around attribute values; it never hurts, and there are some strange edge cases where omitting the quotes leads to unexpected behavior.  If you're looking for a more detailed writeup on when quotes are ok to omit checkout <a href="http://mathiasbynens.be/notes/unquoted-attribute-values">Mathias Bynens' writeup on the topic</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Default Browser Handling of the CSS text-transform Property]]></title>
    <link href="http://tjvantoll.com/2012/07/10/default-browser-handling-of-the-css-text-transform-property/"/>
    <updated>2012-07-10T21:05:00-04:00</updated>
    <id>http://tjvantoll.com/2012/07/10/default-browser-handling-of-the-css-text-transform-property</id>
    <content type="html"><![CDATA[<p>The <code>text-transform</code> CSS property is most frequently used to uppercase and lowercase text.  According to the <a href="http://www.w3.org/TR/CSS21/text.html#caps-prop">CSS 2.1 specification</a> it is also an inherited property, meaning, when no value is specified on a given element, it should inherit its parent's <code>text-transform</code> value.</p>

<p>If no parents have a <code>text-transform</code> property defined, the element will take on the default value of <code>none</code>.</p>

<p>Where it gets interesting is that all browsers define default <code>text-transform</code> properties for certain form elements.  What does this mean?  <!--more-->Let's say you have the following markup:</p>

<p>``` html</p>





<div>
    <input type="text" value="foo" />
    <input type="submit" value="bar" />
</div>


<p>```</p>

<p>Both <code>foo</code> and <code>bar</code> will appear lowercased in all major browsers.  You can see this for yourself below:</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/DxANv/1/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This happens because all browser vendors include <code>text-transform: none</code> in their user agent stylesheet for those elements.  Therefore the <code>text-transform: uppercase</code> rule declared on the parent node is not inherited.</p>

<p>Unfortunately, but not surprisingly, browsers are not consistent about their default values for all elements.</p>

<h3>What the Browsers Do</h3>

<p>The following chart shows popular browser rendering engines and whether their user agent stylesheet includes <code>text-transform: none</code> for the listed elements.</p>

<table>
    <thead>
        <tr>
            <th>Rendering Engine</th>
            <th>input[type=submit]</th>
            <th>input[type=text]</th>
            <th>select</th>
            <th>textarea</th>
            <th>button</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Trident (Internet Explorer)</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td><strong>No</strong></td>
        </tr>
        <tr>
            <td>Gecko (Firefox)</td>
            <td>Yes</td>
            <td>Yes</td>
            <td><strong>No</strong></td>
            <td>Yes</td>
            <td><strong>No</strong></td>
        </tr>
        <tr>
            <td>WebKit (Chrome, Safari, etc...)</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
        </tr>
        <tr>
            <td>Presto (Opera)</td>
            <td>Yes</td>
            <td>Yes</td>
            <td><strong>No</strong></td>
            <td>Yes</td>
            <td><strong>No</strong></td>
        </tr>
    </tbody>
</table>


<p>The rendering engines that have a <strong>No</strong> for a given element declare no default for <code>text-transform</code>.  Therefore, those elements will inherit the value from their parent.</p>

<h3>What Does This Mean?</h3>

<p>The browser differences occur on the <code>button</code> and <code>select</code> elements.  Therefore, if you apply a <code>text-transform</code> value to a node, AND that node has children <code>button</code> / <code>select</code> nodes, AND you do not apply a <code>text-transform</code> value to the <code>button</code> or <code>select</code> nodes themselves... you'll get different behavior in different browsers.</p>

<p>For example:</p>

<p>``` html
&lt;!DOCTYPE html>
<html></p>

<pre><code>&lt;head&gt;
    &lt;style&gt;
        form { text-transform: uppercase; }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form&gt;
        &lt;!-- "foo" will be uppercase in IE, Firefox, and Opera --&gt;
        &lt;!-- "foo" will be lowercase in WebKit based browsers --&gt;
        &lt;button&gt;foo&lt;/button&gt;

        &lt;!-- "bar" will be uppercase in Firefox and Opera --&gt;
        &lt;!-- "bar" will be lowercase in IE and WebKit based browsers --&gt;
        &lt;select&gt;
            &lt;option&gt;bar&lt;/option&gt;
        &lt;/select&gt;
    &lt;/form&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<h3>Consistency</h3>

<p>You could make arguments as to whether the user agent stylesheets <em>should</em> be defaulting the <code>text-transform</code> of various form elements to <code>none</code>, but to most people all that matters is that the behavior is consistent.  It's easy enough to override the defaults if you don't like them.</p>

<p>Therefore to get consistent behavior you would <em>think</em> you would need to set the default value of <code>button</code> and <code>select</code> elements to either <code>none</code> or <code>inherit</code>.</p>

<p>``` css
/<em> Option 1 - Don't inherit values in all browsers </em>/
button, select { text-transform: none; }</p>

<p>/<em> Option 2 - Inherit values in all browsers </em>/
button, select { text-transform: inherit; }
```</p>

<p>But unfortunately for whatever reason Option 2 doesn't work on the <code>&lt;select&gt;</code> in IE &lt;= 7, Safari, and most interestingly, doesn't take effect in Chrome until you click on <code>&lt;select&gt;</code>.  You can verify this behavior for yourself below:</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/dUjXB/10/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Fortunately Option 1 does indeed produce the same behavior in IE6+, Firefox, Chrome, Safari, and Opera.  Therefore to normalize <code>text-transform</code> you need to include the following in your stylesheet.</p>

<p><code>css Cross Browser text-transform Goodness
button, select { text-transform: none; }
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ideal LESS Workflow with git]]></title>
    <link href="http://tjvantoll.com/2012/07/07/the-ideal-less-workflow-with-git/"/>
    <updated>2012-07-07T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/07/07/the-ideal-less-workflow-with-git</id>
    <content type="html"><![CDATA[<p>LESS is a CSS pre-processor written in JavaScript.  Unlike its main competitor SASS, it has the ability to run both on the client side via a simple <code>&lt;script&gt;</code> tag, as well as server-side in Node.js.  The fact that LESS files can be processed client side is advantageous for a number of reasons:</p>

<h4><strong>There are no dependencies.</strong></h4>

<p>To develop LESS files all you need is your browser.  SASS requires Ruby to be running on your system to generate the CSS files.</p>

<p>While some would argue that this isn't a big deal (Ruby is pre-installed on OS X for example), it can potentially put off beginners or those not familiar with the command line.  A lot of people that write CSS wear a designer hat more than a developer hat.  Even if <em>you</em> know what you're doing, if you're on a team with less technical people oftentimes the simplest approach will make everyone happy.</p>

<h4><strong>You can auto-reload changes to less files without reloading the browser and without external dependencies.</strong></h4>

<p>With LESS you can easily watch for changes by appending <code>#!watch</code> to the URL or by running <code>less.watch()</code> from the console.  There's no additional setup and no need to reload your browser, changes take effect automatically.</p>

<p>If you want files to be regenerated using SASS you must tell SASS which files to watch via the command line or use an app that does that for you.  If you want CSS changes to happen without reloading your browser you need to enlist the help of an app / extension such as <a href="http://livereload.com">LiveReload</a>.  While this works fine this is yet another dependency.</p>

<!--more-->


<h3>Production</h3>

<p>While the ease of use during development is great, you don't want visitors to your site to incur the cost of processing the LESS files client side in a production setting.  The easy way to accomplish this is to manually run <code>lessc</code> from the command line to convert all LESS files into CSS files, and then updating all of your .less paths in <code>&lt;link&gt;</code> tags to use .css paths.</p>

<p>This works, but the lazy programmer in you will be looking to automate this after doing this more than once.  If you're using Git for source control one way you can accomplish this is by running a commit hook to do the generation.</p>

<h3>Git Commit Hooks</h3>

<p><a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks">Git commit hooks</a> allow you to run scripts whenever a commit occurs.  A <code>pre-commit</code> hook allows you to run a script that can also optionally prevent the commit from occurring.  The <code>pre-commit</code> hook works well for generating CSS files from LESS files for a few reasons.</p>

<ul>
<li>Once the script is in place you no longer have to manually generate CSS files, it'll simply be done automatically when you commit changes to source control.</li>
<li>The script can be setup so that if <code>lessc</code> fails the commit will be rejected.  Therefore, LESS files with invalid syntax will be kept out of source control.</li>
</ul>


<p>To create a Git commit hook navigate into the <code>.git/hooks</code> directory of your repository.  This folder has a number of sample hooks that you can potentially use with a <code>.sample</code> suffix.  To create a <code>pre-commit</code> script that Git will run simply create an un-prefixed copy of <code>pre-commit.sample</code>.</p>

<p><code>bash
cd /MyProject/.git/hooks
cp pre-commit.sample pre-commit
</code></p>

<p>Once a <code>pre-commit</code> file exists in <code>.git/hooks</code>, Git will run it before every commit.</p>

<h3>The Script</h3>

<p>There are many ways to implement a script that generates CSS files from LESS files.  This is the <code>pre-commit</code> script that I use.</p>

<p>``` bash The script</p>

<h1>!/bin/sh</h1>

<h1>Pre-commit hook to generate .css files from .less files using lessc.</h1>

<h1>Script assumes .less files are in a directory named "less" and will</h1>

<h1>put the generated files in a sibling "css" directory.  The generated</h1>

<h1>CSS will also be compressed as part of lessc.</h1>

<p>#</p>

<h1>When .less files are deleted the script will delete the corresponding</h1>

<h1>.css files if they exist.</h1>

<p>#</p>

<h1>Example</h1>

<h1>-------</h1>

<p>#</p>

<h1>Before:       After:</h1>

<p>#</p>

<h1>foo/          foo/</h1>

<h1>less/         css/</h1>

<h1>a.less        a.css</h1>

<h1>bar/            less/</h1>

<h1>less/           a.less</h1>

<h1>b.less    bar/</h1>

<h1>css/</h1>

<h1>b.css</h1>

<h1>less</h1>

<h1>b.less</h1>

<p>#</p>

<h1>Loop over all files included in the commit.</h1>

<p>for file in $( exec git diff-index --cached --name-only HEAD )
do</p>

<h1>We only want to take action unless the file is a LESS file.</h1>

<p>  if [[ $file == <em>".less"</em> ]]; then</p>

<pre><code>lessFile=$file
</code></pre>

<h1>Find where the corresponding CSS file should be located</h1>

<h1>in the file system, in this case a sibling CSS directory.</h1>

<pre><code>cssFile="${lessFile/less\//css/}"
cssFile="${cssFile/.less/.css}"
</code></pre>

<h1>Determine the status of the file in the commit.</h1>

<h1>M = Modified, A = Added, D = deleted, R = renamed,</h1>

<h1>C = copied, U = Updated but unmerged</h1>

<pre><code>status=$( exec git status --porcelain $lessFile )
</code></pre>

<h1>If the file was deleted as part of the commit, delete the</h1>

<h1>corresponding CSS file.</h1>

<pre><code>if [[ $status == D* ]]; then
  if [ -e "$cssFile" ]; then
    echo "Removing $cssFile"
    git rm $cssFile 
  fi
else
</code></pre>

<h1>Otherwise we must generate the CSS file. First create a</h1>

<h1>CSS folder to place the file in.  The -p option for mdkir</h1>

<h1>tells it to create parent folders if necessary.</h1>

<pre><code>  baseDirectory=${lessFile/less\/*/}
  mkdir -p ${baseDirectory}css
</code></pre>

<h1>Log to the console that the CSS is being generated so the person</h1>

<h1>running the commit is aware.</h1>

<pre><code>  echo "Generating $cssFile from $lessFile"
</code></pre>

<h1>Run lessc to do the actual generation.  If lessc fails exit</h1>

<h1>with a code of 1 so that the commit is rejected.  The -x option</h1>

<h1>tells lessc to generate compressed CSS for production usage.</h1>

<pre><code>  if ! lessc -x $lessFile $cssFile; then
    exit 1
  fi
</code></pre>

<h1>Add the CSS file to the commit.</h1>

<pre><code>  git add $cssFile
fi
</code></pre>

<p>  fi
done
```</p>

<p>You could greatly simplify this script to simply run <code>lessc</code> on all .less files on every commit.  I go file by file because the script has to be run on a large code base where generating hundreds to thousands of CSS files on every commit isn't practical.  This script is also setup to create sibling <code>css</code> and <code>less</code> directories.  You could easily modify this to simply put the files in the same directory; I like them to be logically separated.</p>

<h3>Automating <code>&lt;link&gt;</code> File Paths</h3>

<p>As I said, the script I use assumes that there are sibling <code>css</code> and <code>less</code> directories.  To give a concrete example of this say I have the following file system structure.</p>

<pre><code>/MyProject
    /css
        * Generated files *
    index.html
    /js
        less.js
    /less
        a.less
        b.less
</code></pre>

<p>To include these files I use the following locally:</p>

<p>``` html Local Includes</p>

<!-- index.html -->


<p>&lt;!DOCTYPE html>
<html></p>

<pre><code>&lt;head&gt;
    &lt;link rel="stylesheet/less" href="less/a.less"&gt;
    &lt;link rel="stylesheet/less" href="less/b.less"&gt;
    &lt;script src="js/less.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>And the following in production:</p>

<p>``` html Production Includes</p>

<!-- index.html -->


<p>&lt;!DOCTYPE html>
<html></p>

<pre><code>&lt;head&gt;
    &lt;link rel="stylesheet" href="css/a.css"&gt;
    &lt;link rel="stylesheet" href="css/b.css"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>The best way to handle both development and production with minimal maintenance is to use some sort of server-side check so that you don't have to change your HTML whenever you release to production.  Here's an example of a PHP script that does this by detecting whether the host contains <code>localhost</code>.</p>

<p>``` html Making both imports work</p>

<!-- index.html -->


<p>&lt;!DOCTYPE html>
<html></p>

<pre><code>&lt;head&gt;
    &lt;? if (strpos($_SERVER['HTTP_HOST'], 'localhost')) { ?&gt;
        &lt;link rel="stylesheet/less" href="http://tjvantoll.com/less/a.less"&gt;
        &lt;link rel="stylesheet/less" href="http://tjvantoll.com/less/b.less"&gt;
        &lt;script src="http://tjvantoll.com/js/less.js"&gt;&lt;/script&gt;
    &lt; } else { ?&gt;
        &lt;link rel="stylesheet" href="http://tjvantoll.com/css/a.css"&gt;
        &lt;link rel="stylesheet" href="http://tjvantoll.com/css/b.css"&gt;
    &lt;? } ?&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<h3>Conclusion</h3>

<p>Using LESS client side is awfully convenient, but it shouldn't be done in a production setting.  If you use LESS a lot then this is something you'll want to automate in your workflow.  In my opinion using a git <code>pre-commit</code> hook is a clean way to accomplish this.  Feel free to use my script or alter it to your liking.  If you have any other ways you automate your LESS workflow I'd love to hear about it.  Let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browser CSS Parsing Discrepancies]]></title>
    <link href="http://tjvantoll.com/2012/06/10/browser-css-parsing-discrepancies/"/>
    <updated>2012-06-10T22:24:00-04:00</updated>
    <id>http://tjvantoll.com/2012/06/10/browser-css-parsing-discrepancies</id>
    <content type="html"><![CDATA[<p>Possibly the most frustrating thing that can happen during web development is when things look or behave differently in different browsers for no apparent reason.</p>

<p>One of the major features of HTML5 is a <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html">parsing algorithm</a> that specifies not only how to handle well formed markup, but also what to do with invalid HTML.</p>

<p>The <a href="http://www.w3.org/TR/CSS2/syndata.html#parsing-errors">CSS specification</a> actually does the same.  In fact, it goes into explicit detail for how to handle a wide variety of nonsense syntax that it might encounter.  For example...</p>

<!--more-->


<p><strong>Declarations with unkown properties should be ignored.</strong></p>

<p>``` css
h1 { color: red; foo: bar; }</p>

<p>/<em> foo is an unkown property so the browser should interpret this as... </em>/
h1 { color: red; }
```</p>

<p><strong>Illegal values should be ignored.</strong></p>

<p>``` css
h1 { float: 'foo'; }</p>

<p>/<em> foo is an invalid value for the float property and should be ignored </em>/
```</p>

<p>These are just a sampling of what is specified.  The above rules are well documented and consistenly followed by all browsers.  Unfortunately that is not the case as we get into more complicated scenarios.</p>

<h3>Malformed Strings in CSS</h3>

<p>Take a guess, what <em>should</em> happen with the following:</p>

<p>``` html</p>

<div data-number="one">one</div>


<div data-number="two">two</div>


<p>​</p>



<p>```
The relevant portion of the specification states that...</p>

<p><blockquote><p>User agents must close strings upon reaching the end of a line (i.e., before an unescaped line feed, carriage return or form feed character), but then drop the construct (declaration or rule) in which the string was found.</p><footer><strong>CSS Specification</strong> <cite><a href='http://www.w3.org/TR/CSS2/syndata.html#parsing-errors'>www.w3.org/TR/CSS2/&hellip;</a></cite></footer></blockquote></p>

<p>Let's take this one rule at a time.</p>

<pre><code>background: url("some-url);
</code></pre>

<p>Per the spec you would expect the <code>background</code> to be ignored because of the malformed string, and it is in all browsers I tested.</p>

<pre><code>color: red;
</code></pre>

<p>This is kind of in a gray area.  The spec says that the <em>construct in which the unclosed string was found</em> should be dropped, which makes it seem like this rule shouldn't be interpreted.   But what about subsequent rules that were encountered before a new line?  It seems like the browser could be smart enough to apply this rule.</p>

<pre><code>color: blue;
</code></pre>

<p>Per the spec you would expect this to be interpreted since a new line character occurred between the unclosed quote and this rule.</p>

<pre><code>border: 2px solid black;
</code></pre>

<p>Along the same lines you would also expect a border to be around both divs since by then normal parsing of the stylesheet should resume.</p>

<p>Here's what a sampling of browsers actually do.</p>

<table>
    <thead>
        <tr>
            <th>Browser</th>
            <th>Div one color</th>
            <th>Div two color</th>
            <th>Border around the divs</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Chrome 19</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr>
        <tr>
            <td>Safari 5.1.7</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr>        
        <tr>
            <td>Firefox 12</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>        
        <tr>
            <td>Opera 11.62</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Opera Mobile</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr> 
        <tr>
            <td>iOS 5</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr> 
        <tr>
            <td>Android 2+</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr> 
        <tr>
            <td>Internet Explorer 7</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Internet Explorer 8</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Internet Explorer 9</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Internet Explorer 10</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>        
    </tbody>
</table>


<p>You can see what your browser does here.</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/PHKLz/3/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3>Results</h3>

<p>WebKit based browsers are evaluating all rules after a semicolon is encountered and all other browsers stop in their tracks and don't evaluate any other rules.  The same results occur with some other common fat finger situations.</p>

<p>``` css
/<em> Notice the mix of single and double quote in the url property value. </em>/
[data-number='one'] { background: url("some_url'); color: red; }
[data-number='two'] { color: blue; }
/<em> In WebKit browsers the color: blue; will be evaluated, in others it will not be. </em>/</p>

<p>/<em> Same thing if there's an malfored selector (notice the missing single quote in the selector. </em>/
[data-number=one'] { color: red; }
[data-number='two'] { color: blue; }
/<em> Again in Webkit color: blue; will be evaluated, in others it will not be. </em>/
```</p>

<h3>What Could Possibly Go Wrong?</h3>

<p>Frankly, since this is an error situtation I don't think many developers would care what the browser does with this.  If the rules aren't evaluated it becomes pretty clear there's an issue and it becomes pretty easy to find and clean up the issue.  What is important to developers is that the results are consistent.  The danger here is if you make a quick fix to a CSS file, fat finger some quotes, and only test in WebKit, you could catastrophically break your styling in non-WebKit browsers.</p>

<h3>Avoiding Issues</h3>

<p>The obvious way to avoid running into issues is to test your code in all browsers.  However, with the number of browsers and devices there are to test on that's not always feasible, especially for trivial changes.</p>

<p>Modern editors with syntax highlighting can help you find malformed strings by creating an obvious syntax highlighting problem.  If yours doesn't you might want to consider switching to one that does.</p>

<p>Furthermore, tools like <a href="http://csslint.net/">CSS Lint</a> can help detect issues <a href="https://github.com/stubbornella/csslint/wiki/IDE-integration">via your editor / IDE</a> or at build time by <a href="https://github.com/stubbornella/csslint/wiki/Command-line-interface">incorporating them into a Node.js or Ant build process</a>.</p>

<h3>Conclusion</h3>

<p>While the CSS specification tries to standarize what to do with invalid CSS browsers still handle some situations differently.  Make sure your editor or build process can help detect silly typos, and attempt to test your code in a variety of browsers, even for trivial changes.</p>
]]></content>
  </entry>
  
</feed>
