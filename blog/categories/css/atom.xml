<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2012-06-10T16:42:37-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Browser CSS Parsing Discrepancies]]></title>
    <link href="http://tjvantoll.com/2012/06/10/browser-css-parsing-discrepancies/"/>
    <updated>2012-06-10T22:24:00-04:00</updated>
    <id>http://tjvantoll.com/2012/06/10/browser-css-parsing-discrepancies</id>
    <content type="html"><![CDATA[<p>Possibly the most frustrating thing that can happen during web development is when things look or behave differently in different browsers for no apparent reason.</p>

<p>One of the major features of HTML5 is a <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html">parsing algorithm</a> that specifies not only how to handle well formed markup, but also what to do with invalid HTML.</p>

<p>The <a href="http://www.w3.org/TR/CSS2/syndata.html#parsing-errors">CSS specification</a> actually does the same.  In fact, it goes into explicit detail for how to handle a wide variety of nonsense syntax that it might encounter.  For example...</p>

<!--more-->


<p><strong>Declarations with unkown properties should be ignored.</strong></p>

<p>``` css
h1 { color: red; foo: bar; }</p>

<p>/<em> foo is an unkown property so the browser should interpret this as... </em>/
h1 { color: red; }
```</p>

<p><strong>Illegal values should be ignored.</strong></p>

<p>``` css
h1 { float: 'foo'; }</p>

<p>/<em> foo is an invalid value for the float property and should be ignored </em>/
```</p>

<p>These are just a sampling of what is specified.  The above rules are well documented and consistenly followed by all browsers.  Unfortunately that is not the case as we get into more complicated scenarios.</p>

<h3>Malformed Strings in CSS</h3>

<p>Take a guess, what <em>should</em> happen with the following:</p>

<p>``` html</p>

<div data-number="one">one</div>


<div data-number="two">two</div>


<p>â€‹</p>



<p>```
The relevant portion of the specification states that...</p>

<p><blockquote><p>User agents must close strings upon reaching the end of a line (i.e., before an unescaped line feed, carriage return or form feed character), but then drop the construct (declaration or rule) in which the string was found.</p><footer><strong>CSS Specification</strong> <cite><a href='http://www.w3.org/TR/CSS2/syndata.html#parsing-errors'>www.w3.org/TR/CSS2/&hellip;</a></cite></footer></blockquote></p>

<p>Let's take this one rule at a time.</p>

<pre><code>background: url("some-url);
</code></pre>

<p>Per the spec you would expect the <code>background</code> to be ignored because of the malformed string, and it is in all browsers I tested.</p>

<pre><code>color: red;
</code></pre>

<p>This is kind of in a gray area.  The spec says that the <em>construct in which the unclosed string was found</em> should be dropped, but what about subsequent rules that were encountered before a new line?</p>

<pre><code>color: blue;
</code></pre>

<p>Per the spec you would expect this to be interpreted since a new line character occurred after the unclosed double quote.</p>

<pre><code>border: 2px solid black;
</code></pre>

<p>Along the same lines you would also expect a border to be around both divs since by then normal parsing of the stylesheet should resume.</p>

<p>Here's what a sampling of browsers actually do.</p>

<table>
    <thead>
        <tr>
            <th>Browser</th>
            <th>Div one color</th>
            <th>Div two color</th>
            <th>Border around the divs</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Chrome 19</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr>
        <tr>
            <td>Safari 5.1.7</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr>        
        <tr>
            <td>Firefox 12</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>        
        <tr>
            <td>Opera 11.62</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Opera Mobile</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr> 
        <tr>
            <td>iOS 5</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr> 
        <tr>
            <td>Android 2+</td>
            <td class="red">Red</td>
            <td class="blue">Blue</td>
            <td>Yes</td>
        </tr> 
        <tr>
            <td>Internet Explorer 7</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Internet Explorer 8</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Internet Explorer 9</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>
        <tr>
            <td>Internet Explorer 10</td>
            <td>Black</td>
            <td>Black</td>
            <td>No</td>
        </tr>        
    </tbody>
</table>


<p>You can see what your browser does here.</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/tj_vantoll/PHKLz/3/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3>Results</h3>

<p>WebKit based browsers are evaluating all rules after a semicolon is encountered and all other browsers stop in their tracks and don't evaluate any other rules.  The same results occur with some other common fat finger situations.</p>

<p>``` css
/<em> Notice the mix of single and double quote in the url property value. </em>/
[data-number='one'] { background: url("some_url'); color: red; }
[data-number='two'] { color: blue; }
/<em> In WebKit browsers the color: blue; will be evaluated, in others it will not be. </em>/</p>

<p>/<em> Same thing if there's an malfored selector (notice the missing single quote in the selector. </em>/
[data-number=one'] { color: red; }
[data-number='two'] { color: blue; }
/<em> Again in Webkit color: blue; will be evaluated, in others it will not be. </em>/
```</p>

<h3>What Could Possibly Go Wrong?</h3>

<p>Frankly, since this is an error situtation I don't think many developers would care what the browser does with this.  If the rules aren't evaluated it becomes pretty clear there's an issue and it becomes pretty easy to find and clean up the issue.  What is important to developers is that the results are consistent.  The danger here is if you make a quick fix to a CSS file, fat finger some quotes, and only test in WebKit, you could catastrophically break your styling in non-WebKit browsers.</p>

<h3>Avoiding Issues</h3>

<p>The obvious way to avoid running into issues is to test your code in all browsers.  However, with the amount of browsers, devices, etc... there are to test on that's not always feasible; especially for trivial changes.</p>

<p>Modern editors with syntax highlighting can help you find malformed strings by creating an obvious syntax highlighting problem.  If yours doesn't you might want to consider switching to one that does.</p>

<p>Furthermore, tools like <a href="http://csslint.net/">CSS Lint</a> can help detect issues <a href="https://github.com/stubbornella/csslint/wiki/IDE-integration">via your editor / IDE</a> or at build time by <a href="https://github.com/stubbornella/csslint/wiki/Command-line-interface">incorporating them into a Node.js or Ant build process</a>.</p>

<h3>Conclusion</h3>

<p>While the CSS specification tries to standarize what to do with invalid CSS browsers still handle some situations differently.  Make sure your editor or build process can help detect silly typos, and attempt to test your code in a variety of browsers, even for trivial changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Styling Disabled Form Fields]]></title>
    <link href="http://tjvantoll.com/2012/03/17/Styling-Disabled-Form-Fields/"/>
    <updated>2012-03-17T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/03/17/Styling-Disabled-Form-Fields</id>
    <content type="html"><![CDATA[<p>Form fields can be disabled by simply adding the <code>disabled</code> attribute.</p>

<p><code>html Simple Disabled Fields
&lt;input type="text" disabled /&gt;
&lt;textarea disabled&gt;&lt;/textarea&gt;
&lt;select disabled&gt;&lt;/select&gt;
</code></p>

<p>Disabled fields cannot be interacted with by the user; the browser will not allow the field to receive focus or be tabbed to.  For an intuitive UI it's important that disabled fields are clearly evident to the user.  Users are easily confused and frustrated when attempting to interact with fields that they are not able to.</p>

<p>To apply custom styling to disabled fields you can add CSS rules that target <code>input:disabled</code>, <code>select:disabled</code>, &amp; <code>textarea:disabled</code>. (Note: IE doesn't support the <a href="https://developer.mozilla.org/En/CSS/%3Adisabled">disabled pseduo class</a> until IE9, so you'll need to use <code>input[disabled]</code>, <code>select[disabled]</code>, &amp; <code>textarea[disabled]</code> <a href="https://developer.mozilla.org/en/CSS/Attribute_selectors">attribute selectors</a> if IE &lt; 9 support is important for you.  It'll work just the same.)</p>

<p>While you <i>can</i> provide custom disabled field styling, it's not generally a good idea.  All browsers come with default styling for these fields that attempt to mesh with native UI elements in the OS.  Also, users have a certain expectation for what disabled fields look like in their preferred web browser and it's best not to mess with that.</p>

<p>Unfortunately some browser's default styling is less than ideal.  <!--more-->To best show this I've created a <a href="http://jsfiddle.net/ygwnh/12/">test case</a> with the most common form elements and recorded a rendering of the test case in a large number of browser / OS combinations.  Since some of the styles are more evident when a the element is selected and/or has a value, I included both a grouping with no <code>selected</code> or <code>value</code> attributes, and another with those set.</p>

<h3>Markup</h3>

<p>Here's the markup I used for the test cases, some very basic form fields with the <code>disabled</code> attribute.</p>

<h4>No Value / Selected Attributes</h4>

<p>``` html Markup Used to Generate the Examples http://jsfiddle.net/ygwnh/12/</p>

<table>
    <thead>
        <tr>
            <th>Enabled</th>
            <th>Disabled</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><input type="text" /></td>
            <td><input type="text" disabled /></td>
        </tr>
        <tr>
            <td><input type="checkbox" /></td>
            <td><input type="checkbox" disabled /></td>
        </tr>
        <tr>
            <td><input type="radio" /></td>
            <td><input type="radio" disabled /></td>
        </tr>
        <tr>
            <td><select></select></td>
            <td><select disabled></select></td>
        </tr>
        <tr>
            <td><textarea></textarea></td>
            <td><textarea disabled></textarea></td>
        </tr>
    </tbody>
</table>


<p>```</p>

<h4>With Value / Selected Attributes</h4>

<p>``` html Markup Used to Generate the Examples http://jsfiddle.net/ygwnh/12/</p>

<table>
    <thead>
        <tr>
            <th>Enabled w/Value</th>
            <th>Disabled w/Value</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><input type="text" value="Value" /></td>
            <td><input type="text" disabled value="Value"></td>
        <tr>
            <td><input type="checkbox" checked /></td>
            <td><input type="checkbox" disabled checked /></td>
        </tr>
        <tr>
            <td><input type="radio" checked /></td>
            <td><input type="radio" disabled checked /></td>
        </tr>
        <tr>
            <td><select><option selected>Value</option></select></td>
            <td><select disabled><option selected>Value</option></select></td>
        </tr>
        <tr>
            <td><textarea>Value</textarea></td>
            <td><textarea disabled>Value</textarea></td>
        </tr>
    </tbody>
</table>


<p>  <br/>
```</p>

<h3>Results</h3>

<p>You can view <a href="/images/posts/2012-03-17/All.html">all the results on one page</a> or see individual ones listed below.</p>

<h4>Windows</h4>

<ul>
<li><a href="/images/posts/2012-03-17/IE6.png" title="IE6">IE6</a></li>
<li><a href="/images/posts/2012-03-17/IE7.png" title="IE7">IE7</a></li>
<li><a href="/images/posts/2012-03-17/IE8.png" title="IE8">IE8</a></li>
<li><a href="/images/posts/2012-03-17/IE9.png" title="IE9">IE9</a></li>
<li><a href="/images/posts/2012-03-17/IE10.png" title="IE10">IE10</a></li>
<li><a href="/images/posts/2012-03-17/Windows-Chrome-17.png" title="Windows - Chrome 17">Chrome 17</a></li>
<li><a href="/images/posts/2012-03-17/Windows-Safari-5.1.png" title="Windows - Safari 5.1">Safari 5.1</a></li>
<li><a href="/images/posts/2012-03-17/Windows-Firefox-10.png" title="Windows - Firefox 10">Firefox 10</a></li>
<li><a href="/images/posts/2012-03-17/Windows-Opera-11.61.png" title="Windows - Opera 11.61">Opera 11.61</a></li>
</ul>


<h4>OS X</h4>

<ul>
<li><a href="/images/posts/2012-03-17/OSX-Chrome-17.png" title="OSX - Chrome 17">Chrome 17</a></li>
<li><a href="/images/posts/2012-03-17/OSX-Safari-5.1.png" title="OSX - Safari 5.1">Safari 5.1</a></li>
<li><a href="/images/posts/2012-03-17/OSX-Firefox-11.png" title="OSX - Firefox 11">Firefox 11</a></li>
<li><a href="/images/posts/2012-03-17/OSX-Opera-11.61.png" title="OSX - Opera 11.61">Opera 11.61</a></li>
</ul>


<h4>Mobile</h4>

<ul>
<li><a href="/images/posts/2012-03-17/iOS-5.png" title="iOS 5">iOS 5</a></li>
<li><a href="/images/posts/2012-03-17/Android-2.3.png" title="Android 2.3">Android 2.3</a></li>
<li><a href="/images/posts/2012-03-17/Opera-Mobile.png" title="Opera Mobile">Opera Mobile</a></li>
</ul>


<h3>Findings</h3>

<p>In general browsers add some combination of <code>opacity</code>, a grayish <code>background-color</code>, and a grayish <code>color</code> to the element to create the disabled effect.  For the most part browsers do a pretty good job making it evident that the fields are disabled.</p>

<p>There are exceptions though.  One glaring issue is the display of disabled text inputs and textareas in IE &lt; 10; when no text is present it's impossible to tell whether the field is disabled.  In Windows, all non-IE browsers simply apply a <code>background-color</code> of <code>#EBEBE4</code> to all disabled elements.  Unfortunately, IE &lt; 10 doesn't do much of anything to designate text inputs and textareas as disabled other than change the color of the text, which, doesn't work out all that well when there's no text present.</p>

<h3>Normalizing IE</h3>

<p>To normalize the display of disabled fields in IE we need to be able to target IE &lt;= 9 with CSS.  Why?  We don't want to override the default styling whenever possible.  As mentioned earlier browsers apply different styling to attempt to match native UI elements.  If you blindly apply a background-color to all disabled elements, you'll do so in Windows, OS X, Linux, iOS, Android, etcâ€¦ as well as any future devices where it might look horrible, or worse, confuse the user.</p>

<p>So back to selecting IE &lt;= 9.  In my opinion the most elegant way to do this is use <a href="http://msdn.microsoft.com/en-us/library/ms537512.aspx">IE's conditional comments</a> to apply classes to the HTML node.  This approach was <a href="http://paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/">first proposed by Paul Irish in 2008</a> and is used in the <a href="http://html5boilerplate.com/">HTML5 boilerplate</a>.  There are many variations but in this case we only need to worry about IE &lt;= 9.</p>

<p>``` html Applying a Class to IE &lt;= 9</p>

<!--[if lte IE 9 ]> <html class="lte9"> <![endif]-->


<!--[if (gt IE 9)|!(IE)]><!-->


<p> <html class=""> <!--<![endif]-->
```</p>

<p>Then we can apply the <code>background-color</code> as such:</p>

<p>``` css Normalizing the Disabled Field Display for Windows
.lte9 input[type='text'][disabled], .lte9 textarea[disabled] {</p>

<pre><code>background-color: #EBEBE4;
</code></pre>

<p>}
```</p>

<p>Alternatively you could use IE's conditional comments to apply these rules directly:</p>

<p>``` html Using IE's Conditional Comments</p>

<!--[if lte IE 9 ]>
    <style>
        input[type='text'][disabled], textarea[disabled] {
            background-color: #EBEBE4;
        }
    </style>
<!--<![endif]-->


<p>```</p>

<p>Either of these approaches will normalize the display of disabled text inputs and textareas on Windows.</p>

<p><img src="/images/posts/2012-03-17/IE-Before-and-After.png" alt="IE Before and After" /> <!-- http://jsfiddle.net/vCdcr/show/ --></p>

<h3>Normalizing IE6</h3>

<p>The above solution will not affect the display of these elements in IE6 because it does not support CSS attribute selectors.  Therefore, if you're still supporting IE6 and the display of disabled fields is important to your UI you'll need some other sort of hook on the node.  For example a class will work:</p>

<p>``` html IE6 Disabled Field Markup</p>

<!--[if IE 6 ]> <html class="ie6"> <![endif]-->


<!--[if (gt IE 6)|!(IE)]><!-->


<p> <html class=""> <!--<![endif]--></p>

<p>/<em> â€¦ </em>/</p>

<p><input type="text" disabled class="disabled" />
<textarea disabled class="disabled">
```</p>

<p>Then you can apply the following CSS:</p>

<p>``` css IE6 Disabled Field Styling
.ie6 input.disabled, .ie6 textarea.disabled {</p>

<pre><code>background-color: #EBEBE4;
</code></pre>

<p>}
```</p>

<h3>Other Issues</h3>

<p>A number of browsers including all OS X browsers except Opera, Android, and iOS do a poor job making textareas appear disabled, in some cases even when text is present.  If your UI contains disabled textareas it's probably worth adding a little bit of opacity to compensate for browsers that don't make it very apparent that you cannot interact with them.</p>

<p>``` css Normalizing Textarea Disabling
textarea:disabled {</p>

<pre><code>opacity: 0.5;
</code></pre>

<p>}
```</p>

<p>The effect is subtle but can make a big difference in helping the user to recognize that the field is disabled, especially if multiple textareas are near each other.  Here's an example from Chrome 17 on OS X:</p>

<p><img src="/images/posts/2012-03-17/OSX-Before-and-After.png" alt="OSX Before and After" /> <!-- http://jsfiddle.net/JpNav/1/show/ --></p>

<h3>Summary</h3>

<p>Browsers have default styling for disabled fields that is usually pretty good at visually indicating that the field cannot be interacted with.  In situations where the browser default isn't ideal, custom styling can be applied.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IE7 Attribute Selector Bugs]]></title>
    <link href="http://tjvantoll.com/2012/03/08/IE7-Attribute-Selector-Bugs/"/>
    <updated>2012-03-08T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2012/03/08/IE7-Attribute-Selector-Bugs</id>
    <content type="html"><![CDATA[<p>The CSS attribute selector allows you to select HTML elements based on their attributes.  For example, take the following markup:</p>

<p>``` html Simple List</p>

<ul>
    <li id="item1"></li>  <!-- #1 -->
    <li id="item2"></li>  <!-- #2 -->
    <li></li>             <!-- #3 -->
</ul>


<p>```</p>

<!--more-->


<p>In a compliant browser, here are some selectors you can use to target these list items.</p>

<p><code>css Selectors to Target the List
li             /* Selects #1, #2, #3 */
li[id]         /* Selects #1, #2 */
li[id=item1]   /* Selects #1 */
li[id='item1'] /* Selects #1, single quotes are valid */
li[id="item2"] /* Selects #1, double quotes are valid too */
li[id^=item]   /* Selects #1, #2, ^ = starts with */
li[id$=1]      /* Selects #1, $ = ends with */
li[id*=item]   /* Selects #1, #2, * = contains */
</code></p>

<h3>Enter IE7</h3>

<p>This is all well and good in most all modern browsers.  Unfortunately IE7 is buggy when handling this selector.  For those of use that are still unlucky enough to be supporting it, I thought it would be nice to have some of these documented.</p>

<h3>DOM Attributes == HTML Attributes?</h3>

<p>Some DOM attributes have different names than the HTML attributes to avoid conflicts with JavaScript reserved words.  Specifically in this case, DOM nodes have <code>htmlFor</code> and <code>className</code> attributes to avoid JavaScript reserved words <code>for</code> and <code>class</code>.</p>

<p>``` html htmlFor and className
<label class="foo" for="name" id="nameLabel">Name:</label>
<input type="text" name="name" id="name" /></p>

<script>
    document.getElementById('nameLabel').for; //undefined
    document.getElementById('nameLabel').htmlFor //'name'
    document.getElementById('nameLabel').class //undefined
    document.getElementById('nameLabel').className //'foo'
</script>


<p>```</p>

<p>In IE8+ (and everywhere else for that matter) the following attribute selector will select the label:</p>

<p><code>css Standard Attribute Selector
label[for='name']
</code></p>

<p>In IE7 this won't work.  You'll need to use the incorrect <code>htmlFor</code> attribute:</p>

<p><code>css IE7 for Attribute Selector
label[htmlFor='name']
</code></p>

<p>So if you're still supporting IE7 you'll almost certainly want to include them together:</p>

<p><code>css Combined Selector
label[for='name'], label[htmlFor='name']
</code></p>

<p>Along the same lines, IE7 will incorrectly select attributes based on the className attribute:</p>

<p><code>css IE7 class Attribute Selector
label[className='name']
</code></p>

<p>Fortunately IE7 also supports selecting using <code>class</code>.</p>

<p><code>css class Attribute Selector
label[class='name']
</code></p>

<p>IE8 fixed both of these bugs and selecting for the attributes <code>htmlFor</code> and <code>className</code> no longer work.</p>

<h3>Empty Attributes</h3>

<p>It's impossible to target empty attributes via CSS in IE7.  As an example, let's say you apply a <a href="http://html5doctor.com/html5-custom-data-attributes/">custom HTML5 data attribute</a> to nodes at random throughout the DOM.  Let's say you want to select only the ones that have an empty value, for example the h3 below:</p>

<p>``` html Headings to Select</p>

<h1 data-state="foo">Top Heading<h1>
<h2 data-state="bar">Sub Heading<h2>
<h3 data-state="">Another Heading<h3>
```

You would write this selector and call it a day:

``` css Empty Attribute Selector
[data-state='']
```

Except it won't work in IE7.  There is simply no way to target empty attributes via CSS in IE7.  So how can you replicate this functionality?  For better or worse JavaScript is the only client side option to handle this.

[querySelectorAll](http://caniuse.com/queryselector) isn't supported until IE8, so you need a selector engine to target these nodes.  Here's how you can do it in jQuery:

``` javascript Selecting Nodes with Empty Attribute - jQuery
$('[data-state=""]');
```

If you're using [Dojo](http://dojotoolkit.org) yet another step is necessary.  For whatever reason runningâ€¦

``` javascript JavaScript Selecting Nodes with Empty Attribute - Dojo
dojo.query('[data-state=""]');
```

â€¦returns not only the nodes with empty attributes, but also all the nodes that don't have the attribute declared at all!  Furthermore, <code>dojo.query('[data-state]')</code> incorrectly doesn't return nodes that have the attribute with an empty value.  So you need the following approach to select the nodes in IE7.

``` javascript Functioning IE7 Approach
dojo.query('*').forEach(function(element) {
    if (dojo.hasAttr(element, 'data-state') && 
      dojo.attr(element, 'data-state') == '') {
        //Safe to finally apply your styling here.
    }
});
```

Note that when using any of the JavaScript based solutions it's recommended to leave the CSS in place.  Yes this is dual maintenance, but it avoids a potential [FOUC](http://en.wikipedia.org/wiki/FOUC).  Fortunately ALL of this nonsense is fixed in IE8.

### Descendant Selector Typos

Let's say you have the following markup.

``` html Sample HTML
<div data-state='active'>
    <p>Some text</p>
</div>
```

â€¦and you want to apply some styling to the paragraph, maybe something like this:

``` css Descendant Selector
div[data-state='active']p {
    color: red;
}
```

Notice how there's no space between the "]" and the "p", that's a syntax error, right?  Correctâ€¦ except in IE7!  IE7 will incorrectly parse this as if a space were there and change the color of the paragraph to red.

This was also fixed in IE8.

### Summary

We're actually really fortunate that the attribute selector is supported in IE7.  It's a very useful tool to have available and it can help solve a lot of real world issues.  And if you've dropped IE6 support they're finally safe to use.

While support is buggy, the attribute selector does work for the vast majority of use cases.  However, knowing to look out for these bugs can save hours of frustration.  Yet another reason for IE7 to fall off the face of the Earth.  Happy hacking.

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a 3D Picture Cube with CSS3]]></title>
    <link href="http://tjvantoll.com/2012/02/27/Making-a-3D-Picture-Cube-with-CSS3/"/>
    <updated>2012-02-27T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2012/02/27/Making-a-3D-Picture-Cube-with-CSS3</id>
    <content type="html"><![CDATA[<div class="warning">
    Your browser doesn't support CSS 3D transformations, therefore some of these demos might not work as intended.  Please try viewing this page in the latest version of Firefox, Safari, or an iOS device.
</div>


<p>Let's face it, the mere concept of doing something in 3D in the browser is pretty awesome.  For those of us that remember the good old days of font tags and spacer gifsâ€¦ well, let's just say we've come a long way.</p>

<p>CSS3 3D transforms were recently added in Firefox 10 and <a href="http://blogs.msdn.com/b/ie/archive/2011/09/13/ie10pp3.aspx">IE10's 3rd platform preview</a>.  They've been in Safari since v4, in iOS since v3.2, and they're also supported in Android's recent Ice Cream Sandwich release.  So a decent chunk of web users now have the capability to run 3D transitions (at the time of this writing <a href="http://caniuse.com/#feat=transforms3d">caniuse.com</a> has it at ~32%).</p>

<p>So I decided I wanted to start messing around with this.</p>

<!--more-->


<p><link href="http://tjvantoll.com/stylesheets/posts/2012-02-27.css" rel="stylesheet" />
Note: Google Chrome supports 3D transforms, but <a href="https://github.com/Modernizr/Modernizr/issues/240">Modernizr will report a false positive</a> if <a href="http://blog.chromium.org/2011/03/gpu-acceleration-old-drivers.html">Chrome has disabled GPU acceleration</a>.  So if you're using Chrome you may or may not see a warning at the top of the screen saying that the demos won't work (since I use Modernizr to detect whether to display that warning).  I've also found that if Chrome does disable hardware acceleration, some of the demos in this post are a bit choppy, and occasionally don't work.  That's one of the downsides with working something so new, all the kinks haven't been worked out quite yet.</p>

<h3>Getting Started</h3>

<p>There are a few resources that I would recommend for getting started.</p>

<ul>
<li><a href="http://24ways.org/2010/intro-to-css-3d-transforms">An Introduction to CSS 3D Transforms</a> by David DeSandro.  This is an excellent starting point to learn the syntax and to see some <a href="http://desandro.github.com/3dtransforms/examples/card-02-slide-flip.html">pretty</a> <a href="http://desandro.github.com/3dtransforms/examples/cube-02-show-sides.html">sweet</a> <a href="http://desandro.github.com/3dtransforms/examples/carousel-02-dynamic.html">demos</a>.</li>
<li><a href="http://www.paulrhayes.com/2010-09/3d-css-cube-ii-touch-gestures-click-and-drag/">CSS 3D cube with touch gestures, click and drag</a> by Paul Hayes.  Another excellent <a href="http://www.paulrhayes.com/experiments/cube-3d/touch.html">demo</a> of a 3D cube that supports the keyboard, touch gestures, and dragging.</li>
<li><a href="https://developer.mozilla.org/En/CSS/Using_CSS_transforms">Mozilla Developer Network's entry on CSS Transforms</a></li>
</ul>


<p>I decided that I wanted a way to show off pictures in the footer of this blog using 3D transforms.  The effect I decided on was having a cube with an image on all 6 sides that I could rotate through a JavaScript API.  More importantly, I wanted the solution to be something that other people could use and extend.</p>

<h3>Markup</h3>

<p>The markup I ended up using was very similar to the cube in <a href="http://desandro.github.com/3dtransforms/examples/cube-02-show-sides.html">David DeSandro's cube demo</a>.</p>

<p>``` html Basic Markup</p>

<div class="PictureCube-container">
    <div class="cube show-front">
        <figure class="front"><img src="1.jpg" /></figure>
        <figure class="back"><img src="2.jpg" /></figure>
        <figure class="right"><img src="3.jpg" /></figure>
        <figure class="left"><img src="4.jpg" /></figure>
        <figure class="top"><img src="5.jpg" /></figure>
        <figure class="bottom"><img src="6.jpg" /></figure>
    </div>
</div>


<p>```</p>

<h3>Styling</h3>

<p>I'm not going to go into the full details of how the styling to create the cubes works, those are best covered by the articles I linked to earlier, but I did want to give a high level overview of what's going on.  Here's a simplified version of the styles applied to each of the sides of the cube.</p>

<p>``` css Basic Styling
/<em> Vendor prefixes removed for readability </em>/
.cube .front {</p>

<pre><code>/* No X/Y rotation needed since the front is */
/* already facing forward. */
</code></pre>

<p>}
.cube .back {</p>

<pre><code>transform: rotateX( -180deg );
</code></pre>

<p>}
.cube .right {</p>

<pre><code>transform: rotateY( 90deg );
</code></pre>

<p>}
.cube .left {</p>

<pre><code>transform: rotateY( -90deg );
</code></pre>

<p>}
.cube .top {</p>

<pre><code>transform: rotateX( 90deg );
</code></pre>

<p>}
.cube .bottom {</p>

<pre><code>transform: rotateX( -90deg );
</code></pre>

<p>}
```</p>

<p>The front side doesn't need to be rotated since it's already facing the screen front and center, but all the other sides need to be rotated on either the X or Y axis to create the cube.  For example, the back side is rotated on the X axis -180 degrees so that it faces directly away from the screen.</p>

<p>Since this is hard to visualize in your head, here's an example of a box rotating from 0deg to -180deg on the X axis in slow motion.</p>

<div class="demo-container">
    <img id="demo-cube-1" class="demo-cube" src="http://tjvantoll.com/images/kids/2.jpg" />
</div>


<p>And here's one going from 0deg to 90deg on the Y axis.</p>

<div class="demo-container">
    <img id="demo-cube-2" class="demo-cube" src="http://tjvantoll.com/images/kids/1.jpg" />
</div>


<p>Although I won't get into how the Z axis is used here, it's perhaps the hardest to visualize so I thought I'd include an example of it as well.  In 3D world it's the axis that's going straight between you and your monitor.   Here's an image going from -50px to 50px on the Z axis.</p>

<div class="demo-container">
    <img id="demo-cube-3" class="demo-cube" src="http://tjvantoll.com/images/izzie/6.jpg" />
</div>


<h3>Rotating the Cube</h3>

<p>So the 6 sides themselves have now have been rotated to form the cube.  In order to show various sides of the cube to the user, the cube itself needs to be rotated to move the appropriate side to the front.  This will be done by applying classes to the cube, one for each side.</p>

<p>``` css Basic Classes for Rotation
/<em> Vendor prefixes removed for readability </em>/
.cube.show-front {</p>

<pre><code>/* No X/Y translation is necessary */
</code></pre>

<p>}
.cube.show-back {</p>

<pre><code>transform: rotateX( -180deg );
</code></pre>

<p>}
.cube.show-right {</p>

<pre><code>transform: rotateY( -90deg );
</code></pre>

<p>}
.cube.show-left {</p>

<pre><code>transform: rotateY( 90deg );
</code></pre>

<p>}
.cube.show-top {</p>

<pre><code>transform: rotateX( -90deg );
</code></pre>

<p>}
.cube.show-bottom {</p>

<pre><code>transform: rotateX( 90deg );
</code></pre>

<p>}
```</p>

<h3>Designing an API</h3>

<p>Now we have a cube but nothing to use to interact with it.  At the very least we need something to toggle the classes shown above to make the cube rotate.  Time to start designing a JavaScript API for the cube.</p>

<p>I started with a constructor function that takes the necessary information, a DOM node and an array of the URLs for the images to use on the cube.</p>

<p><code>javascript PictureCube Constructor
/**
 * @param node {DOMNode|string} The node to turn into the cube
 *             or the id attribute of the node
 * @param images {Array} An Array of 6 Strings containing the URLs
 *               of the images to place in the cube
 */
PictureCube = function( node, images ) { };
</code></p>

<p>For convenience's sake I allow the user to pass in either a String id attribute of a DOM node or the node itself.  A quick conversion internally will make it so I only have to deal with the node.</p>

<p><code>javascript Getting the Node
typeof node == 'string' ? document.getElementById(node) : node
</code></p>

<p>Next you need to be able to do things with the cube.  The things I wanted to do were the ability to go to a particular side, cycle through the sides at some interval, and the ability to clear that interval.</p>

<p>``` javascript Methods
/<em>*
 * @param slide {number} The number of the side to change the
 *              cube to.
 </em>/
PictureCube.prototype.goto = function(side) {}</p>

<p>/<em>*
 * @param interval {number} The number of milliseconds between each
 *                 image transition
 </em>/
PictureCube.prototype.cycle = function(interval) {};</p>

<p>PictureCube.prototype.clearCycle = function() {};
```</p>

<p>So to create the cube you call the constructor with the node you want the cube to be in and the images you want to be on the various sides of the cube.</p>

<p>``` javascript Instantiating a Cube
var myCube = new PictureCube(</p>

<pre><code>document.getElementById('cube-container'), 
['1.jpg', '2.jpg', '3.jpg', '4.jpg', '5.jpg', '6.jpg']
</code></pre>

<p>]);
```</p>

<p>Then you can simply call the methods provided.</p>

<p><code>javascript Calling the Available Methods
myCube.goto(2);
myCube.cycle(2000);
myCube.clearCycle();
</code></p>

<h3>What's with the prototype?</h3>

<p>The methods are added to the function's prototype so PictureCube can be extended.  As an example here's an AwesomeCube extension that inherits functionality from PictureCube, and adds on an additional awesome method.</p>

<p>``` javascript Extending PictureCube
AwesomeCube = function(node, images) {</p>

<pre><code>PictureCube.apply(this, [node, images]);
</code></pre>

<p>};
AwesomeCube.prototype = new PictureCube();
AwesomeCube.prototype.awesome = function() {</p>

<pre><code>//this.cube, this.images, this.goto, this.cycle
//and this.clearCycle are available to the new
//function.
</code></pre>

<p>};
```</p>

<p>Line 1 defines AwesomeCube's constructor function with the same parameters as PictureCube.  It then invokes PictureCube's constructor using <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply">function.apply</a>.  The apply function is defined in <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function#Methods">Function.prototype</a>, and essentially allows you to control what the value of <code>this</code> will be in the function being invoked.  This technique is actually <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply#Using_apply_to_chain_constructors">a common way of implementing Java-like super calls to chain constructors</a>.</p>

<p>If this syntax seems clunky to you, or you prefer a more classical inheritance model, there are plenty of "class" JS libraries available in various libraries, see <a href="http://www.sitepen.com/blog/2010/07/01/creating-and-enhancing-dojo-classes/">Dojo's</a> and <a href="http://mootools.net/docs/core/Class/Class">MooTools'</a> for examples.  In this case straight up JavaScript works just fine and I didn't want to add a dependency on a JS toolkit.</p>

<h3>Why isn't this a jQuery plugin?</h3>

<p>jQuery is great for normalizing browser differences so you don't need to worry about them.  But in this case, the list of browsers that support CSS3 3D transformations have sufficient standards support that I had no need for jQuery.  Therefore, writing this as a jQuery plugin would add an unnecessary dependency on jQuery.</p>

<p>Plus, jQuery plugins require some extra boilerplate to maintain state, which is necessary in this case.  <a href="http://blog.nemikor.com/2010/05/15/building-stateful-jquery-plugins/">Using jQuery UI's widget factory</a> would work great, and might be something I consider if this implementation becomes more complex in the future.  But for now didn't want to add dependencies.</p>

<h3>Limitations</h3>

<p>The current biggest limitation of the PictureCube implementation is that it has a hardcoded 100px height and 100px width.  Eventually I plan on moving these declarations from CSS to JS so that it can be adjusted on the fly.</p>

<h3>Putting it all Together</h3>

<p>PictureCube.js is available to be forked or used on Github - <a href="https://github.com/tjvantoll/PictureCube">https://github.com/tjvantoll/PictureCube</a>.  I'm planning on adding the ability to alter the height and width of the cube in a future update.  Please give it a shot and let me know what you think.</p>

<p>Here's a final cube for you to play with.  Happy hacking.</p>

<script>
    $.domReady(function(){
        window.playgroundCube = new PictureCube('playground-cube', [
            '/images/izzie/1.jpg',
            '/images/izzie/2.jpg',
            '/images/izzie/3.jpg',
            '/images/izzie/4.jpg',
            '/images/izzie/5.jpg',
            '/images/izzie/6.jpg'                                                                                   
        ]);
    });
</script>


<div id="playground">
    <div id="playground-cube"></div>
    
    <div class="form-row">
        <label for="goto">Go To:</label>
        <input type="text" size="2" maxlength="1" id="goto" />(1 - 6)
        <button onclick="playgroundCube.goto(parseInt(document.getElementById('goto').value, 10));">Go</button>
    </div>
    
    <div class="form-row">
        <label for="cycle">Cycle:</label>
        <input type="text" size="5" maxlength="5" id="cycle">(milliseconds)
        <button onclick="playgroundCube.cycle(parseInt(document.getElementById('cycle').value, 10));">Start Cycle</button>
        <button onclick="playgroundCube.clearCycle();">Stop Cycle</button>  
    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3 Color Animations]]></title>
    <link href="http://tjvantoll.com/2012/02/20/CSS3-Color-Animations/"/>
    <updated>2012-02-20T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2012/02/20/CSS3-Color-Animations</id>
    <content type="html"><![CDATA[<p>CSS3 animations allow you to alter the values of CSS properties over time.  They're now supported in Firefox 5+, Chrome, Safari 4+, iOS, Android 4+, and the upcoming IE10, therefore, using them in real production websites is possible.  One of the cool things you can do with them is change the color of an element using exclusively CSS.  Previously a technique like this was only possible using <a href="https://developer.mozilla.org/en/window.setInterval">JavaScript's setInterval function</a> to gradually change the appropriate property of the element. See <a href="http://jqueryui.com/demos/animate/">jQuery UI's animate demos</a> for a good example.</p>

<!--more-->


<h3>Getting Started</h3>

<p>Let's start with a basic example (note - Whether or not you see the animation depends on whether your browser supports CSS3 animations.  You can check at <a href="http://caniuse.com/css-animation">caniuse.com</a>.</p>

<iframe style="width: 100%; height: 120px;" src="http://jsfiddle.net/RfYMA/1/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3>Syntax</h3>

<p>Let's break this down one section at a time.
``` css Animation CSS
div {</p>

<pre><code>-webkit-animation: color_change 1s infinite alternate;
-moz-animation: color_change 1s infinite alternate;  
-ms-animation: color_change 1s infinite alternate;  
-o-animation: color_change 1s infinite alternate;
animation: color_change 1s infinite alternate;   
</code></pre>

<p>}
```</p>

<p>The <code>animation</code> property is how you define a <a href="https://developer.mozilla.org/en/CSS/CSS_animations">CSS3 animation</a>.  The <a href="https://developer.mozilla.org/en-US/">MDN</a> (Mozilla Developer Network) docs have extensive documentation on all the various sub properties available to configure the animation <a href="https://developer.mozilla.org/en/CSS/CSS_animations#Configuring_the_animation">here</a>.  In this example I'm settingâ€¦</p>

<ul>
<li><code><a href="https://developer.mozilla.org/en/CSS/animation-name">animation name</a></code>: <code>color_change</code> - This refers to a named @keyframes rule, which we'll get into in a minute.</li>
<li><code><a href="https://developer.mozilla.org/en/CSS/animation-duration">animation_duration</a></code>: <code>1s</code> - The animation should last 1 second.</li>
<li><code><a href="https://developer.mozilla.org/en/CSS/animation-iteration-count">animation_iteration_count</a></code>: <code>infinite</code> - The animation will cycle forever.</li>
<li><code><a href="https://developer.mozilla.org/en/CSS/animation-direction">animation_direction</a></code>: <code>alternate</code> - This will tell the animation to alternate, from start to end, then end to start, then start to end, and so on.  In this example it keeps the box from being jerky by quickly switching from red to blue.</li>
</ul>


<p>For readability you can also list the properties out individually.</p>

<p>``` css Animation broken out
/<em> Note: Prefixes omitted, see below </em>/
div {</p>

<pre><code>animation-name: color_change;
animation-duration: 1s;
animation-iteration-count: infinite;
animation-direction: alternate;
</code></pre>

<p>}
```</p>

<h3>Prefixes</h3>

<p>The vendor prefixes are necessary because CSS3 animations are still considered an experimental feature (the <a href="http://www.w3.org/TR/css3-animations/">spec</a> is still in working draft status.  However, the syntax is consistent across modern browsers, so you only have to copy and paste the code to add all the necessary prefixes.  Always include the un-prefixed property last to make your code future friendly to browsers that add un-prefixed support.  For an up to date list of what browsers support CSS3 animations and which prefixes to use check out the <a href="http://caniuse.com/css-animation">CSS animation page at caniuse.com</a>.</p>

<p>If you get sick of typing out all the vendor prefixes you're not alone.  <a href="http://leaverou.github.com/prefixfree/">-prefix-free</a> is a tool by <a href="http://lea.verou.me/">Lea Verou</a> that lets you write your CSS unprefixed.  A JavaScript file detects whether a browser prefix is necessary, which one to use, and applies it automatically.</p>

<p>Another option is <a href="http://prefixr.com/">Prefixr</a> by Jeffrey Way of <a href="http://net.tutsplus.com/">nettuts</a>.  It lets you copy and paste your code in, run it, and have the appropriate prefixes added automatically.</p>

<p>Browser prefixes have been been a hot topic lately after it was announced that IE, Firefox, and Opera are <a href="http://lists.w3.org/Archives/Public/www-style/2012Feb/0313.html">considering adopting support for -webkit prefixes</a>.  If you're curious a <a href="http://remysharp.com/2012/02/09/vendor-prefixes-about-to-go-south/">number</a> <a href="http://christianheilmann.com/2012/02/09/now-vendor-prefixes-have-become-a-problem-want-to-help-fix-it/">of</a> <a href="http://www.brucelawson.co.uk/2012/on-the-vendor-prefixes-problem/">others</a> have <a href="http://infrequently.org/2012/02/misdirection/">written</a> about this.</p>

<h3>Keyframes</h3>

<p>``` css Keyframe Declarations
@-webkit-keyframes color_change {</p>

<pre><code>from { background-color: blue; }
to { background-color: red; }
</code></pre>

<p>}
@-moz-keyframes color_change {</p>

<pre><code>from { background-color: blue; }
to { background-color: red; }
</code></pre>

<p>}
@-ms-keyframes color_change {</p>

<pre><code>from { background-color: blue; }
to { background-color: red; }
</code></pre>

<p>}
@-o-keyframes color_change {</p>

<pre><code>from { background-color: blue; }
to { background-color: red; }
</code></pre>

<p>}
@keyframes color_change {</p>

<pre><code>from { background-color: blue; }
to { background-color: red; }
</code></pre>

<p>}
```</p>

<p><a href="https://developer.mozilla.org/en/CSS/@keyframes">Keyframes</a> are a way of specifying a set of properties and their values at different states of an animation.  <code>@keyframes color_change</code> gives the @keyframes a name of <code>color_change</code>.  This provides the connection used on the animation property above.</p>

<p><code>css
from { background-color: blue; }
to { background-color: red; }
</code></p>

<p>This animation only has 2 steps, a start and an end.  Since such animations are quite common, the <a href="http://www.w3.org/TR/css3-animations/#keyframes-">spec</a> provides the keywords <code>from</code> and <code>to</code> for defining the state of properties at the beginning and end of the animation.  This could also have been written using percentages for the steps.</p>

<p><code>css
0% { background-color: blue; }
100% { background-color: red; }
</code></p>

<p>If the animation has more than 2 steps, they can be listed using multiple steps as such.</p>

<p><code>css
0% { background-color: blue; }
25% { background-color: orange; }
50% { background-color: yellow; }
75% { background-color: black; }
100% { background-color: red; }
</code></p>

<h3>Real World Example</h3>

<p>Since the first demo was rather contrived, I thought I'd provide an example of how you could use this technique in the real world.  On buttons, a common UI pattern is to provide the user with visual feedback that they're on the button by applying a subtle color change.  This is usually done by applying a different <code>background-color</code> on the hover pseudoclass of the button as such:</p>

<p>``` css
button {</p>

<pre><code>background-color: pink;
</code></pre>

<p>}
button:hover {</p>

<pre><code>background-color: hotpink;
</code></pre>

<p>}
```</p>

<p>To improve upon this, we can add a CSS 3 color animation to gradually make the color transition.  The following example shows each side by side:</p>

<iframe style="width: 100%; height: 250px" src="http://jsfiddle.net/PTfZD/3/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3>Falling Back Gracefully</h3>

<p>Since CSS3 animations are only present in modern browsers, there's a good chance a number of your users won't have them available.  Luckily, CSS3 animations fallback gracefully to browsers that don't support them.  If the browser doesn't know how to handle a CSS animation, it just ignores the CSS rules.  Therefore, make sure not to use CSS animations to perform functionality that is vital to your site or application, it should simply enhance the user experience.</p>

<p>In the button example above if the browser can't perform the animation, the animated button will simply fallback on the hover button's behavior.</p>

<p>``` css Color Animation with Fallback
button {</p>

<pre><code>background-color: pink;
</code></pre>

<p>}
button:hover {</p>

<pre><code>/* IE &lt;= 6 get no hover effect */
/* All browsers IE 7+ know how to handle this */
background-color: hotpink;

/* Browsers that support CSS animations get the animation, */
/* those that don't ignore this and move on. */
/* Note: I've omitted the vendor prefixes for simplicity. */
animation: color_change 1s;
</code></pre>

<p>}
```</p>

<h3>Detect Support and Polyfill</h3>

<p>If you have a CSS color animation that you absolutely must have work on all browsers back to IE6, you can do so by detecting support via <a href="http://modernizr.com">Modernizr</a>, and falling back to <a href="http://jqueryui.com/demos/animate/">jQuery UI's animation</a>.</p>

<p>``` javascript Fallback Behavior with jQuery UI
if (!Modernizr.cssanimation) {</p>

<pre><code>$('button').on('mouseover', function() {
    //jQuery UI doesn't support the hotpink keyword :(
    $(this).animate({ backgroundColor: '#FF69B4' }, 1000);
}).on('mouseout', function() {
    $(this).stop(true, true);
    $(this).css('backgroundColor', 'pink');
});            
</code></pre>

<p>}
```</p>

<p>Live example (this should work across all browsers):</p>

<iframe style="width: 100%; height: 160px" src="http://jsfiddle.net/tj_vantoll/2Yrpe/3/embedded/result,js,css,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If the jQuery UI approach already works cross browser why would you bother doing this with CSS?</p>

<ul>
<li>Certain desktop and mobile browsers can use hardware acceleration with CSS3 animations.  This usually results in the animation rendering smoother.</li>
<li>Users with JavaScript disabled will still see the animation.</li>
<li>If you're only using jQuery &amp; jQuery UI for this animation you can save yourself two HTTP requests by using <a href="http://www.modernizr.com/docs/#load">Modernizr's load function</a>.  This will first test whether the browser supports CSS animations, if it does nothing needs to be done, if it doesn't all scripts listed in the <code>nope</code> parameter will be loaded.</li>
</ul>


<p>``` javascript Conditionally Loading jQuery UI
Modernizr.load({</p>

<pre><code>test: Modernizr.cssanimation,
nope: ['jquery.js', 'jquery-ui']
</code></pre>

<p>});
```</p>

<h3>Summary</h3>

<p>CSS 3 color animations can be used in modern browsers today.  For most use cases no animations in unsupported browsers isn't a problem, and, if it is, <a href="http://jqueryui.com">jQuery UI</a> can be used to polyfill the functionality.</p>
]]></content>
  </entry>
  
</feed>
