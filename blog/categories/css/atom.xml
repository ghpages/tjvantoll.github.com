<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2013-01-25T22:57:36-05:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using the body Element as a Top Level Container - Is it Safe Yet?]]></title>
    <link href="http://tjvantoll.com/2013/01/05/is-it-safe-to-use-the-body-as-a-top-level-container-yet/"/>
    <updated>2013-01-05T14:21:00-05:00</updated>
    <id>http://tjvantoll.com/2013/01/05/is-it-safe-to-use-the-body-as-a-top-level-container-yet</id>
    <content type="html"><![CDATA[<p>View source on almost any web page and you'll likely see the following:</p>

<p>``` html Common HTML Template
<html></p>

<pre><code>&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
    &lt;div id="wrapper"&gt;
        &lt;!-- All the things --&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>The use of a wrapper or container <code>div</code> around the page is fairly universal.  It is commonly used to perform tasks such as centering a page's content or providing a shadow or border to frame it.  But, since the <code>body</code> element is a necessity in the markup, why can't it be styled directly instead?  Why is a wrapper <code>div</code> used?</p>

<p>Historically there have been a number of issues with using the <code>body</code> element as a top level container in old versions of Internet Explorers.  If you're supporting IE >= 8 you're good, but there are some things <a href="#now">you should be aware of</a>.</p>

<!--more-->


<h3>IE 5.5</h3>

<p>To get to the origins of the wrapper <code>div</code> let's go way back.  A pretty common practice is to center the top level container using <code>margin: 0 auto</code>, and this works fine in all browsers... back to IE 5.5.  IE 5.5 did not support <code>auto</code> margins so this approach did not work.</p>

<p>To center the top level container in IE 5.5 you had to make use of <code>text-align: center</code> as such:</p>

<p>``` css Centering the top level container in IE 5.5
body {</p>

<pre><code>text-align: center;
</code></pre>

<p>}</p>

<h1>wrapper {</h1>

<pre><code>width: 1000px;
text-align: left; /* counteract the declaration on body */
</code></pre>

<p>}
```</p>

<p><code>text-align: center</code> <em>should</em> only affect inline elements, but IE 5.5 incorrectly applied it to block elements as well.  (Note: The <code>text-align: center</code> bug was fixed in IE6 standards mode, but the behavior remained in Internet Explorer's quirks mode to this day.)</p>

<h3>IE6</h3>

<p>IE6 implemented <code>auto</code> margins, so <code>margin: 0 auto</code> was now safe to use on the <code>body</code>.  Additionally, IE6 fully supports adding a <code>width</code>, <code>padding</code>, <code>margin</code>, and <code>border</code> to the body element.  Take the following CSS:</p>

<p>``` css
body{</p>

<pre><code>width: 90%;
border: 2px solid red;
background-color: black;
color: white;
padding: 10px;
margin: 0 auto;
</code></pre>

<p>}
```</p>

<p>The layout renders the same in IE6 as it does in the latest version of Chrome (23 as of this writing).</p>

<div style="overflow: hidden;">
    <div style="float: left; width: 49%;">
        <h4>IE6</h4>
        <img title="Styling the body element in IE6" src="http://tjvantoll.com/images/posts/2013-01-05/IE6.png">
    </div>
    <div style="float: right; width: 49%;">
        <h4>Chrome</h4>
        <img title="Styling the body element in Chrome" src="http://tjvantoll.com/images/posts/2013-01-05/Chrome.png">
    </div>
</div>


<p>Believe it or not using the <code>body</code> element as a top level container is actually safe in IE6.</p>

<p><a name="zoom"></a></p>

<h3>IE7</h3>

<p>If there are no issues with IE6 why am I still writing?  IE7 introduced a feature new to Internet Explorer, zoom, and with it came a new bug.</p>

<p>When a <code>margin</code> or <code>width</code> is applied to the <code>body</code> and the user zooms, IE7 incorrectly treats the left edge of the <code>body</code> as the edge of the viewport.  This shift bumps content on the right hand side of the page outside of the screen.  The image below shows the result of a zoomed in window and styled <code>body</code> in IE7.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-01-05/IE7Zoom.png" title="Zooming in IE7" style="max-height: 400px;"></p>

<p>This issue is not present using a wrapper <code>div</code>.</p>

<h3>Beyond IE7</h3>

<p>In my testing beyond IE7 there are no major issues using the <code>body</code> element as a top level container.  There are however a few things to be aware of.</p>

<p><a name="now"></a></p>

<h3>Positioning</h3>

<p>Any absolutely positioned elements will be positioned relative to the viewport rather than the newly placed <code>body</code>.  To fix this set <code>position: relative</code> on the <code>body</code> as such:</p>

<p>``` css Positioning elements relative to the body rather than the viewport
body {</p>

<pre><code>margin: 0 auto;
width: 90%;
position: relative;
</code></pre>

<p>}
```</p>

<h3>Backgrounds</h3>

<p>Backgrounds applied to the <code>body</code> will take up whole page regardless of margins.  Consider the following:</p>

<p>``` css
body {</p>

<pre><code>background: black;
margin: 0 auto;
width: 200px;
</code></pre>

<p>}
```</p>

<p>Here, the background of the entire viewport will be black rather than a centered 200px block.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-01-05/background-before.png" title="background on a body element" style="max-height: 300px;"></p>

<p>Luckily, this can be worked around by applying a <code>background</code> on the <code>html</code> element.</p>

<p>``` css
html {</p>

<pre><code>background: white;
</code></pre>

<p>}
body {</p>

<pre><code>background: black;
margin: 0 auto;
width: 200px;
</code></pre>

<p>}
```</p>

<p>Which renders as expected:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-01-05/background-after.png" title="background on a body element with background on html element" style="max-height: 300px;"></p>

<h3>scrollHeight and scrollWidth</h3>

<p>In WebKit based browsers the <code>body</code>'s <a href="https://developer.mozilla.org/en-US/docs/DOM/element.scrollHeight">scrollHeight</a> and <a href="https://developer.mozilla.org/en-US/docs/DOM/element.scrollWidth">scrollWidth</a> properties are unaffected by declared <code>height</code> and <code>width</code> styles.  For example:</p>

<p>``` html scrollHeight and scrollWidth on the body element
<html></p>

<pre><code>&lt;head&gt;&lt;/head&gt;
&lt;body style="height: 200px; width: 200px;"&gt;
    &lt;script&gt;
        console.log(document.body.scrollHeight);
        console.log(document.body.scrollWidth);
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>This will log <code>200</code> for both in all modern browsers with the exception of WebKit based ones.  WebKit will return the height and width of the viewport.</p>

<p>While you are unlikely to run into this directly, you may use a library that does.  For example, this <a href="http://bugs.jqueryui.com/ticket/8940">causes an issue</a> trying to constrain <a href="http://jqueryui.com/draggable/">jQuery UI draggables</a> within the <code>body</code>.</p>

<h3>Is it Safe to Use Yet?</h3>

<p>The <a href="#zoom">zoom issue in IE7</a> is bad, but if you're no longer supporting IE7 it's safe to drop the wrapper <code>div</code> and style the <code>body</code> directly.</p>

<p>That being said, there's no harm in leaving a wrapper <code>div</code> in place.  So if you have any doubt stick with <code>&lt;div id="wrapper"&gt;&lt;/div&gt;</code>.</p>

<p>Know of any other bugs with styling the <code>body</code> element?  Let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Print Stylesheets: Now Significantly Easier in Chrome]]></title>
    <link href="http://tjvantoll.com/2012/12/12/debugging-print-stylesheets-now-significantly-easier-in-chrome/"/>
    <updated>2012-12-12T21:55:00-05:00</updated>
    <id>http://tjvantoll.com/2012/12/12/debugging-print-stylesheets-now-significantly-easier-in-chrome</id>
    <content type="html"><![CDATA[<p>Debugging print stylesheets has always been a bit of a pain.  The traditional way of doing so was to manually change the <code>media</code> attribute of all <code>link</code> tags from <code>print</code> to <code>screen</code> or <code>all</code> while testing.</p>

<p>``` html</p>

<!-- Before -->


<p><link rel="stylesheet" href="print.css" media="print" /></p>

<!-- After -->


<p><link rel="stylesheet" href="print.css" media="screen" />
```</p>

<p>The popular <a href="https://addons.mozilla.org/en-US/firefox/addon/web-developer/">Web Developer Add-on</a> for Firefox even has an option to do this for you automatically.</p>

<!--more-->


<p><img src="/images/posts/2012-12-12/Web_Developer.png" title="Web Developer Add-on" alt="Web Developer Add-on" /></p>

<p>Then something changed.</p>

<p>We found out that <a href="https://developers.google.com/speed/docs/best-practices/rtt">unnecessary HTTP requests are bad</a>.  We also found out that there are some <a href="http://www.phpied.com/5-years-later-print-css-still-sucks/">serious performance issues with print stylesheets</a>.</p>

<p>Therefore, following the lead of projects like the <a href="http://html5boilerplate.com/">HTML5 Boilerplate</a> we all switched to writing our print styles inline with the rest of our CSS.</p>

<p>``` css
@media print {</p>

<pre><code>body { font-size: larger; }
#ads, #junk { display: none; }
</code></pre>

<p>}
```</p>

<p>Inline print styles save HTTP requests and are easier to maintain, but they unfortunately make testing a bit harder.  They don't work with Firefox's Web Developer Add-on and a simple find and replace is now quite a bit harder.</p>

<h3>Good News!</h3>

<p>A means to emulate the <code>print</code> media type has <a href="https://plus.google.com/115133653231679625609/posts/MgpioU84JPe">just landed in Chrome Canary</a>.</p>

<p>To use it, first open up the settings by clicking on the gear in the bottom right corner of the DevTools:</p>

<p><img src="/images/posts/2012-12-12/DevTools_1.png" title="How to open the DevTools settings" alt="How to open the DevTools settings" /></p>

<p>Next, select the Overrides menu, check the "Emulate CSS media" checkbox, and select "print".</p>

<p><img src="/images/posts/2012-12-12/DevTools_2.png" title="How to emulate CSS media in Chrome's DevTools" alt="How to emulate CSS media in Chrome's DevTools" /></p>

<p>That's it!  This will apply both rules defined in external <code>media="print"</code> stylesheets as well as rules within inline <code>@media print {}</code> blocks.  For bonus points, combine this with an application like <a href="http://livereload.com/">LiveReload</a> that can apply CSS changes without refreshing the page and you have a robust means of developing and debugging print stylesheets.</p>

<p>This feature was added in version 25 of Chrome Canary so it hopefully will make it into Chrome stable around Chrome 27.  If you don't have Canary yet you should consider <a href="http://paulirish.com/2012/chrome-canary-for-developers/">installing it side by side</a> with the stable release.</p>

<h3>WON'T SOMEONE THINK ABOUT THE TREES</h3>

<p>Of course, the definitive way of testing print stylesheets is to physically print a web page on actual pieces of paper.  I've done this plenty of times.  And if you've read this far you likely have to.  Hopefully the next time you have to debug printing you can save a bit of paper.</p>

<p><img src="/images/posts/2012-12-12/trees.jpg" title="The less pages you print the more of my type get to live" alt="The less pages you print the more of my type get to live" />
<a href="http://www.flickr.com/photos/cransell/5119828609/" style="display: block; font-size: 0.8em;">Photo Credit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Cross Browser Scrollable &lt;tbody&gt;s - A CSS Only Approach]]></title>
    <link href="http://tjvantoll.com/2012/11/10/creating-cross-browser-scrollable-tbody/"/>
    <updated>2012-11-10T15:44:00-05:00</updated>
    <id>http://tjvantoll.com/2012/11/10/creating-cross-browser-scrollable-tbody</id>
    <content type="html"><![CDATA[<p>By default the <code>overflow</code> CSS property does not apply to table group elements (<code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code>, or <code>&lt;tfoot&gt;</code>).  <a href="https://developer.mozilla.org/en-US/docs/Firefox_4_for_developers#Miscellaneous_CSS_changes">As of Firefox 4</a> this behavior is consistent across all browser implementations.</p>

<p>Therefore, if you attempt to apply a CSS <code>height</code> and <code>overflow: scroll</code> to a <code>&lt;tbody&gt;</code> it will have no effect in modern browsers.  You can see this for yourself <a href="http://jsfiddle.net/tj_vantoll/vU494/">here</a>.</p>

<p>But having a scrolling table body with fixed headers is a useful UI element, so how do you work around this?</p>

<!--more-->


<h3>The Solution</h3>

<p>Here is my solution:</p>

<p><pre class="codepen" data-height="400" data-type="result" data-href="JEKIu" data-user="tjvantoll"><code></code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<h3>How does it work?</h3>

<p>The first step is to set the <code>&lt;tbody&gt;</code> to <code>display: block</code> so an <code>overflow</code> and <code>height</code> can be applied.  From there the rows in the <code>&lt;thead&gt;</code> need to be set to <code>position: relative</code> and <code>display: block</code> so that they'll sit on top of the now scrollable <code>&lt;tbody&gt;</code>.</p>

<p>That's really about it.</p>

<h3>Unfortunate Part #1: Old Internet Explorer</h3>

<p>When you set a <code>height</code> on a <code>&lt;tbody&gt;</code> Internet Explorer &lt; 10 applies that <code>height</code> to every table cell, which is of course wonderful.</p>

<p>My workaround for this is to conditionally create a wrapper <code>&lt;div&gt;</code>.  When it's present I give it the <code>height</code> and <code>overflow</code> and remove the <code>height</code> from the <code>&lt;tbody&gt;</code>.</p>

<p>``` html Wrap table for IE</p>



<!--[if lte IE 9]>
<div class="old_ie_wrapper">
<!--<![endif]-->


<pre><code>&lt;table&gt;
    &lt;!-- Contents of the table --&gt;
&lt;/table&gt;
</code></pre>

<!--[if lte IE 9]>
</div>
<!--<![endif]-->


<p>```</p>

<p>The headers will scroll with the table body, but the table will at least be usable.  You could also create <a href="http://paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/">conditional classes on the &lt;html&gt; tag</a> to handle this as well.</p>

<h3>Unfortunate Part #2: Widths</h3>

<p>Because the <code>&lt;thead&gt;</code> is relatively positioned each table cell needs an explicit <code>width</code>.</p>

<p><code>css
td:nth-child(1), th:nth-child(1) { width: 100px; }
td:nth-child(2), th:nth-child(2) { width: 100px; }
td:nth-child(3), th:nth-child(3) { width: 100px; }
</code></p>

<p>But unfortunately that is not enough.  When a scrollbar is present browsers allocate space for it, therefore, the <code>&lt;tbody&gt;</code> ends up having less space available than the <code>&lt;thead&gt;</code>.  Notice the slight misalignment this creates:</p>

<p><img src="/images/posts/2012-11-10/Alignment-Issue.png" title="Alignment issue with scroll bar" alt="Alignment issue with scroll bar" /></p>

<p>The only workaround I could come up with was to set a <code>min-width</code> on all columns except the last one.</p>

<p><code>css
td:nth-child(1), th:nth-child(1) { min-width: 100px; }
td:nth-child(2), th:nth-child(2) { min-width: 100px; }
td:nth-child(3), th:nth-child(3) { width: 100px; }
</code></p>

<h3>The Good</h3>

<p>Despite these issues the solution does work in all browsers back to IE6 with no JavaScript dependency.</p>

<p>The markup to create the table is simple and semantic.  I've seen workarounds for this issue that use <code>&lt;div&gt;</code>s instead of <code>&lt;table&gt;</code>s or multiple aligned <code>&lt;table&gt;</code>s and those always felt dirty to me.</p>

<p>The code is free to use and do whatever you want with it.  If you have any suggestions for improvements or find any issues please let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Polished Vertical Tabs Interaction with jQuery UI]]></title>
    <link href="http://tjvantoll.com/2012/11/08/creating-a-polished-vertical-tabs-interaction-with-jquery-ui/"/>
    <updated>2012-11-08T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2012/11/08/creating-a-polished-vertical-tabs-interaction-with-jquery-ui</id>
    <content type="html"><![CDATA[<p>The <a href="http://jqueryui.com/tabs/">jQuery UI tabs widget</a> provides a clean way to implement a tabular UI.  Furthermore, the markup used gives you ample hooks to make the tabs visually into what you want them to be.  The docs provide a <a href="http://jqueryui.com/tabs/#vertical">simple demo</a> of how you can give the tabs a vertical orientation, but I thought I'd show how you can use what the framework provides to create something a bit more polished.</p>

<!--more-->


<p>The following CSS will vertically arrange the tabs:</p>

<p>``` css
.ui-tabs.ui-tabs-vertical {</p>

<pre><code>padding: 0;
width: 42em;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-widget-header {</p>

<pre><code>border: none;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav {</p>

<pre><code>float: left;
width: 10em;
background: #CCC;
border-radius: 4px 0 0 4px;
border-right: 1px solid gray;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav li {</p>

<pre><code>clear: left;
width: 100%;
margin: 0.2em 0;
border: 1px solid gray;
border-width: 1px 0 1px 1px;
border-radius: 4px 0 0 4px;
overflow: hidden;
position: relative;
right: -2px;
z-index: 2;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav li a {</p>

<pre><code>display: block;
width: 100%;
padding: 0.6em 1em;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav li a:hover {</p>

<pre><code>cursor: pointer;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav li.ui-tabs-active {</p>

<pre><code>margin-bottom: 0.2em;
padding-bottom: 0;
border-right: 1px solid white;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav li:last-child {</p>

<pre><code>margin-bottom: 10px;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-panel {</p>

<pre><code>float: left;
width: 28em;
border-left: 1px solid gray;
border-radius: 0;
position: relative;
left: -1px;
</code></pre>

<p>}
```</p>

<p>It only relies on a class of <code>ui-tabs-vertical</code> being applied to the elements the <code>tabs</code> widget is created on.</p>

<p><code>javascript
$('#tabs').tabs().addClass('ui-tabs-vertical');
</code></p>

<p>And here's the result:</p>

<div class="code_example">
    <h6>
        Demo - jQuery UI Vertical Tabs
        <a href="http://tjvantoll.com/demos/2012-11-08/verticalTabs.html" target="_blank">Open in New Window</a>
    </h6>
    <iframe style="width: 100%; height: 265px;" frameborder="0" src="http://tjvantoll.com/demos/2012-11-08/verticalTabs.html"></iframe>
</div>


<p>Feel free to use this or modify it to your liking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Pointers to jQuery UI Tooltips]]></title>
    <link href="http://tjvantoll.com/2012/10/24/adding-pointers-to-jquery-ui-tooltips/"/>
    <updated>2012-10-24T20:58:00-04:00</updated>
    <id>http://tjvantoll.com/2012/10/24/adding-pointers-to-jquery-ui-tooltips</id>
    <content type="html"><![CDATA[<p>The recent <a href="http://jqueryui.com/changelog/1.9.0/">jQuery UI 1.9 release</a> included a new <a href="http://jqueryui.com/tooltip/">tooltip plugin</a> that can be used to create tooltips much like the native tooltips the browser provides.  The difference is that jQuery UI's version are completely customizable.  As such I thought I'd show a quick example of how you can create a pointer from the tooltip to its associated field:</p>

<!--more-->




<iframe style="width: 100%; height: 350px;" src="http://jsfiddle.net/tj_vantoll/kyBwU/embedded/result,js,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>So how is this done?</p>

<ul>
<li>The <a href="http://api.jqueryui.com/tooltip/#option-position">position</a> option is used to place the tooltip appropriately around the textbox.  Importantly the <code>collision</code> property is set to <code>none</code>, since, if the tooltip were to be repositioned the arrow would be placed incorrectly.</li>
<li>The pointers themselves are created using using the <code>::after</code> and <code>::before</code> pseudo-elements.  For some more information on the technique and to see some other variations there's an excellent tutorial <a href="http://nicolasgallagher.com/pure-css-speech-bubbles/">here</a>.</li>
<li>Since the <code>::after</code> and <code>::before</code> pseudo-elements are used to create the pointers, IE &lt;= 8 users will not see them.  However, they'll simply see the default pointerless tooltip, no harm done.</li>
</ul>

]]></content>
  </entry>
  
</feed>
