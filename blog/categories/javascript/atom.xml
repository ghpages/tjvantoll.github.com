<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2012-08-30T23:12:21-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTML5 Form Validation - Start Using it in Production Applications]]></title>
    <link href="http://tjvantoll.com/2012/08/30/html5-form-validation-start-using-it-in-production-applications/"/>
    <updated>2012-08-30T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/08/30/html5-form-validation-start-using-it-in-production-applications</id>
    <content type="html"><![CDATA[<p>Forms suck, yet, they make or break the most crucial online transactions.  Building web forms sucks as well; the APIs and lack of customizability has confused and frustrated people for years.  As a byproduct an abundance of horribly unusable forms have been created for everyone to suffer through.</p>

<p>Therefore <em>anything</em> that makes this process easier should be greeted with joy and enthusiasm.</p>

<p>HTML5 does just this by including a built in <a href="https://developer.mozilla.org/en-US/docs/HTML/Forms_in_HTML#Constraint_Validation_API">client side form validation mechanism</a> designed to make implementing client side validation powerful, seamless, and most importantly - easy to implement.</p>

<p>Great!  Despite this, HTML5 form validation is a topic relegated to presentations and demos; I personally have yet to fill out a web form in the wild that actually makes use of it.</p>

<p>Why?</p>

<!--more-->


<h3>Browser Support</h3>

<p>One reason people avoid HTML5 form validation is lack (or perceived lack) of browser support for the new APIs.  However the <a href="http://caniuse.com/#feat=form-validation">list of supported browsers</a> now includes the latest version of every major browser, including:</p>

<ul>
<li>IE 10</li>
<li>Firefox 4+</li>
<li>Chrome 10+</li>
<li>Safari 5+</li>
<li>Opera 10+</li>
<li>Opera Mobile</li>
<li>Chrome for Android</li>
<li>Firefox for Android</li>
</ul>


<h3>What to do in unsupported browsers?</h3>

<p>This is <em>the</em> problem.  Despite browser support being relatively good, for most sites there are still going to be a substantial amount of users with browsers that simply do not support the new APIs.  Therefore, if you are intending to support these users you have to start forking your code to support both browsers with native support and browsers without it.</p>

<p>While this can absolutely be done, it's time consuming and a bit of a nuisance.  It's faster and easier to simply ditch the native validation and use your own.  In this case you don't have to worry about multiple code paths; every user in every browser will hit the same codepath and get the same experience.</p>

<h3>What if we did nothing?</h3>

<p>But what if we took a new approach to this problem - simply don't do client side validation in unsupported browsers, at all.  This is advantageous for a number of reasons.</p>

<p>1) <strong>No dual maintenance</strong>.  One thing that has always bothered me about doing validation on both the client and server side is that you're validating the #1 principle of software development - <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself"><strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself</a>.</p>

<p>2) <strong>No dependencies</strong>.  If you only use native browser APIs to provide client side validation you don't have to worry about maintaining plugin or library dependencies that might not be maintained.</p>

<p>3) <strong>Faster and easier</strong>.  The browser APIs are simple and easy to use.  Want to make a field required?  <a href="http://wufoo.com/html5/attributes/09-required.html">Add the <code>required</code> attribute</a>.  Want to make a field only accept email address?  <a href="http://wufoo.com/html5/types/1-email.html">Add <code>type=email</code> to your <code>&lt;input&gt;</code> field</a>.</p>

<p>4) <strong>Future Friendly</strong>.  Although currently a number of older browsers (namely IE &lt;= 9) do not support the new APIs, eventually they all will.  Therefore, eventually all users will hit the client side validation as intended.</p>

<h3>But, you can't just not validate data... right?</h3>

<p>Of course you have to validate client submitted data, but you already need to be doing that on the server side anyways.  What this approach requires you to do is simply return formatted error messages from your server side processing and <a href="http://uxdesign.smashingmagazine.com/2011/11/08/extensive-guide-web-form-usability/">display them in a usability friendly way</a>.  You're likely doing that already.</p>

<h3>What About Polyfills?</h3>

<p><a href="http://remysharp.com/2010/10/08/what-is-a-polyfill/">Polyfills</a> are great and a number of <a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills">HTML5 form validation polyfills</a> exist.  My problem with polyfills in this case is that they add a dependency that I believe is unnecessary.</p>

<h3>Conclusion</h3>

<p>HTML5 provides native solutions to validating client side data and most all modern browsers support it.  Yet, most people are still relying on the JavaScript hacks we've been using for well over a decade now.</p>

<p>It's time.  Come to the dark side.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Analytics - Excluding Your Own Visits in Development and Production]]></title>
    <link href="http://tjvantoll.com/2012/08/28/google-analytics-excluding-visits-in-development-and-production/"/>
    <updated>2012-08-28T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/08/28/google-analytics-excluding-visits-in-development-and-production</id>
    <content type="html"><![CDATA[<p>Googling how to exclude your own <a href="http://www.google.com/analytics/">Google Analytics</a> traffic returns a plethora of results, however, nearly all of them advocate 1 of 2 approaches:</p>

<ul>
<li>Creating an IP filter in Google Analytics itself <a href="http://support.google.com/analytics/bin/answer.py?hl=en&amp;answer=1034840&amp;rd=1">(example)</a>.</li>
<li>Creating a page that sets a cookie which tells Google Analytics to exclude the traffic <a href="http://webmasters.stackexchange.com/questions/15552/how-do-you-exclude-yourself-from-google-analytics-on-your-website-using-cookies">(example)</a>.</li>
</ul>


<h3>Problems</h3>

<p>These approaches are silly in my opinion.  IP addresses change.  In fact, most ISPs change subscriber's IP addresses quite regularly.  Furthermore, most people visit their site on a wide variety of devices in a wide variety of places.  Maintaining a list of IP addresses in Google Analytics would be a nightmare.</p>

<p>The cookie approach works, but it is a pain to have to create and maintain the page that sets the cookie.  It's also problematic because verifying whether the cookie is actually active is difficult.  Do you know where your browser stores your cookies and how to access them?  How about your smart phone?  Because of this you end up constantly having to create the cookie before accessing the site, which is a nuisance.</p>

<h3>JavaScript</h3>

<p>Both these approaches seem especially silly considering how easy it is to simply accomplish this with JavaScript.  You can simply check for the exclusion criteria before including the Google Analytics code snippet.</p>

<!--more-->


<h3>Excluding localhost Traffic</h3>

<p>If you test your site on a local server you likely don't want that traffic being logged.  Assuming that your local server is using <code>localhost</code> as the hostname the following will exclude the traffic.</p>

<p>``` javascript Excluding localhost Traffic</p>

<script>
    if (window.location.host != 'localhost') {
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-12345678-1']);
        _gaq.push(['_trackPageview']);

        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
    }
</script>


<p>```</p>

<h3>Excluding Production Traffic</h3>

<p>While the above works great during development it won't help you when you're accessing your site on its live production server.  For that I would suggest using a request parameter.</p>

<p>For example if your site is <code>http://mysite.com</code> then you could visit <code>http://mysite.com?analytics=off</code> to exclude the logging.  The following script makes it so that any page view with the appropriate <code>analytics=off</code> request parameter is not logged.</p>

<p>``` javascript Excluding Production Traffic via a Request Parameter</p>

<script>
    var useAnalytics = true;

    try {
        //Turn off analytics if 'analytics=off' is included as a request parameter.
        var parameters = window.location.search.split('&');
        if (parameters[0]) {
            parameters[0] = parameters[0].replace('?', '');
        }
        for (var i = 0; i < parameters.length; i++) {
            var values = parameters[i].split('=');
            if (values[0] == 'analytics' && values[1] == 'off') {
                useAnalytics = false;
            }
        }
    } catch(e) {
        //Just in case something goes wrong...
        useAnalytics = true;
    }

    if (useAnalytics) {
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-12345678-1']);
        _gaq.push(['_trackPageview']);

        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
    }
</script>


<p>```</p>

<p>With this approach you could simply create a bookmark with the request parameter in the URL and use that to access the site.</p>

<p>Furthermore, it would be easy to add on code to <a href="https://developer.mozilla.org/en-US/docs/DOM/document.cookie">set a cookie</a> or utilize <a href="https://developer.mozilla.org/en-US/docs/DOM/Storage#localStorage">localStorage</a> to save the preference so you don't have to always include the request parameter.</p>

<h3>Combining the Approaches</h3>

<p>In case you want to include both of these here's a code snippet that makes it so that both <code>localhost</code> traffic and pages with a <code>analytics=off</code> request parameter are excluded.</p>

<p>``` javascript The Final Exclusion Script</p>

<script>
    var useAnalytics = true;

    try {
        //Turn off analytics if 'analytics=off' is included as a request parameter.
        var parameters = window.location.search.split('&');
        if (parameters[0]) {
            parameters[0] = parameters[0].replace('?', '');
        }
        for (var i = 0; i < parameters.length; i++) {
            var values = parameters[i].split('=');
            if (values[0] == 'analytics' && values[1] == 'off') {
                useAnalytics = false;
            }
        }

        //Turn off analytics if 'localhost' is the host
        if (window.location.host == 'localhost') {
            useAnalytics = false;
        }
    } catch(e) {
        //Just in case something goes wrong...
        useAnalytics = true;
    }

    if (useAnalytics) {
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-29179796-1']);
        _gaq.push(['_trackPageview']);

        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
    }
</script>


<p>```</p>

<p>If you have any other recommendations for how to exclude Google Analytics traffic let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging Test Failures in a PhantomJS QUnit Runner]]></title>
    <link href="http://tjvantoll.com/2012/08/22/logging-test-failures-in-a-phantomjs-qunit-runner/"/>
    <updated>2012-08-22T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/08/22/logging-test-failures-in-a-phantomjs-qunit-runner</id>
    <content type="html"><![CDATA[<p><a href="http://phantomjs.com">PhantomJS</a> provides an easy means of automating <a href="http://qunitjs.com">QUnit</a> tests; it even provides a <a href="https://github.com/ariya/phantomjs/blob/master/examples/run-qunit.js">test runner</a> that you can simply copy into your project to run them.</p>

<p>The output of said runner displays the number of tests ran and the number that passed.  For example, here's an example of the output when I use the default runner on jQuery UI's spinner test suite:</p>

<p><code>text PhantomJS + QUnit Run Output
tj-cpu:spinner tj$ phantomjs run-qunit.js spinner.html
Tests completed in 492 milliseconds
489 tests of 489 passed, 0 failed.
'waitFor()' finished in 587ms.
</code></p>

<p>Which is great, but if something fails you only get the following:</p>

<p><code>text PhantomJS + QUnit Run Output with Failures
tj-cpu:myproject tj$ phantomjs run-qunit.js spinner.html
'waitFor()' finished in 630ms.
Tests completed in 535 milliseconds.
486 tests of 489 passed, 3 failed.
</code></p>

<p>The provided runner doesn't provide any additional information about the tests that failed.  Luckily PhantomJS and QUnit make it trivial to customize the output to meet your needs.</p>

<!--more-->


<h3>Logging</h3>

<p>PhantomJS's <a href="http://code.google.com/p/phantomjs/wiki/Interface#onConsoleMessage">page.onConsoleMessage</a> callback can be used to redirect the browser's JavaScript console logging.  The provided test runner uses this callback to redirect the output to the command line instead of the headless browser (where you would never see it).</p>

<p>```javascript Snippet from Default run-qunit.js
// Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
page.onConsoleMessage = function(msg) {</p>

<pre><code>console.log(msg);
</code></pre>

<p>};
```</p>

<p>Meaning, when running QUnit tests via PhantomJS, the output of any <code>console.log</code> statements will appear on the command line.</p>

<h3>QUnit</h3>

<p>QUnit provides a <a href="http://api.qunitjs.com/">comprehensive API</a> including <a href="http://api.qunitjs.com/category/callbacks/">callback hooks</a> for common tasks such as tests starting and finishing.  This is perfect for logging information about the tests themselves.</p>

<p>For example you could use the following to log the associated message for every test that fails:</p>

<p>``` javascript Logging Each Test Failure with QUnit
QUnit.log(function(details) {</p>

<pre><code>if (!details.result) {
    console.log(details.message);
}
</code></pre>

<p>});
```</p>

<p>If we apply this our failing test suite we now get the following:</p>

<p><code>text
tj-mac:spinner tj3$ phantomjs run-qunit.js spinner.html
min from markup
stop from options
blur after many keys
'waitFor()' finished in 579ms.
Tests completed in 483 milliseconds.
486 tests of 489 passed, 3 failed.
</code></p>

<p>Better, but still not terribly useful.  In order to provide a useful report of failed tests you need to combine more of QUnit's API callbacks with some basic text formatting.  Here's a more comprehensive example:</p>

<p>``` javascript QUnit Test Results with a Formatted Display of Failed Tests
(function() {</p>

<pre><code>var module = '', 
    test = '',
    lastModuleLogged = '',
    lastTestLogged = '',
    failuresOnCurrentTest = 0,
    failureFound = false;

QUnit.moduleStart(function(details) {
    module = details.name;
});
QUnit.testStart(function(details) {
    test = details.name;
});

QUnit.log(function(details) {
    if (!details.result) {
        if (!failureFound) {
            failureFound = true;
            console.log('');
            console.log('/*********************************************************************/');
            console.log('/************************** FAILURE SUMMARY **************************/');
            console.log('/*********************************************************************/');
        }

        if (lastModuleLogged != module) {
            console.log('');
            console.log('-----------------------------------------------------------------------');
            console.log('Module: ' + module);
        }

        if (lastTestLogged != test) {
            failuresOnCurrentTest = 1;
            console.log('-----------------------------------------------------------------------');
            console.log('Test: ' + test);
        } else {
            failuresOnCurrentTest++;
        }

        console.log(' ' + failuresOnCurrentTest + ') Message: ' + details.message);
        if (typeof details.expected !== 'undefined') {
            console.log('    Expected: ' + details.expected);
            console.log('    Actual: ' + details.actual);
        }
        if (typeof details.source !== 'undefined') {
            console.log('    Source: ' + details.source);
        }

        lastModuleLogged = module;
        lastTestLogged = test;
    }
});

QUnit.done(function(details) {
    if (details.failed &gt; 0) {
        console.log('-----------------------------------------------------------------------');
        console.log('');
    }
});
</code></pre>

<p>}());
```</p>

<p>Now running tests with failures will produce something like the following:</p>

<p>``` text PhantomJS + QUnit Output with Failures
tj-cpu:spinner tj$ phantomjs run-qunit.js spinner.html</p>

<p>/<strong><strong><strong><strong><strong><strong><strong><strong><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>/
/</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> FAILURE SUMMARY </strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/
/</em></strong></strong></strong></strong></strong></strong></strong></strong>****************************************************/</p>

<hr />

<h2>Module: spinner: core</h2>

<p>Test: reading HTML5 attributes
 1) Message: min from markup</p>

<pre><code>Expected: -1000
Actual: -100
Source:     at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:447
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/unit/spinner/spinner_core.js:137
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:134
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:277
at process (file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:1233)
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:376
</code></pre>

<p> 2) Message: stop from options</p>

<pre><code>Expected: 50
Actual: 5
Source:     at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:447
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/unit/spinner/spinner_core.js:148
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:134
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:277
at process (file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:1233)
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:376
</code></pre>

<hr />

<h2>Module: spinner: events</h2>

<p>Test: change
 1) Message: blur after many keys</p>

<pre><code>Source:     at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:426
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/unit/spinner/spinner_events.js:130
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/ui/jquery.ui.widget.js:454
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/ui/jquery.ui.spinner.js:109
at handlerProxy (file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/ui/jquery.ui.widget.js:371)
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/jquery-1.8.0.js:3061
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/jquery-1.8.0.js:2677
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/jquery-1.8.0.js:2941
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/jquery-1.8.0.js:3607
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/jquery-1.8.0.js:611
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/jquery-1.8.0.js:241
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/jquery-1.8.0.js:3608
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/jquery-1.8.0.js:3660
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/tests/unit/spinner/spinner_events.js:165
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:134
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:277
at process (file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:1233)
at file:///Applications/XAMPP/xamppfiles/htdocs/jquery/jquery-ui/external/qunit.js:376
</code></pre>

<hr />

<p>'waitFor()' finished in 590ms.
Tests completed in 494 milliseconds.
486 tests of 489 passed, 3 failed.
```</p>

<p>This might be a bit excessive for some but I like being able to quickly see information about what failed from the command line.  Feel free to use this and alter it to your liking.</p>

<h3>TAP Format</h3>

<p>If you want to output the test results in <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP format</a> the <a href="https://github.com/twada/qunit-tap">QUnit-tap</a> plugin provides an excellent implementation using the same approach described above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[onscroll Event Issues on Mobile Browsers]]></title>
    <link href="http://tjvantoll.com/2012/08/19/onscroll-event-issues-on-mobile-browsers/"/>
    <updated>2012-08-19T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/08/19/onscroll-event-issues-on-mobile-browsers</id>
    <content type="html"><![CDATA[<p>All browsers fire an <code>onscroll</code> event on the <code>window</code> object whenever the window is scrolled.  On desktop browsers this event is fired continuously as the user scrolls, but on most all mobile browsers the event is not fired until the <em>scrolling action</em> comes to a complete stop.</p>

<!--more-->


<p>You can see this by scrolling in the example below:</p>

<iframe style="width: 100%; height: 300px;" src="http://jsfiddle.net/tj_vantoll/p4pww/13/embedded/result,html,js,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>The <code>onscroll</code> event count and the value of <code>window.scrollY</code> (<a href="https://developer.mozilla.org/en-US/docs/DOM/window.scrollY">the number of pixels the document has been scrolled vertically</a>) displayed on the top of the screen in the example are updated in an <code>onscroll</code> event handler.</p>

<p>If you're viewing this on any desktop browser you'll see that as you scroll the <code>onscroll</code> event is continuously firing, <code>window.scrollY</code> is continuously updating, and the blue box (which is present so you can visibly tell whether the browser re-paints the screen) is continuously moving.</p>

<h3>Enter Mobile</h3>

<p>If you try the same demo on iOS Safari (5.0), the default Android browser &lt;= 2.3, Opera Mobile, or IE on Windows Phone 7 you'll notice something quite different.  As you scroll the <code>onscroll</code> event isn't fired, <code>window.scrollY</code> isn't updated, and the blue box does not move until the scrolling has come to a complete stop.</p>

<p>You can see this in the video below (the video shows iOS Safari but the same behavior occurs in the other listed browsers):</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/5-vOJEP3x28" frameborder="0" allowfullscreen></iframe>


<h3>Why</h3>

<p>These mobile browsers simply do not fire the <code>onscroll</code> event until scrolling has completely stopped.  This includes not only the touch based scrolling itself, but additionally any momentum that the user gives on the scroll.  The event will not fire until it stops.  This is a problem if you want to apply a visual change to the screen as the user scrolls.</p>

<h3>Other Mobile Browsers</h3>

<p>Firefox for Android does fire the <code>onscroll</code> event and updates <code>window.clientY</code> as you scroll, but strangely it doesn't re-paint the screen for any changes that have been applied.</p>

<p>The Android browser in Ice Cream Sandwich fires the event but doesn't feel very responsive and only sporadically re-paints the DOM to move the blue box.  Luckily, Jelly Bean's Android browser handles this example perfectly; everything is updated and rendered smoothly as the user scrolls.</p>

<h3>The Problem</h3>

<p>In my case I wanted to apply a change to the DOM for every pixel that the user scrolled, exactly like moving the blue box in the example above.</p>

<p>So the question is, can we work around this limitation and get desktop <code>onscroll</code> functionality in a mobile friendly way?</p>

<h3>Workaround Attempt - setInterval</h3>

<p>My first attempt was to set an interval that did what I wanted to do in the <code>onscroll</code> event.  Yes the code will run continuously instead of just when the user scrolls, but it's somewhere to start.</p>

<p>``` javascript
setInterval(function() {</p>

<pre><code>// Logic
</code></pre>

<p>}, 20);
```</p>

<p>The problem with this approach is that iOS Safari, Android &lt;= 2.3, and Opera Mobile do not run any functions queued through <code>setInterval</code> or <code>setTimeout</code> while a scroll is being performed.  The execution will simply be paused until the scroll has completed.</p>

<p>Here's an example that simply appends an asterisk to a div every 500 milliseconds using <code>setInterval</code>:</p>

<iframe style="width: 100%; height: 300px;" src="http://jsfiddle.net/tj_vantoll/NfkEg/7/embedded/result,js,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If you're viewing this in a desktop browser and you scroll, you can see that the asterisks will continue to be created.</p>

<p>However, on the affected mobile browsers (iOS Safari, Android &lt;= 2.3, Opera Mobile), because the function queued through <code>setInterval</code> is paused, asterisk creation stops the moment you start scrolling and doesn't resume until you stop.</p>

<p>This video shows this behavior on iOS Safari (5.0):</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/XkLvV9aPcYQ" frameborder="0" allowfullscreen></iframe>


<p>This example works perfectly (scrolling doesn't stop asterisk creation) on the default Ice Cream Sandwich / Jelly Bean browser, Firefox for Android, and IE for Windows Phone 7.</p>

<h3>Workaround Attempt 2 - Use Touch Events</h3>

<p>Since the <code>setInterval</code> approach failed on the big mobile browsers my next thought was to use touch events instead.</p>

<p>Most mobile browsers fire <a href="http://blog.jquery.com/2012/04/10/getting-touchy-about-patents/">Apple's flavor</a> of <a href="https://developer.mozilla.org/en-US/docs/DOM/Touch_events">touch events</a> as the user interacts with the screen via touch (the notable exception being Window's Mobile since Microsoft has their own touch model).</p>

<p>In particular the <code>ontouchmove</code> event is fired as the user moves their finger (or stylus, etc) across the screen.  Since users on touch devices need to move their finger across the screen to scroll, this seemed like the perfect alternative to <code>onscroll</code>.</p>

<p>Therefore I modified my example to use <code>ontouchmove</code> instead of <code>onscroll</code>:</p>

<iframe style="width: 100%; height: 300px;" src="http://jsfiddle.net/tj_vantoll/RFdve/10/embedded/result,js,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If you scroll on the above example on a desktop browser nothing will be updated since the counters are being driven by the <code>ontouchmove</code> event.  On mobile browsers a wide variety of things happen:</p>

<ul>
<li>Android: The <code>ontouchmove</code> event does get fired as the user moves the screen.  However the DOM updates are very sporadic and feel very jerky.  This is true of the default Android browser in Gingerbread, Ice Cream Sandwich, and Jelly Bean although it gets better in later versions.</li>
<li>Firefox for Android: The <code>ontouchmove</code> events fires but DOM updates made in the <code>ontouchmove</code> event take effect sporadicly if at all.  Everything feels very jerky at best.</li>
<li>Opera Mobile: <code>ontouchmove</code> events occur but DOM changes are not applied until scrolling is complete.</li>
<li>iOS Safari: On <code>ontouchmove</code> event is fired as the screen is moved and the DOM does get re-painted.  This is only mobile browser where this approach made a substantial difference.</li>
</ul>


<p>One consistent issue with this approach is that the <code>ontouchmove</code> event is only fired when the user's finger remains on the screen.  Meaning, if the user gives any momentum to the scroll, <code>ontouchmove</code> events will not be fired while the window is scrolling and their finger is not on the screen.</p>

<p>You can see this in the video below:</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/wied94KmwKw" frameborder="0" allowfullscreen></iframe>


<p>So what does all of this mean about using the <code>ontouchmove</code> event to mimic desktop <code>onscroll</code> functionality?   At the moment there are too many inconsistencies to rely on this behavior in any way.  If you only need to support iOS Safari this approach works reasonably.</p>

<h3>Workaround Attempt 3 - Don't <em>Really</em> Scroll</h3>

<p>Another <em>solution</em> out there is to disable native scrolling altogether and use JavaScript to mimic scrolling instead.</p>

<p>``` javascript
$('window').on('touchmove', function(event) {</p>

<pre><code>//Prevent the window from being scrolled.
event.preventDefault();

//Do something like call window.scrollTo to mimic the scrolling
//request the user made.
</code></pre>

<p>});
```</p>

<p>Unfortunately such techniques are usually utilized to create fixed height/width scrolling areas and are not intended (nor especially practical) for full screens.  If you are only interested in a scrolling event for a small section of the page you might want to look into something such as <a href="http://cubiq.org/iscroll-4">iScroll 4</a>.</p>

<h3>Conclusion</h3>

<p>Unlike desktop browsers, most all mobile browsers simply do not fire an <code>onscroll</code> event until the scrolling action comes to a complete stop.</p>

<p>The only mobile browser that handled this event elegantly in my testing was Android's Jelly Bean browser.  Therefore, if you need any sort of cross browser support you're simply out of luck; there is simply no cross browser viable workaround to mimic the desktop behavior.  If you have had success implementing this by some other means please let me know in the comments.</p>

<h3>Disclaimer</h3>

<p>I haven't been able to test this in Chrome for Android and I know there are other mobile browsers that I'm missing.  If someone else has this capability I'd love to know how they handle these situations.</p>

<p>Also while I did verify these findings on physical devices for Firefox for Android, Android 2.3's default browser, and Safari on iOS 5; the rest of my testing was limited to simulators / emulators.  From past experience I know that simulator / emulator testing is no substitute for the real thing.  Therefore, if you find any discrepancies in my findings please let me know in the comments so I can update the post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subpixel Animation Issues in IE < 9]]></title>
    <link href="http://tjvantoll.com/2012/08/16/subpixel-animation-issues-in-ie-less-than-9/"/>
    <updated>2012-08-16T21:56:00-04:00</updated>
    <id>http://tjvantoll.com/2012/08/16/subpixel-animation-issues-in-ie-less-than-9</id>
    <content type="html"><![CDATA[<p>While there are definitely <a href="http://ejohn.org/blog/sub-pixel-problems-in-css/">cross browser discrepancies handling subpixels</a>, this one caught me by surprise.  Take the following:</p>

<p>``` html</p>

<div id="box"></div>


<script>
    var box = document.getElementById('box');
    box.style.left = '10.25px';
    console.log(box.style.left);
</script>


<p>```</p>

<p>This simply sets a value for the <code>left</code> CSS property then immediately retrieves it.  In Chrome 22, Firefox 14, Safari 6, Opera 12, IE >= 9, iOS 5, and Android <code>10.25px</code> will be logged.</p>

<p>In IE &lt; 9 <code>10px</code> is logged.  While not all browsers can accurately render the subpixel values, I had assumed all of them would've at least allowed the assignment.  I was wrong.  Internet Explorer will simply round the value to the nearest integer.</p>

<p>Why is this a problem?  <!--more-->Take the following code.</p>

<p>``` html</p>

<div id="box"></div>


<script>
    var box = document.getElementById('box');
    box.style.left = '0px';
    setInterval(function() {
        var currentLeft = box.style.left.replace('px', '');
        currentLeft = parseFloat(currentLeft);
        box.style.left = currentLeft + 0.25 + 'px';
    }, 20);
</script>


<p>```</p>

<p>This sets an interval that will increase the <code>left</code> property of a box by <code>0.25</code> pixels every 20 milliseconds.  Doing so will move the box left across the screen as seen below:</p>

<iframe style="width: 100%; height: 150px;" src="http://jsfiddle.net/tj_vantoll/PBsLt/9/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Great.  Unfortunately in IE &lt; 9 the box will not move.  Within the interval function the value to increment is being retrieved from the element itself, which, in IE &lt; 9 will continuously return the rounded value.</p>

<p>The way around this is simply to use store off the value of the property outside of the animation loop itself.</p>

<p>``` html</p>

<div id="box"></div>


<script>
    var left = 0;
    var box = document.getElementById('box');
    setInterval(function() {
        box.style.left = left + 'px';
        left += 0.25;
    }, 20);
</script>


<p>```</p>

<p>This has the added benefit of being more efficient since you save a property retrieval on every invocation of the loop.</p>
]]></content>
  </entry>
  
</feed>
