<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2012-07-07T15:50:05-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Detecting Print Requests with JavaScript]]></title>
    <link href="http://tjvantoll.com/2012/06/15/detecting-print-requests-with-javascript/"/>
    <updated>2012-06-15T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/06/15/detecting-print-requests-with-javascript</id>
    <content type="html"><![CDATA[<p>CSS has a well supported mechanism for applying changes only when the user is printing a document, <a href="http://coding.smashingmagazine.com/2011/11/24/how-to-set-up-a-print-style-sheet/">print stylesheets</a>.  They allow you to alter the presentation of a web page for the printer by applying rules that will only be interpreted for printing.  This is great for common tasks like hiding non-essential content, using more print friendly typography, and adjusting the layout to better suit the size and shape of paper.</p>

<p>Print stylesheets are great for making presentational changes for printing, but sometimes you need the full power of JavaScript.  And in order to do respond to print requests in JavaScript you need the browser to notify you that a print request occurred.</p>

<!--more-->


<h3>onbeforeprint and onafterprint</h3>

<p>IE5+ fires <code>onbeforeprint</code> and <code>onafterprint</code> events before and after the user requests the page to be printed.</p>

<p>``` javascript onbeforeprint and onaferprint
window.onbeforeprint = function() {</p>

<pre><code>console.log('This will be called before the user prints.');
</code></pre>

<p>};
window.onafterprint = function() {</p>

<pre><code>console.log('This will be called after the user prints');   
</code></pre>

<p>};
```</p>

<p>These events are not part of any specification but they are very convenient.  Because of this <a href="https://developer.mozilla.org/en/DOM/window.onbeforeprint#Browser_compatibility">Firefox added support for both events in version 6</a>.  However, WebKit and Opera do not support the events.  Therefore, for cross browser compatibility these events aren't going to cut it.</p>

<h3>WebKit's Solution</h3>

<p>WebKit has a bug (#<a href="https://bugs.webkit.org/show_bug.cgi?id=19937">19937</a>) out there to implement these events, but progress has stopped because the implementation of another API made this functionality possible already - <code>window.matchMedia</code>.</p>

<h3>window.matchMedia</h3>

<p>The <code>window.matchMedia</code> <a href="https://developer.mozilla.org/en/DOM/window.matchMedia">API</a> provides a means of determining whether the current <code>document</code> matches a given <a href="https://developer.mozilla.org/En/CSS/Media_queries">media query</a>.  For example:</p>

<p>``` javascript window.matchMedia
if (window.matchMedia(' (min-width: 600px) ').matches) {</p>

<pre><code>console.log('The viewport is at least 600 pixels wide');
</code></pre>

<p>} else {</p>

<pre><code>console.log('The viewport is less than 600 pixels wide');
</code></pre>

<p>}
```</p>

<p>You can also use this API to add listeners that will be fired whenever the result of the media query changes.  In the above example the <code>matches</code> criteria will be met whenever the viewport is at least 600px wide.  If you wanted to receive notifications whenever the viewport crossed the 600px threshold you could use the following.</p>

<p>``` javascript window.matchMedia with notifications
var mediaQueryList = window.matchMedia(' (min-width: 600px) ');
mediaQueryList.addListener(function(mql) {</p>

<pre><code>if (mql.matches) {
    console.log('The viewport is at least 600 pixels wide');
} else {
    console.log('The viewport is less than 600 pixels wide');
}
</code></pre>

<p>});
```</p>

<p><a href="http://caniuse.com/#feat=matchmedia">If your browser supports window.matchMedia</a> you can see this behavior live below by resizing your browser window under 600px and checking your browser's JavaScript console.</p>

<iframe style="width: 100%; height: 200px;" src="http://jsfiddle.net/tj_vantoll/uYJxy/2/embedded/result,js,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Interestingly, it turns out you can also use this same technique to listen for the <code>print</code> media being applied when the user requests the document to be printed (<a href="http://code.google.com/p/chromium/issues/detail?id=105743">hat tip to Ben Wells</a>):</p>

<p>``` javascript Using window.matchMedia to detecting print requests
var mediaQueryList = window.matchMedia('print');
mediaQueryList.addListener(function(mql) {</p>

<pre><code>if (mql.matches) {
    console.log('onbeforeprint equivalent');
} else {
    console.log('onafterprint equivalent');
}
</code></pre>

<p>});
```</p>

<p>This works great in Chrome 9+ and Safari 5.1 (with the exception of the fact that the <a href="http://code.google.com/p/chromium/issues/detail?id=105743">listeners fire twice in Chrome</a>).  However, it doesn't work in Firefox or IE10, even though they both support <code>window.matchMedia</code>.</p>

<h3>Combining the Approaches</h3>

<p>If you combine the two approaches you can detect print requests in IE 5+, Firefox 6+, Chrome 9+, and Safari 5.1+ (unfortunately Opera doesn't support either approach).</p>

<p>``` javascript Cross browser print request detection
(function() {</p>

<pre><code>var beforePrint = function() {
    console.log('Functionality to run before printing.');
};
var afterPrint = function() {
    console.log('Functionality to run after printing');
};

if (window.matchMedia) {
    var mediaQueryList = window.matchMedia('print');
    mediaQueryList.addListener(function(mql) {
        if (mql.matches) {
            beforePrint();
        } else {
            afterPrint();
        }
    });
}

window.onbeforeprint = beforePrint;
window.onafterprint = afterPrint;
</code></pre>

<p>}());
```</p>

<p>Note that your event handlers might potentially have to deal with the fact that they're going to be called twice per print request in Chrome.</p>

<h3>Why Would I Use This?</h3>

<p>For most situations print stylesheets are all you need to prepare the document for printing.  But I can think of a couple practical uses of the JavaScript event.</p>

<h3>Responsive Print Images</h3>

<p>One use is substituting a higher quality image for the purposes of printing.  Traditionally <a href="http://www.cssnewbie.com/print-friendly-images/">web browsers have displayed images at 72dpi and most printers can handle 300dpi+</a>.  While some newer devices are able to display images at much higher resolutions, most users are still using a screen that will show web images at much lower resolutions than their printer can handle.</p>

<p>Therefore an image that might look just fine on the user's screen might look fuzzy and grainy when printed out.  For most images this is acceptable, but it might be an issue for prominent images on regularly printed documents, like a company logo.  You probably want that to look crisp when printed out.</p>

<p>The <a href="http://www.alistapart.com/articles/hiresprinting">technique to work around this</a> involves loading both images, showing only the lower quality one by default, then hiding the low quality image and showing the high quality one in the print stylesheet.  The main downfall of this approach is that the end user has to download both images regardless of whether they're going to print the page.  Users on 3G devices that have no intention or capability of printing the document will still have to download your high resolution logo.</p>

<p>With the ability to detect print requests in JavaScript you can substitute the higher quality image on the fly when the user requests the page to be printed.</p>

<p>``` html Substituting higher quality images when printing
<img src="low-quality.jpg" id="company_logo" alt="My Company" /></p>

<script>
    (function() {
        var upgradeImage = function() {
            document.getElementById('company_logo')
                .setAttribute('src', 'high-quality.png'); 
        };

        if (window.matchMedia) {
            var mediaQueryList = window.matchMedia('print');
            mediaQueryList.addListener(upgradeImage);
        }

        window.onbeforeprint = upgradeImage;
    });
</script>


<p>```</p>

<p>The nice thing about this approach is that users that never print will not have to download the high quality image.  This technique also degrades nicely; users with browsers that don't support the print events will simply print the lower quality image.</p>

<h3>Tracking Print Requests</h3>

<p>Print events can also be used to track the number of times users print pages within a site or application.  Because of the lack of total browser support you wouldn't capture every print request, but this would be sufficient for getting a rough idea of how often people are printing.</p>

<p>``` javascript Tracking Print Requests
(function() {</p>

<pre><code>var afterPrint = function() {
    // Here you would send an AJAX request to the server to track that a page
    // has been printed.  You could additionally pass the URL if you wanted to
    // track printing across an entire site or application.
};

if (window.matchMedia) {
    var mediaQueryList = window.matchMedia('print');
    mediaQueryList.addListener(function(mql) {
        if (!mql.matches) {
            afterPrint();
        }
    });
}

window.onafterprint = afterPrint;
</code></pre>

<p>}());
```</p>

<h3>So can I use this in a "real" application?</h3>

<p>Sure, just make sure what you're doing degrades nicely for users using a browser in which the event will not be fired.</p>

<p>Can you think of any other practical uses of detecting print requests in JavaScript?  If so let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[window.showModalDialog: What It is and Why You Should Never Use It]]></title>
    <link href="http://tjvantoll.com/2012/05/02/showmodaldialog-what-it-is-and-why-you-should-never-use-it/"/>
    <updated>2012-05-02T22:37:00-04:00</updated>
    <id>http://tjvantoll.com/2012/05/02/showmodaldialog-what-it-is-and-why-you-should-never-use-it</id>
    <content type="html"><![CDATA[<p>Ah, 1997.  The first browser war was in full force, and Microsoft was busy adding proprietary new features to compete with Netscape Navigator.  One of those features was introducing a common OS UI element into the browser - modal dialogs.  Internet Explorer 4 launched with a <code>showModalDialog</code> method on the global <code>window</code> object.  When called it displays a dialog that the user has to deal with before interacting with the rest of the page.</p>

<p>Fast forward a few years and Internet Explorer had won the war, 95+ percent of us were using IE6.  Consequently a whole lot of web applications were designed around many of the proprietary features that IE had added.  Interestingly several of these have recently been added to the HTML5 specification including <a href="http://www.w3.org/TR/html5/embedded-content-0.html#dom-innerhtml">innerHTML</a>, <a href="http://html5.org/specs/dom-parsing.html#insertadjacenthtml%28%29">insertAdjacentHTML</a>, <a href="http://html5.org/specs/dom-parsing.html#outerhtml">outerHTML</a>, and… <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dialogs-implemented-using-separate-documents">window.showModalDialog</a>.</p>

<p>So now that <code>window.showModalDialog</code> has been standardized should you be using it?</p>

<p><strong>No.</strong></p>

<p>In general the idea of putting a native dialog implementation into the browser was a really good idea, but  <code>window.showModalDialog</code> was a bad implementation that is riddled with issues and poor browser support.<!--more--></p>

<h3>Modal Dialogs</h3>

<p>So why did Microsoft add modal dialogs to begin with?  They're actually a heavily used UI element in most all computer interfaces.  Try to shut off your phone, tablet, laptop, etc.. and you're almost certainly going to be presented with a modal dialog asking you to confirm your decision before being allowed to shut it down.  What makes it modal is the fact that you are forced to make a selection before you do anything else.</p>

<p>It's oftentimes convenient from a usability stand point to get some form of feedback from a user before allowing them to continue.  <code>showModalDialog</code> was simply Microsoft's attempt to bring this UI element to the web.</p>

<h3>Implementation</h3>

<p>To use the <code>showModalDialog</code> method you simply call it with a URL.</p>

<p><code>javascript window.showModalDialog Basic Usage
window.showModalDialog('http://google.com');
</code></p>

<p>This will open up a modal dialog with Google loaded in it.  In and of itself this isn't all that useful.  Usually if you're showing a modal dialog you want to get some information back from it.  This is where the window.returnValue comes into play.</p>

<h4>window.returnValue</h4>

<p>``` html window.returnValue Example</p>

<!-- page.html -->


<p>&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;script&gt;
  var result = window.showModalDialog('modal.html');
  console.log(result); //'foo'
&lt;/script&gt;
</code></pre>

<p>  </head>
  <body>
  </body>
</html></p>

<!-- modal.html -->


<p>&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;script&gt;
  window.returnValue = 'foo';
  window.close();
&lt;/script&gt;
</code></pre>

<p>  </head>
  <body>
  </body>
</html>
```</p>

<p>In this example when page.html is loaded it will immediately open up a modal dialog with modal.html loaded in it.  It will then block until the modal dialog returns control.  The JavaScript interpreter will literally pause execution as if you had a breakpoint set at that line of code and wait for the result of the modal dialog.</p>

<p>When modal.html loads it will assign a value of 'foo' to <code>window.returnValue</code> and close itself via <code>window.close()</code>.  The opening window (page.html) will get control back, resume execution, and log the return value of 'foo'.</p>

<h4>window.dialogArguments</h4>

<p>If you want to pass information to the modal dialog you can do so via the second parameter of <code>window.showModalDialog</code>.  Those values will be available in the modal dialog's <code>window.dialogArguments</code> property.</p>

<p>``` html window.returnValue Example</p>

<!-- page.html -->


<p>&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;script&gt;
  window.showModalDialog('modal.html', 'foo');
&lt;/script&gt;
</code></pre>

<p>  </head>
  <body>
  </body>
</html></p>

<!-- modal.html -->


<p>&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;script&gt;
  alert(window.dialogArguments); //'foo'
  window.close();
&lt;/script&gt;
</code></pre>

<p>  </head>
  <body>
  </body>
</html>
```</p>

<h4>Further Options</h4>

<p>A third parameter to <code>window.showModalDialog</code> is available to customize the look and behavior of the modal dialog.  The <a href="https://developer.mozilla.org/en/DOM/window.showModalDialog">MDN article on showModalDialog</a> has these well documented.</p>

<h3>Modal Dialog == A Brand New Window</h3>

<p>Note that in all these examples modal.html is a full HTML document, not a snippet that is injected in.  This is a characterizing feature of <code>window.showModalDialog</code>.  It's really just two completely separate windows communicating with each other.  The fact that you have two separate windows and DOMs means you don't have to worry about JS &amp; DOM conflicts, which is appealing if you have a lot of bad JavaScript with a cluttered global scope.  But mostly this just adds unnecessary complexity, complicates the browser implementation, and contributes to a number of bugs (see below).</p>

<p><blockquote><p>"You should only use one browser window ever, as a Web app author."</p><footer><strong>Ian Hickson (HTML 5 spec maintainer)</strong> <cite><a href='http://www.mail-archive.com/public-webapi@w3.org/msg03345.html'>www.mail-archive.com/&hellip;</a></cite></footer></blockquote></p>

<h3>Browser Support</h3>

<p>IE obviously supports this function and has since IE4, but what about the other browsers?  Firefox added support in version 3 and Safari added support in 5.1.  Opera doesn't support it at all.</p>

<p>Chrome has supported it since an early version but has some serious bugs with its implementation.  Most importantly the window Chrome displays isn't modal (see <a href="http://code.google.com/p/chromium/issues/detail?id=16045">Chromium bug #16045</a>), meaning, the user is able to interact with the original window before dealing with the modal dialog, which kind of defeats the whole purpose.  Another big one is that <code>window.returnValue</code> will be lost if any sort of redirect or form submission is done in the modal dialog (see <a href="http://code.google.com/p/chromium/issues/detail?id=42939">Chromium bug #42939</a>).</p>

<p>Despite these issues Chrome did do one thing right.  While it's important that modal dialogs prevent the user from interacting with the originating window, there's no reason the user shouldn't be allowed to interact with other tabs or native browser controls (back/forward, favorites, address bar, etc). Chrome is the only browser that allows this - IE, Firefox, and Safari do not.  This is actually a big annoyance to the end user.  IE, Firefox, and Safari don't even allow you to minimize or close the browser until you've dealt with the modal dialog.</p>

<h3>More Issues</h3>

<h4>Modal Dialog == Popup</h4>

<p>The biggest issue with modal dialogs is that Firefox, Chrome, and Safari all treat them as popups by default and block them.  A user has to explictly allow the popup in order to see your modal dialog.  In my experience users usually get frustrated and leave at that point.</p>

<h4>Debugging</h4>

<p>The debugging experience for <code>window.showModalDialog</code> is horrible.  IE as recent as version 9 won't let you open their dev tools up in the modal dialog… at all.  Firefox, Chrome, and Safari will let you open FireBug / Web Inspector, but good luck debugging any script that happens when the dialog is opened.  You're basically forced to alert like it's 1999 to determine what's going on.  Also just a word of warning, IE <strong>LOVES</strong> to cache modal dialogs.</p>

<h4>Mobile</h4>

<p>Currently no major mobile browsers support <code>window.showModalDialog</code>, so if you're looking for any sort of tablet / mobile support you need to stay away.</p>

<h3>Why was this added to HTML5?</h3>

<p>So why have other browsers added support for this method and why was it added to the HTML5 spec?  It's mostly because in the IE6 days 1.2 bajillion applications were written to be extremely dependent on <code>window.showModalDialog</code>.  I can say that I personally work at an enterprise that has its fair share of those applications, and you can see many comments demanding enterprise application support on the various Chrome bugs (see <a href="http://code.google.com/p/chromium/issues/detail?id=4202">#4202</a>, <a href="http://code.google.com/p/chromium/issues/detail?id=16045">#16045</a>, &amp; <a href="http://code.google.com/p/chromium/issues/detail?id=42939">#42939</a>).</p>

<p>Refactoring these applications is no small task, and browsers that want to win market share are catering to them to gain support.</p>

<p><blockquote><p>"At this point, browsers have to support it, there's too much content out there that uses it."</p><footer><strong>Ian Hickson</strong> <cite><a href='http://www.mail-archive.com/public-webapi@w3.org/msg03363.html'>www.mail-archive.com/&hellip;</a></cite></footer></blockquote></p>

<h3>Better Alternatives</h3>

<p>Given all the issues outlined above, it is not a good idea to use <code>window.showModalDialog</code> in new development (or any development for that matter).  So what should you use?  There's no shortage of choices, basically all JavaScript frameworks provide an alternative (see <a href="http://livedocs.dojotoolkit.org/dijit/Dialog">Dojo</a>, <a href="http://mootools.net/forge/p/ascribe_dialog">MooTools</a>, &amp; <a href="http://yuilibrary.com/yui/docs/overlay/">YUI</a>).</p>

<p>Personally I would highly recommend <a href="http://jqueryui.com/demos/dialog/">jQuery UI's dialog</a>.  It has a clean API, is highly customizable, extendable, and is themeable through <a href="http://jqueryui.com/themeroller/">jQuery UI's theme roller</a>.</p>

<h3>Moving Forward</h3>

<p>When asked "What’s your fave feature that didn’t get into HTML 5 that you’d put into HTML 6?", Ian Hickson stated in a 2009 interview that:</p>

<p><blockquote><p>In-window modal dialogs or dialog box—the kind of prompt you get when the computer asks you a question and won’t let you do anything else until you answer the question. For instance, the window that comes up when you say "Save As…" is usually a modal dialog.</p></p><p><p>Right now people fake it with divs and complicated styles and script. It would be neat to just be able to say "make this section a modal dialog". Like showModalDialog(), but within the page instead of opening a new window with a new page.</p></p><p><p>I’d add it to HTML 5, but there are so many new features already that we need to wait for the browsers to catch up.</p><footer><strong>Ian Hickson</strong> <cite><a href='http://www.webstandards.org/2009/05/13/interview-with-ian-hickson-editor-of-the-html-5-specification/'>www.webstandards.org/2009/05/13/&hellip;</a></cite></footer></blockquote></p>

<p>Good news, <a href="http://dev.w3.org/html5/spec/commands.html#the-dialog-element">the dialog element</a> has recently been added to the HTML spec.  It includes a <code>showModal</code> method as well as a <code>returnValue</code> property that mimics <code>window.returnValue</code>.  The bad news?  It will be a long time before this element is useable  in all browsers.  The good news?  This would be a relatively easy element to <a href="http://remysharp.com/2010/10/08/what-is-a-polyfill/">polyfill</a>, so once some implementations make their way into browsers, developers could make a functional version for older browsers with the same API.</p>

<h3>Conclusion</h3>

<p><code>window.showModalDialog</code> is an old API that has been retroactively standardized; but that doesn't mean you should actually be using it.  If you're still maintaining code using this try to get off of it as soon as possible.  That being said the idea of having native dialog capabilities built into the browser wasn't a bad idea.  Hope may be on the way with the dialog element that was recently added to the HTML5 spec.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript for the Java Developer]]></title>
    <link href="http://tjvantoll.com/2012/03/21/javascript-for-the-java-developer/"/>
    <updated>2012-03-21T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2012/03/21/javascript-for-the-java-developer</id>
    <content type="html"><![CDATA[<p>I gave a "JavaScript for the Java Developer" talk to the <a href="http://groups.google.com/group/greaterlansingjug?pli=1">Greater Lansing Java Users Group</a> on March 20th, 2012.  For those that missed the talk the slides are <a href="/speaking/slides/2012/JavaScript-for-the-Java-Developer/">here</a>.</p>
]]></content>
  </entry>
  
</feed>
